{"version":3,"sources":["webpack://RxStomp/webpack/universalModuleDefinition","webpack://RxStomp/webpack/bootstrap","webpack://RxStomp/./node_modules/angular2-uuid/index.js","webpack://RxStomp/./src/index.ts","webpack://RxStomp/./src/rx-stomp-config.ts","webpack://RxStomp/./src/rx-stomp-rpc-config.ts","webpack://RxStomp/./src/rx-stomp-rpc.ts","webpack://RxStomp/./src/rx-stomp-state.ts","webpack://RxStomp/./src/rx-stomp.ts","webpack://RxStomp/external {\"commonjs\":\"@stomp/stompjs\",\"commonjs2\":\"@stomp/stompjs\",\"amd\":\"@stomp/stompjs\",\"root\":\"StompJs\"}","webpack://RxStomp/external {\"root\":[\"rxjs\"],\"commonjs\":\"rxjs\",\"commonjs2\":\"rxjs\",\"amd\":\"rxjs\"}","webpack://RxStomp/external {\"root\":[\"rxjs\",\"operators\"],\"commonjs\":\"rxjs/operators\",\"commonjs2\":\"rxjs/operators\",\"amd\":\"rxjs/operators\"}"],"names":[],"mappings":"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","file":"rx-stomp.umd.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@stomp/stompjs\"), require(\"rxjs\"), require(\"rxjs/operators\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"RxStomp\", [\"@stomp/stompjs\", \"rxjs\", \"rxjs/operators\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"RxStomp\"] = factory(require(\"@stomp/stompjs\"), require(\"rxjs\"), require(\"rxjs/operators\"));\n\telse\n\t\troot[\"RxStomp\"] = factory(root[\"StompJs\"], root[\"rxjs\"], root[\"rxjs\"][\"operators\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__stomp_stompjs__, __WEBPACK_EXTERNAL_MODULE_rxjs__, __WEBPACK_EXTERNAL_MODULE_rxjs_operators__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\"use strict\";\nvar UUID = (function () {\n    function UUID() {\n        // no-op\n    }\n    UUID.UUID = function () {\n        if (typeof (window) !== \"undefined\" && typeof (window.crypto) !== \"undefined\" && typeof (window.crypto.getRandomValues) !== \"undefined\") {\n            // If we have a cryptographically secure PRNG, use that\n            // http://stackoverflow.com/questions/6906916/collisions-when-generating-uuids-in-javascript\n            var buf = new Uint16Array(8);\n            window.crypto.getRandomValues(buf);\n            return (this.pad4(buf[0]) + this.pad4(buf[1]) + \"-\" + this.pad4(buf[2]) + \"-\" + this.pad4(buf[3]) + \"-\" + this.pad4(buf[4]) + \"-\" + this.pad4(buf[5]) + this.pad4(buf[6]) + this.pad4(buf[7]));\n        }\n        else {\n            // Otherwise, just use Math.random\n            // https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\n            // https://stackoverflow.com/questions/11605068/why-does-jshint-argue-against-bitwise-operators-how-should-i-express-this-code\n            return this.random4() + this.random4() + \"-\" + this.random4() + \"-\" + this.random4() + \"-\" +\n                this.random4() + \"-\" + this.random4() + this.random4() + this.random4();\n        }\n    };\n    UUID.pad4 = function (num) {\n        var ret = num.toString(16);\n        while (ret.length < 4) {\n            ret = \"0\" + ret;\n        }\n        return ret;\n    };\n    UUID.random4 = function () {\n        return Math.floor((1 + Math.random()) * 0x10000)\n            .toString(16)\n            .substring(1);\n    };\n    return UUID;\n}());\nexports.UUID = UUID;\n//# sourceMappingURL=index.js.map","export * from './rx-stomp-config';\nexport * from './rx-stomp';\nexport * from './rx-stomp-state';\n\nexport * from './rx-stomp-rpc-config';\nexport * from './rx-stomp-rpc';\nexport * from './rx-stomp-publish-params';\n","import {debugFnType, StompHeaders, Versions} from '@stomp/stompjs';\nimport {RxStomp} from './rx-stomp';\n\n/**\n * Represents a configuration object for RxSTOMP.\n * Instance of this can be passed to [RxStomp#configure]{@link RxStomp#configure}\n *\n * All the attributes of this calls are optional.\n *\n * Part of `@stomp/rx-stomp`\n */\nexport class RxStompConfig {\n  /**\n   * The URL for the STOMP broker to connect to.\n   * Typically like `\"ws://broker.329broker.com:15674/ws\"` or `\"wss://broker.329broker.com:15674/ws\"`.\n   *\n   * Only one of this or [RxStompConfig#webSocketFactory]{@link RxStompConfig#webSocketFactory} need to be set.\n   * If both are set, [RxStompConfig#webSocketFactory]{@link RxStompConfig#webSocketFactory} will be used.\n   *\n   * Maps to: [Client#brokerURL]{@link Client#brokerURL}\n   */\n  public brokerURL?: string;\n\n  /**\n   * STOMP versions to attempt during STOMP handshake. By default versions `1.0`, `1.1`, and `1.2` are attempted.\n   *\n   * Example:\n   * ```javascript\n   *        // Try only versions 1.0 and 1.1\n   *        rxStompConfig.stompVersions= new Versions(['1.0', '1.1']);\n   * ```\n   *\n   * Maps to: [Client#stompVersions]{@link Client#stompVersions}\n   */\n  public stompVersions?: Versions;\n\n  /**\n   * Set it to log the actual raw communication with the broker.\n   * When unset, it logs headers of the parsed frames.\n   *\n   * Change in this effects from next broker reconnect.\n   *\n   * **Caution: this assumes that frames only have valid UTF8 strings.**\n   *\n   * Maps to: [Client#logRawCommunication]{@link Client#logRawCommunication}.\n   */\n  public logRawCommunication?: boolean;\n\n  /** Enable client debugging? */\n  public debug?: debugFnType;\n\n  /**\n   * This function should return a WebSocket or a similar (e.g. SockJS) object.\n   * If your STOMP Broker supports WebSockets, prefer setting [Client#brokerURL]{@link Client#brokerURL}.\n   *\n   * If both this and [Client#brokerURL]{@link Client#brokerURL} are set, this will be used.\n   *\n   * Example:\n   * ```javascript\n   *        // use a WebSocket\n   *        rxStompConfig.webSocketFactory= function () {\n   *          return new WebSocket(\"wss://broker.329broker.com:15674/ws\");\n   *        };\n   *\n   *        // Typical usage with SockJS\n   *        rxStompConfig.webSocketFactory= function () {\n   *          return new SockJS(\"http://broker.329broker.com/stomp\");\n   *        };\n   * ```\n   *\n   * Maps to: [Client#webSocketFactory]{@link Client#webSocketFactory}\n   */\n  public webSocketFactory?: () => any;\n\n  /**\n   *  automatically reconnect with delay in milliseconds, set to 0 to disable.\n   *\n   * Maps to: [Client#reconnectDelay]{@Client#reconnectDelay}\n   */\n  public reconnectDelay?: number;\n\n  /**\n   * Incoming heartbeat interval in milliseconds. Set to 0 to disable.\n   *\n   * Maps to: [Client#heartbeatIncoming]{@Client#heartbeatIncoming}\n   */\n  public heartbeatIncoming?: number;\n\n  /**\n   * Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\n   *\n   * Maps to: [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}\n   */\n  public heartbeatOutgoing?: number;\n\n  /**\n   * Enable non-standards compliant mode of splitting of outgoing large text packets.\n   * See [Client#splitLargeFrames]{@link Client#splitLargeFrames} for details.\n   * Useful with Java Spring based brokers.\n   *\n   * Maps to: [Client#splitLargeFrames]{@link Client#splitLargeFrames}.\n   */\n  public splitLargeFrames?: boolean;\n\n  /**\n   * Maps to: [Client#forceBinaryWSFrames]{@link Client#forceBinaryWSFrames}.\n   */\n  public forceBinaryWSFrames?: boolean;\n\n  /**\n   * See [Client#appendMissingNULLonIncoming]{@link Client#appendMissingNULLonIncoming}.\n   */\n  public appendMissingNULLonIncoming?: boolean;\n\n  /**\n   * Maps to: [Client#maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\n   */\n  public maxWebSocketChunkSize?: number;\n\n  /**\n   * Connection headers, important keys - `login`, `passcode`, `host`.\n   * Though STOMP 1.2 standard marks these keys to be present, check your broker documentation for\n   * details specific to your broker.\n   *\n   * Maps to: [Client#connectHeaders]{@link Client#connectHeaders}\n   */\n  public connectHeaders?: StompHeaders;\n\n  /**\n   * Disconnection headers.\n   *\n   * Maps to: [Client#disconnectHeaders]{@link Client#disconnectHeaders}\n   */\n  public disconnectHeaders?: StompHeaders;\n\n  /**\n   * Callback, invoked on before a connection connection to the STOMP broker.\n   *\n   * You can change configuration of the rxStomp, which will impact the immediate connect.\n   * It is valid to call [RxStomp#decativate]{@link RxStomp#deactivate} in this callback.\n   *\n   * As of version 0.1.1, this callback can be\n   * [async](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function)\n   * (i.e., it can return a\n   * [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)).\n   * In that case connect will be called only after the Promise is resolved.\n   * This can be used to reliably fetch credentials, access token etc. from some other service\n   * in an asynchronous way.\n   *\n   * Maps to: [Client#beforeConnect]{@link Client#beforeConnect}\n   */\n  public beforeConnect?: (client: RxStomp) => void|Promise<void>;\n}\n","import { IMessage } from '@stomp/stompjs';\nimport { Observable } from 'rxjs';\nimport { RxStomp } from './rx-stomp';\n\n/**\n * See the guide for example\n *\n * Part of `@stomp/rx-stomp`\n */\nexport type setupReplyQueueFnType = (replyQueueName: string, rxStomp: RxStomp) => Observable<IMessage>;\n\n/**\n * RPC Config. See the guide for example.\n */\nexport class RxStompRPCConfig {\n  /**\n   * Name of the reply queue. See the guide for details.\n   * Default `/temp-queue/rpc-replies` suitable for RabbitMQ and ActiveMQ.\n   */\n  public replyQueueName?: string;\n  /**\n   * Setup the reply queue. See the guide for details.\n   */\n  public setupReplyQueue?: setupReplyQueueFnType;\n}\n","import {Observable, Observer, Subscription} from 'rxjs';\nimport {filter, first} from 'rxjs/operators';\n\nimport {UUID} from 'angular2-uuid';\n\nimport {IMessage, publishParams, StompHeaders} from '@stomp/stompjs';\n\nimport {RxStomp} from './rx-stomp';\nimport {RxStompRPCConfig, setupReplyQueueFnType} from './rx-stomp-rpc-config';\n\n/**\n * An implementation of Remote Procedure Call (RPC) using messaging.\n *\n * Please see the [guide](/guide/rx-stomp/ng2-stompjs/2018/10/12/remote-procedure-call.html) for details.\n *\n * Part of `@stomp/rx-stomp`\n */\nexport class RxStompRPC {\n  private _replyQueueName = '/temp-queue/rpc-replies';\n\n  private _setupReplyQueue: setupReplyQueueFnType = () => {\n    return this.rxStomp.unhandledMessage$;\n  }\n\n  private _repliesObservable: Observable<IMessage>;\n\n  /**\n   * Create an instance, see the [guide](/guide/rx-stomp/ng2-stompjs/2018/10/12/remote-procedure-call.html) for details.\n   */\n  constructor(private rxStomp: RxStomp, private stompRPCConfig?: RxStompRPCConfig) {\n    if (stompRPCConfig) {\n      if (stompRPCConfig.replyQueueName) {\n        this._replyQueueName = stompRPCConfig.replyQueueName;\n      }\n      if (stompRPCConfig.setupReplyQueue) {\n        this._setupReplyQueue = stompRPCConfig.setupReplyQueue;\n      }\n    }\n  }\n\n  /**\n   * Make an RPC request.\n   * See the [guide](/guide/rx-stomp/ng2-stompjs/2018/10/12/remote-procedure-call.html) for example.\n   *\n   * It is a simple wrapper around [RxStompRPC#stream]{@link RxStompRPC#stream}.\n   */\n  public rpc(params: publishParams): Observable<IMessage> {\n    // We know there will be only one message in reply\n    return this.stream(params).pipe(first());\n  }\n\n  /**\n   * Make an RPC stream request. See the [guide](/guide/rx-stomp/ng2-stompjs/2018/10/12/remote-procedure-call.html).\n   *\n   * Note: This call internally takes care of generating a correlation id,\n   * however, if `correlation-id` is passed via `headers`, that will be used instead.\n   */\n  public stream(params: publishParams): Observable<IMessage> {\n    const headers: StompHeaders = (Object as any).assign({}, params.headers || {});\n    const {destination, body, binaryBody} = params;\n\n    if (!this._repliesObservable) {\n      this._repliesObservable = this._setupReplyQueue(this._replyQueueName, this.rxStomp);\n    }\n\n    return Observable.create(\n      (rpcObserver: Observer<IMessage>) => {\n        let defaultMessagesSubscription: Subscription;\n\n        const correlationId = headers['correlation-id'] || UUID.UUID();\n\n        defaultMessagesSubscription = this._repliesObservable.pipe(filter((message: IMessage) => {\n          return message.headers['correlation-id'] === correlationId;\n        })).subscribe((message: IMessage) => {\n          rpcObserver.next(message);\n        });\n\n        // send an RPC request\n        headers['reply-to'] = this._replyQueueName;\n        headers['correlation-id'] = correlationId;\n\n        this.rxStomp.publish({destination, body, binaryBody, headers});\n\n        return () => { // Cleanup\n          defaultMessagesSubscription.unsubscribe();\n        };\n      }\n    );\n  }\n}\n","/**\n * Possible states for the RxStomp\n *\n * Part of `@stomp/rx-stomp`\n */\nexport enum RxStompState {\n  CONNECTING,\n  OPEN,\n  CLOSING,\n  CLOSED\n}\n","import {BehaviorSubject, Observable, Observer, Subject, Subscription} from 'rxjs';\n\nimport {filter, share} from 'rxjs/operators';\n\nimport {\n  Client,\n  debugFnType,\n  IFrame,\n  IMessage,\n  publishParams,\n  StompConfig,\n  StompHeaders,\n  StompSubscription\n} from '@stomp/stompjs';\n\nimport {RxStompConfig} from './rx-stomp-config';\nimport {IRxStompPublishParams} from './rx-stomp-publish-params';\nimport {RxStompState} from './rx-stomp-state';\n\n/**\n * This is the main Stomp Client.\n * Typically you will create an instance of this to connect to the STOMP broker.\n *\n * This wraps [@stomp/stompjs]{@link https://github.com/stomp-js/stompjs}\n * {@link Client} class.\n *\n * The key difference is that it exposes operations as RxJS Observables.\n * For example when a STOMP endpoint is subscribed it returns an Observable\n * that will stream all received messages.\n *\n * With exception of beforeConnect, functionality related to all callbacks in\n * [@stomp/stompjs Client]{@link Client}\n * is exposed as Observables/Subjects/BehaviorSubjects.\n *\n * RxStomp also tries to transparently handle connection failures.\n *\n * Part of `@stomp/rx-stomp`\n */\nexport class RxStomp {\n  /**\n   * Connection State\n   *\n   * It is a BehaviorSubject and will emit current status immediately. This will typically get\n   * used to show current status to the end user.\n   */\n  public readonly connectionState$: BehaviorSubject<RxStompState>;\n\n  /**\n   * Will trigger when connection is established.\n   * It will trigger every time a (re)connection occurs.\n   * If it is already connected it will trigger immediately.\n   * You can safely ignore the value, as it will always be `StompState.OPEN`\n   */\n  public readonly connected$: Observable<RxStompState>;\n\n  /**\n   * These will be triggered before connectionState$ and connected$.\n   * During a reconnect, tt will allow subscriptions to be reinstated before sending\n   * queued messages.\n   */\n  private _connectionStatePre$: BehaviorSubject<RxStompState>;\n  private _connectedPre$: Observable<RxStompState>;\n\n  /**\n   * Provides headers from most recent connection to the server as returned by the CONNECTED frame.\n   * If the STOMP connection has already been established it will trigger immediately.\n   * It will trigger for each reconnection.\n   */\n  public readonly serverHeaders$: Observable<StompHeaders>;\n\n  protected _serverHeadersBehaviourSubject$: BehaviorSubject<null | StompHeaders>;\n\n  /**\n   * This function will be called for any unhandled messages.\n   * It is useful for receiving messages sent to RabbitMQ temporary queues.\n   *\n   * It can also get invoked with stray messages while the server is processing\n   * a request to unsubscribe from an endpoint.\n   *\n   * This Observer will yield the received\n   * {@link IMessage}\n   * objects.\n   *\n   * Maps to: [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}\n   */\n  public readonly unhandledMessage$: Subject<IMessage>;\n\n  /**\n   * This function will be called for any unhandled frame.\n   * Normally you should receive anything here unless it is non compliant STOMP broker\n   * or an error.\n   *\n   * This Observer will yield the received\n   * {@link IFrame}\n   * objects.\n   *\n   * Maps to: [Client#onUnhandledFrame]{@link Client#onUnhandledFrame}\n   */\n  public readonly unhandledFrame$: Subject<IFrame>;\n\n  /**\n   * STOMP brokers can be requested to notify when an operation is actually completed.\n   * Prefer using [RxStomp#watchForReceipt]{@link RxStomp#watchForReceipt}.\n   *\n   * This Observer will yield the received\n   * {@link IFrame}\n   * objects.\n   *\n   * Maps to: [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}\n   */\n  public readonly unhandledReceipts$: Subject<IFrame>;\n\n  /**\n   * It will stream all ERROR frames received from the STOMP Broker.\n   * A compliant STOMP Broker will close the connection after this type of frame.\n   * Please check broker specific documentation for exact behavior.\n   *\n   * This Observer will yield the received\n   * {@link IFrame}\n   * objects.\n   *\n   * Maps to: [Client#onStompError]{@link Client#onStompError}\n   */\n  public readonly stompErrors$: Subject<IFrame>;\n\n  /**\n   * It will stream all web socket errors.\n   *\n   * This Observer will yield the received\n   * [Event]{@link https://developer.mozilla.org/en-US/docs/Web/API/Event}.\n   *\n   * Maps to: [Client#onWebSocketError]{@link Client#onWebSocketError}\n   */\n  public readonly webSocketErrors$: Subject<Event>;\n\n  /**\n   * Internal array to hold locally queued messages when STOMP broker is not connected.\n   */\n  protected _queuedMessages: publishParams[] = [];\n\n  /**\n   * Instance of actual\n   * [@stomp/stompjs]{@link https://github.com/stomp-js/stompjs}\n   * {@link Client}.\n   *\n   * **Be careful in calling methods on it directly - you may get unintended consequences.**\n   */\n  get stompClient(): Client {\n    return this._stompClient;\n  }\n  protected _stompClient: Client;\n\n  /**\n   * Before connect\n   */\n  protected _beforeConnect: (client: RxStomp) => void|Promise<void>;\n\n  /**\n   * Will be assigned during configuration, no-op otherwise\n   */\n  protected _debug: debugFnType;\n\n  /**\n   * Constructor\n   */\n  public constructor() {\n    this._stompClient = new Client();\n\n    const noOp = () => {};\n\n    // Before connect is no op by default\n    this._beforeConnect = noOp;\n\n    // debug is no-op by default\n    this._debug = noOp;\n\n    // Initial state is CLOSED\n    this._connectionStatePre$ = new BehaviorSubject<RxStompState>(RxStompState.CLOSED);\n\n    this._connectedPre$ = this._connectionStatePre$.pipe(\n      filter((currentState: RxStompState) => {\n        return currentState === RxStompState.OPEN;\n      })\n    );\n\n    // Initial state is CLOSED\n    this.connectionState$ = new BehaviorSubject<RxStompState>(RxStompState.CLOSED);\n\n    this.connected$ = this.connectionState$.pipe(\n      filter((currentState: RxStompState) => {\n        return currentState === RxStompState.OPEN;\n      })\n    );\n\n    // Setup sending queuedMessages\n    this.connected$.subscribe(() => {\n      this._sendQueuedMessages();\n    });\n\n    this._serverHeadersBehaviourSubject$ = new BehaviorSubject<null | StompHeaders>(null);\n\n    this.serverHeaders$ = this._serverHeadersBehaviourSubject$.pipe(\n      filter((headers: null | StompHeaders) => {\n        return headers !== null;\n      })\n    );\n\n    this.stompErrors$ = new Subject<IFrame>();\n    this.unhandledMessage$ = new Subject<IMessage>();\n    this.unhandledReceipts$ = new Subject<IFrame>();\n    this.unhandledFrame$ = new Subject<IFrame>();\n    this.webSocketErrors$ = new Subject<Event>();\n  }\n\n  /**\n   * Set configuration. This method may be called multiple times.\n   * Each call will add to the existing configuration.\n   *\n   * Example:\n   *\n   * ```javascript\n   *        const rxStomp = new RxStomp();\n   *        rxStomp.configure({\n   *          brokerURL: 'ws://127.0.0.1:15674/ws',\n   *          connectHeaders: {\n   *            login: 'guest',\n   *            passcode: 'guest'\n   *          },\n   *          heartbeatIncoming: 0,\n   *          heartbeatOutgoing: 20000,\n   *          reconnectDelay: 200,\n   *          debug: (msg: string): void => {\n   *            console.log(new Date(), msg);\n   *          }\n   *        });\n   *        rxStomp.activate();\n   * ```\n   *\n   * Maps to: [Client#configure]{@link Client#configure}\n   */\n  public configure(rxStompConfig: RxStompConfig) {\n    const stompConfig: StompConfig = (Object as any).assign({}, rxStompConfig);\n\n    if (stompConfig.beforeConnect) {\n      this._beforeConnect = stompConfig.beforeConnect;\n      delete stompConfig.beforeConnect;\n    }\n\n    // RxStompConfig has subset of StompConfig fields\n    this._stompClient.configure(stompConfig);\n    if (stompConfig.debug) {\n      this._debug = stompConfig.debug;\n    }\n  }\n\n  /**\n   * Initiate the connection with the broker.\n   * If the connection breaks, as per [RxStompConfig#reconnectDelay]{@link RxStompConfig#reconnectDelay},\n   * it will keep trying to reconnect.\n   *\n   * Call [RxStomp#deactivate]{@link RxStomp#deactivate} to disconnect and stop reconnection attempts.\n   *\n   * Maps to: [Client#activate]{@link Client#activate}\n   */\n  public activate(): void {\n    this._stompClient.configure({\n      beforeConnect: async () => {\n        this._changeState(RxStompState.CONNECTING);\n\n        // Call handler\n        await this._beforeConnect(this);\n      },\n      onConnect: (frame: IFrame) => {\n        this._serverHeadersBehaviourSubject$.next(frame.headers);\n\n        // Indicate our connected state to observers\n        this._changeState(RxStompState.OPEN);\n      },\n      onStompError: (frame: IFrame) => {\n        // Trigger the frame subject\n        this.stompErrors$.next(frame);\n      },\n      onWebSocketClose: () => {\n        this._changeState(RxStompState.CLOSED);\n      },\n      onUnhandledMessage: (message: IMessage) => {\n        this.unhandledMessage$.next(message);\n      },\n      onUnhandledReceipt: (frame: IFrame) => {\n        this.unhandledReceipts$.next(frame);\n      },\n      onUnhandledFrame: (frame: IFrame) => {\n        this.unhandledFrame$.next(frame);\n      },\n      onWebSocketError: (evt: Event) => {\n        this.webSocketErrors$.next(evt);\n      }\n    });\n\n    // Attempt connection\n    this._stompClient.activate();\n  }\n\n  /**\n   * Disconnect if connected and stop auto reconnect loop.\n   * Appropriate callbacks will be invoked if underlying STOMP connection was connected.\n   *\n   * To reactivate you can call [RxStomp#activate]{@link RxStomp#activate}.\n   *\n   * Maps to: [Client#deactivate]{@link Client#deactivate}\n   */\n  public deactivate(): void {\n    // Disconnect if connected. Callback will set CLOSED state\n    this._stompClient.deactivate();\n\n    const stompState = this.connectionState$.getValue();\n    if (stompState === RxStompState.OPEN) {\n      // Notify observers that we are disconnecting!\n      this._changeState(RxStompState.CLOSING);\n    }\n    // This is bit tricky situation, it would be better handled at stompjs level\n    if (stompState === RxStompState.CONNECTING) {\n      // Notify observers that we are disconnecting!\n      this._changeState(RxStompState.CLOSED);\n    }\n  }\n\n  /**\n   * It will return `true` if STOMP broker is connected and `false` otherwise.\n   */\n  public connected(): boolean {\n    return this.connectionState$.getValue() === RxStompState.OPEN;\n  }\n\n  /**\n   * If the client is active (connected or going to reconnect).\n   *\n   *  Maps to: [Client#active]{@link Client#active}\n   */\n  get active(): boolean {\n    return this.stompClient.active;\n  }\n\n  /**\n   * Send a message to a named destination. Refer to your STOMP broker documentation for types\n   * and naming of destinations.\n   *\n   * STOMP protocol specifies and suggests some headers and also allows broker specific headers.\n   *\n   * `body` must be String.\n   * You will need to covert the payload to string in case it is not string (e.g. JSON).\n   *\n   * To send a binary message body use binaryBody parameter. It should be a\n   * [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\n   * Sometimes brokers may not support binary frames out of the box.\n   * Please check your broker documentation.\n   *\n   * `content-length` header is automatically added to the STOMP Frame sent to the broker.\n   * Set `skipContentLengthHeader` to indicate that `content-length` header should not be added.\n   * For binary messages `content-length` header is always added.\n   *\n   * Caution: The broker will, most likely, report an error and disconnect if message body has NULL octet(s)\n   * and `content-length` header is missing.\n   *\n   * The message will get locally queued if the STOMP broker is not connected. It will attempt to\n   * publish queued messages as soon as the broker gets connected.\n   * If you do not want that behavior,\n   * please set [retryIfDisconnected]{@link IRxStompPublishParams#retryIfDisconnected} to `false`\n   * in the parameters.\n   * When `false`, this function will raise an error if message could not be sent immediately.\n   *\n   * Maps to: [Client#publish]{@link Client#publish}\n   *\n   * See: {@link IRxStompPublishParams} and {@link IPublishParams}\n   *\n   * ```javascript\n   *        rxStomp.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\n   *\n   *        // Only destination is mandatory parameter\n   *        rxStomp.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\n   *\n   *        // Skip content-length header in the frame to the broker\n   *        rxStomp.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\n   *\n   *        var binaryData = generateBinaryData(); // This need to be of type Uint8Array\n   *        // setting content-type header is not mandatory, however a good practice\n   *        rxStomp.publish({destination: '/topic/special', binaryBody: binaryData,\n   *                         headers: {'content-type': 'application/octet-stream'}});\n   * ```\n   */\n  public publish(parameters: IRxStompPublishParams): void {\n    // retry behaviour is defaulted to true\n    const shouldRetry = parameters.retryIfDisconnected == null\n      ? true\n      : parameters.retryIfDisconnected;\n\n    if (this.connected()) {\n      this._stompClient.publish(parameters);\n    } else if (shouldRetry) {\n      this._debug(`Not connected, queueing`);\n      this._queuedMessages.push(parameters);\n    } else {\n      throw new Error('Cannot publish while broker is not connected');\n    }\n  }\n\n  /** It will send queued messages. */\n  protected _sendQueuedMessages(): void {\n    const queuedMessages = this._queuedMessages;\n    this._queuedMessages = [];\n\n    if (queuedMessages.length === 0) {\n      return;\n    }\n\n    this._debug(`Will try sending  ${queuedMessages.length} queued message(s)`);\n\n    for (const queuedMessage of queuedMessages) {\n      this._debug(`Attempting to send ${queuedMessage}`);\n      this.publish(queuedMessage);\n    }\n  }\n\n  /**\n   * It will subscribe to server message queues\n   *\n   * This method can be safely called even if the STOMP broker is not connected.\n   * If the underlying STOMP connection drops and reconnects, it will resubscribe automatically.\n   *\n   * Note that messages might be missed during reconnect. This issue is not specific\n   * to this library but the way STOMP brokers are designed to work.\n   *\n   * This method in the underlying library is called `subscribe`.\n   * In earlier version it was called `subscribe` here as well.\n   * However `subscribe` is also used by RxJS and code read quite strange with two subscribe calls\n   * following each other and both meaning very different things.\n   *\n   * Maps to: [Client#subscribe]{@link Client#subscribe}\n   */\n  public watch(destination: string, headers: StompHeaders = {}): Observable<IMessage> {\n\n    /* Well the logic is complicated but works beautifully. RxJS is indeed wonderful.\n     *\n     * We need to activate the underlying subscription immediately if Stomp is connected. If not it should\n     * subscribe when it gets next connected. Further it should re establish the subscription whenever Stomp\n     * successfully reconnects.\n     *\n     * Actual implementation is simple, we filter the BehaviourSubject 'state' so that we can trigger whenever Stomp is\n     * connected. Since 'state' is a BehaviourSubject, if Stomp is already connected, it will immediately trigger.\n     *\n     * The observable that we return to caller remains same across all reconnects, so no special handling needed at\n     * the message subscriber.\n     */\n    this._debug(`Request to subscribe ${destination}`);\n\n    // By default auto acknowledgement of messages\n    if (!headers.ack) {\n      headers.ack = 'auto';\n    }\n\n    const coldObservable = Observable.create(\n      (messages: Observer<IMessage>) => {\n        /*\n         * These variables will be used as part of the closure and work their magic during unsubscribe\n         */\n        let stompSubscription: StompSubscription;\n\n        let stompConnectedSubscription: Subscription;\n\n        stompConnectedSubscription = this._connectedPre$.subscribe(() => {\n          this._debug(`Will subscribe to ${destination}`);\n          stompSubscription = this._stompClient.subscribe(destination, (message: IMessage) => {\n              messages.next(message);\n            },\n            headers);\n        });\n\n        return () => { /* cleanup function, will be called when no subscribers are left */\n          this._debug(`Stop watching connection state (for ${destination})`);\n          stompConnectedSubscription.unsubscribe();\n\n          if (this.connected()) {\n            this._debug(`Will unsubscribe from ${destination} at Stomp`);\n            stompSubscription.unsubscribe();\n          } else {\n            this._debug(`Stomp not connected, no need to unsubscribe from ${destination} at Stomp`);\n          }\n        };\n      });\n\n    /**\n     * Important - convert it to hot Observable - otherwise, if the user code subscribes\n     * to this observable twice, it will subscribe twice to Stomp broker. (This was happening in the current example).\n     * A long but good explanatory article at https://medium.com/@benlesh/hot-vs-cold-observables-f8094ed53339\n     */\n    return coldObservable.pipe(share());\n  }\n\n  /**\n   * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\n   * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\n   * The value (say receipt-id) for this header needs to be unique for each use. Typically a sequence, a UUID, a\n   * random number or a combination may be used.\n   *\n   * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\n   * The operation needs to be matched based in the value of the receipt-id.\n   *\n   * This method allow watching for a receipt and invoke the callback\n   * when corresponding receipt has been received.\n   *\n   * The actual {@link Frame}\n   * will be passed as parameter to the callback.\n   *\n   * Example:\n   * ```javascript\n   *        // Publishing with acknowledgement\n   *        let receiptId = randomText();\n   *\n   *        rxStomp.watchForReceipt(receiptId, function() {\n   *          // Will be called after server acknowledges\n   *        });\n   *        rxStomp.publish({destination: '/topic/special', headers: {receipt: receiptId}, body: msg});\n   * ```\n   *\n   * Maps to: [Client#watchForReceipt]{@link Client#watchForReceipt}\n   */\n  public watchForReceipt(receiptId: string, callback: (frame: IFrame) => void): void {\n    this._stompClient.watchForReceipt(receiptId, callback);\n  }\n\n  protected _changeState(state: RxStompState): void {\n    this._connectionStatePre$.next(state);\n    this.connectionState$.next(state);\n  }\n\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__stomp_stompjs__;","module.exports = __WEBPACK_EXTERNAL_MODULE_rxjs__;","module.exports = __WEBPACK_EXTERNAL_MODULE_rxjs_operators__;"],"sourceRoot":""}