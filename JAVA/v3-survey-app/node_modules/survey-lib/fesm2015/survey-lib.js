import { CommonModule } from '@angular/common';
import { FormControl, FormGroup, Validators, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { StoreModule } from '@ngrx/store';
import { EventEmitter, Injectable, Component, Input, Output, Directive, ElementRef, Pipe, ViewEncapsulation, CUSTOM_ELEMENTS_SCHEMA, NgModule, NO_ERRORS_SCHEMA, defineInjectable } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/survey-lib.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SurveyLibService {
    constructor() {
        this.enableSubmit = false;
        this.defaultThankYouPage = false;
        this.isEmbededInDesigner = false;
        this.questionAnsweredEventEmitter = new EventEmitter();
        this.isQuestionCardCampaign = false;
        this.currentElementEventEmitter = new EventEmitter();
        this.currentElement = new CurrentElement();
        this.currentElement.currentPageIndex = 0;
        this.currentElement.currentQuestionIndex = 0;
    }
    /**
     * @param {?} selectedThemeModel
     * @return {?}
     */
    initializeSurveyTheme(selectedThemeModel) {
        selectedThemeModel.font = {
            name: 'Muli',
            url: 'https://fonts.googleapis.com/css?family=Muli&display=swap'
        };
        console.log(selectedThemeModel);
        /** @type {?} */
        let link = document.createElement('link');
        link.type = "text/css";
        link.rel = "stylesheet";
        link.href = selectedThemeModel.font.url;
        document.head.appendChild(link);
        console.log(document.head);
        document.documentElement.style.setProperty('--font-family', selectedThemeModel.font.name.toString() + ',sans-serif');
        document.documentElement.style.setProperty('--bg-color', selectedThemeModel.colors.backgroundColor);
        document.documentElement.style.setProperty('--primary-color', selectedThemeModel.colors.primaryColor);
        document.documentElement.style.setProperty('--primary-color-dark', selectedThemeModel.colors.primaryColorDark);
        document.documentElement.style.setProperty('--footer-bg-color', selectedThemeModel.colors.footerBackgroundColor);
        document.documentElement.style.setProperty('--footer-primary-color', selectedThemeModel.colors.footerPrimaryColor);
        document.documentElement.style.setProperty('--footer-secondary-color', selectedThemeModel.colors.footerSecondaryColor);
        document.documentElement.style.setProperty('--text-color-primary', selectedThemeModel.colors.textColorPrimary);
        document.documentElement.style.setProperty('--text-color-secondary', selectedThemeModel.colors.textColorSecondary);
        document.documentElement.style.setProperty('--primary-button-text-color', selectedThemeModel.colors.primaryButtonTextColor);
        // document.documentElement.style.setProperty('--organisation-logo', selectedThemeModel.organisationLogo);
    }
}
SurveyLibService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
SurveyLibService.ctorParameters = () => [];
/** @nocollapse */ SurveyLibService.ngInjectableDef = defineInjectable({ factory: function SurveyLibService_Factory() { return new SurveyLibService(); }, token: SurveyLibService, providedIn: "root" });
class CurrentElement {
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/pages.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PagesModel {
    /**
     * @return {?}
     */
    get testMode() {
        return this._testMode;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set testMode(value) {
        this._testMode = value;
    }
    /**
     * @return {?}
     */
    get id() {
        return this._id;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set id(value) {
        this._id = value;
    }
    /**
     * @return {?}
     */
    get userId() {
        return this._userId;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set userId(value) {
        this._userId = value;
    }
    /**
     * @return {?}
     */
    get themeId() {
        return this._themeId;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set themeId(value) {
        this._themeId = value;
    }
    /**
     * @return {?}
     */
    get logoUrl() {
        return this._logoUrl;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set logoUrl(value) {
        this._logoUrl = value;
    }
    /**
     * @return {?}
     */
    get surveyContent() {
        return this._surveyContent;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set surveyContent(value) {
        this._surveyContent = value;
    }
}
class SurveyContent {
    /**
     * @return {?}
     */
    get name() {
        return this._name;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set name(value) {
        this._name = value;
    }
    /**
     * @return {?}
     */
    get description() {
        return this._description;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set description(value) {
        this._description = value;
    }
    /**
     * @return {?}
     */
    get pages() {
        return this._pages;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set pages(value) {
        this._pages = value;
    }
}
class SelectedThemeModel {
}
class Font {
}
class Colors {
}
class Page {
    /**
     * @return {?}
     */
    get pageName() {
        return this._pageName;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set pageName(value) {
        this._pageName = value;
    }
    /**
     * @return {?}
     */
    get properties() {
        return this._properties;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set properties(value) {
        this._properties = value;
    }
    /**
     * @return {?}
     */
    get questions() {
        return this._questions;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set questions(value) {
        this._questions = value;
    }
}
class Question {
}
class Others {
}
class LogicJumps {
}
class Block {
}
class Condition {
}
class RankingItem {
}
class ContactForm {
}
class Validation {
}
class Column {
}
class Picture {
    /**
     * @return {?}
     */
    get id() {
        return this._id;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set id(value) {
        this._id = value;
    }
    /**
     * @return {?}
     */
    get picture() {
        return this._picture;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set picture(value) {
        this._picture = value;
    }
}
class AddressForm {
    /**
     * @return {?}
     */
    get text() {
        return this._text;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set text(value) {
        this._text = value;
    }
    /**
     * @return {?}
     */
    get required() {
        return this._required;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set required(value) {
        this._required = value;
    }
}
class Row {
    /**
     * @return {?}
     */
    get id() {
        return this._id;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set id(value) {
        this._id = value;
    }
    /**
     * @return {?}
     */
    get text() {
        return this._text;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set text(value) {
        this._text = value;
    }
}
class Attributes {
}
class Selection {
}
class Step {
}
class Choice {
}
class Properties {
    /**
     * @return {?}
     */
    get buttonText() {
        return this._buttonText;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set buttonText(value) {
        this._buttonText = value;
    }
    /**
     * @return {?}
     */
    get subHeadingValue() {
        return this._subHeadingValue;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set subHeadingValue(value) {
        this._subHeadingValue = value;
    }
    /**
     * @return {?}
     */
    get headingValue() {
        return this._headingValue;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set headingValue(value) {
        this._headingValue = value;
    }
    /**
     * @return {?}
     */
    get backgroundImage() {
        return this._backgroundImage;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set backgroundImage(value) {
        this._backgroundImage = value;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/survey-response.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SurveyResponseModel {
}
class SurveyResponses {
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/shared/pages-services/pages.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PagesService {
    constructor() {
        this.previousQuestion = new EventEmitter();
        this.nextQuestion = new EventEmitter();
        this.nextPageEvent = new EventEmitter();
        this.surveyResponses = [];
        this.sequenceOfQuestionTraversed = [];
    }
    /**
     * @param {?} response
     * @return {?}
     */
    persistSurvey(response) {
        /** @type {?} */
        let index = this.surveyResponses.findIndex((/**
         * @param {?} surveyResponse
         * @return {?}
         */
        surveyResponse => surveyResponse.identifier === response.identifier));
        if (index !== -1) {
            this.surveyResponses[index] = response;
        }
        else {
            this.surveyResponses.push(response);
        }
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    removeResponsesOfExcludedQuestionIds(payload) {
        return this.surveyResponses.filter((/**
         * @param {?} response
         * @return {?}
         */
        response => payload.find((/**
         * @param {?} questionId
         * @return {?}
         */
        questionId => questionId == response.questionId))));
    }
    /**
     * @param {?} identifier
     * @return {?}
     */
    getResponse(identifier) {
        console.log(this.surveyResponses);
        /** @type {?} */
        let index = this.surveyResponses.findIndex((/**
         * @param {?} res
         * @return {?}
         */
        res => res.identifier == identifier));
        if (index > -1) {
            return this.surveyResponses[index];
        }
        else {
            return new SurveyResponses();
        }
    }
}
PagesService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PagesService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/survey-lib.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SurveyLibComponent {
    /**
     * @param {?} surveyLibraryService
     * @param {?} pageService
     */
    constructor(surveyLibraryService, pageService) {
        this.surveyLibraryService = surveyLibraryService;
        this.pageService = pageService;
        this.surveyResponseEmitter = new EventEmitter();
        this.isQuestionCardCampaign = false;
        this.responseFromQuestionCardCampaign = undefined;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.isQuestionCardCampaign) {
            console.log('Inside question card campaign!');
            if (this.surveyContent.pages[0].pageName === 'Welcome page') {
                this.surveyContent.pages.splice(0, 1);
            }
            this.storeResponseFromQuestionCardCampaign();
            this.surveyLibraryService.isQuestionCardCampaign = true;
        }
        this.surveyLibraryService.initializeSurveyTheme(this.surveyContent.selectedTheme);
    }
    /**
     * @param {?} surveyResponse
     * @return {?}
     */
    emitResponse(surveyResponse) {
        this.surveyResponseEmitter.emit(surveyResponse);
    }
    /**
     * @return {?}
     */
    storeResponseFromQuestionCardCampaign() {
        /** @type {?} */
        let question = this.surveyContent.pages[0].questions[0];
        /** @type {?} */
        let surveyResponse = new SurveyResponses();
        surveyResponse.question = question.question;
        surveyResponse.questionType = question.questionType;
        surveyResponse.identifier = question.identifier;
        surveyResponse.questionId = question.questionId;
        switch (question.questionType) {
            case 'Nps':
            case 'Rating':
                surveyResponse.rating = this.responseFromQuestionCardCampaign;
                this.pageService.persistSurvey(surveyResponse);
                break;
            case 'Yes / No':
                surveyResponse.answer = this.responseFromQuestionCardCampaign;
                this.pageService.persistSurvey(surveyResponse);
                break;
            case 'Statement':
                surveyResponse.answer = this.responseFromQuestionCardCampaign;
                this.pageService.persistSurvey(surveyResponse);
                break;
            case 'Date':
                surveyResponse.answer = this.responseFromQuestionCardCampaign;
                this.pageService.persistSurvey(surveyResponse);
                break;
            default:
                break;
        }
    }
}
SurveyLibComponent.decorators = [
    { type: Component, args: [{
                selector: 'omoto-survey-lib',
                template: `
    <app-pages [surveyContent]="surveyContent"
               (surveyResponseEmitter)="emitResponse($event)"
               [isTestMode]="testMode"
               [surveyTheme]="theme"></app-pages>
  `
            }] }
];
/** @nocollapse */
SurveyLibComponent.ctorParameters = () => [
    { type: SurveyLibService },
    { type: PagesService }
];
SurveyLibComponent.propDecorators = {
    surveyResponseEmitter: [{ type: Output }],
    surveyContent: [{ type: Input }],
    testMode: [{ type: Input }],
    theme: [{ type: Input }],
    currentPageIndex: [{ type: Input }],
    currentQuestionIndex: [{ type: Input }],
    isQuestionCardCampaign: [{ type: Input }],
    responseFromQuestionCardCampaign: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/shared/persistence.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PersistenceService {
    /**
     * @param {?} key
     * @param {?} data
     * @return {?}
     */
    static set(key, data) {
        try {
            localStorage.setItem(key, JSON.stringify(data));
        }
        catch (e) {
            console.error('Error saving to localStorage', e);
        }
    }
    /**
     * @param {?} key
     * @return {?}
     */
    static get(key) {
        try {
            return JSON.parse(localStorage.getItem(key));
        }
        catch (e) {
            console.error('Error getting data from localStorage', e);
            return null;
        }
    }
}
PersistenceService.decorators = [
    { type: Injectable }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/pages.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PagesComponent {
    /**
     * @param {?} pagesService
     * @param {?} surveyLibServices
     */
    constructor(pagesService, surveyLibServices) {
        this.pagesService = pagesService;
        this.surveyLibServices = surveyLibServices;
        /*@Input()
          public pagesModel: PagesModel;*/
        this.surveyResponseEmitter = new EventEmitter();
        this.WELCOME_PAGE = 'Welcome page';
        this.QUESTIONNAIRE_PAGE = 'Questionnaire page';
        this.THANK_YOU_PAGE = 'Thank you page';
    }
    /**
     * @return {?}
     */
    nextPage() {
        console.log('inside nextPage Pages.component');
        this.animateExitNext(this.WELCOME_PAGE);
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.pagesService.stage = 'entry-next';
            this.surveyLibServices.currentElement.currentPageIndex = this.surveyLibServices.currentElement.currentPageIndex + 1;
            this.surveyLibServices.currentElementEventEmitter.emit(this.surveyLibServices.currentElement);
        }), 400);
    }
    /**
     * @return {?}
     */
    previousPage() {
        this.surveyLibServices.currentElement.currentPageIndex = this.surveyLibServices.currentElement.currentPageIndex - 1;
        this.surveyLibServices.currentElementEventEmitter.emit(this.surveyLibServices.currentElement);
    }
    /**
     * @return {?}
     */
    submitSurvey() {
        console.log('In submit survey');
        if (this.surveyLibServices.currentElement.currentPageIndex != this.surveyContent.pages.length - 1) {
            this.surveyLibServices.currentElement.currentPageIndex++;
        }
        else {
            this.surveyLibServices.defaultThankYouPage = true;
        }
        console.log(JSON.stringify(this.pagesService.surveyResponses));
        this.surveyResponseEmitter.emit(this.pagesService.surveyResponses);
        /* console.log(response);
         this.surveyLibServices.currentElement.currentPageIndex = this.surveyLibServices.currentElement.currentPageIndex + 1;
         this.surveyResponseModel.surveyResponses = response;*/
        /*this.submitSurveySubscription = this.pagesService.submitSurvey(this.surveyResponseModel)
          .subscribe(response => console.log(response), error => console.log(error));*/
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setThemeForSurvey();
        this.surveyResponseModel = new SurveyResponseModel();
        this.surveyLibServices.currentElementEventEmitter.emit(this.surveyLibServices.currentElement);
        this.fontUrl = this.surveyContent.selectedTheme.font.url;
    }
    /**
     * @private
     * @return {?}
     */
    setThemeForSurvey() {
        /*//this.cssUrl = '/assets/'+this.theme+'.css';
        this.cssUrl = '/assets/theme4.css';
        let element;
        element = document.createElement('link');
        element.rel = 'stylesheet';
        element.type = 'text/css';
        element.href = this.cssUrl;
        document.getElementsByTagName('head')[0].appendChild(element);*/
    }
    /**
     * @return {?}
     */
    previousQuestion() {
        this.pagesService.previousQuestion.emit();
    }
    /**
     * @return {?}
     */
    nextQuestion() {
        this.pagesService.nextQuestion.emit();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.getSurveySubscription != null && !this.getSurveySubscription.closed) {
            this.getSurveySubscription.unsubscribe();
        }
        if (this.submitSurveySubscription != null && !this.submitSurveySubscription.closed) {
            this.submitSurveySubscription.unsubscribe();
        }
    }
    /**
     * @param {?} questionIndex
     * @return {?}
     */
    goTo(questionIndex) {
        this.nextQuestion();
        /** @type {?} */
        let number = this.surveyLibServices.currentElement.currentQuestionIndex - questionIndex;
        console.log(number);
        console.log('Clicked question index: ' + questionIndex);
    }
    /**
     * @private
     * @param {?} questionType
     * @return {?}
     */
    animateExitNext(questionType) {
        console.log("inside animateExitNext");
        console.log(questionType);
        if (questionType == 'Welcome page') {
            console.log("inside if statement in animateExitNext method");
            console.log(document.getElementById('welcome-page').className);
            document.getElementById('welcome-page').classList.remove('entry-next');
            console.log(document.getElementById('welcome-page').className);
            document.getElementById('welcome-page').className = 'exit-next';
            document.getElementById('welcome-page-delay').className = 'exit-next-delay';
            console.log(document.getElementById('welcome-page').className);
        }
    }
}
PagesComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-pages',
                template: "<!--<link rel=\"stylesheet\" [href]='sanitizer.bypassSecurityTrustResourceUrl(cssUrl)'>-->\n<!--<div *ngIf=\"testMode\">\n  <span class=\"badge-test-mode\">Test mode</span>\n</div>-->\n\n<!--<button (click)=\"currentState()\">Current State</button>-->\n\n<div class=\"survey-container\">\n\n  <div class=\"survey-container-wrap\" *ngIf=\"!surveyLibServices.defaultThankYouPage\">\n    <img class=\"org-logo\" [src]=\"surveyContent.organizationLogo\" [ngStyle]=\"{'visibility' : surveyContent.organizationLogo == undefined ? 'hidden' :'visible'}\"\n      alt=\"\">\n    <app-welcome-page  [welcomePage]=\"surveyContent.pages[surveyLibServices.currentElement.currentPageIndex]\" *ngIf=\"surveyContent.pages[surveyLibServices.currentElement.currentPageIndex].pageName == WELCOME_PAGE\"\n      (nextPageEvent)=\"nextPage()\">\n    </app-welcome-page>\n\n    <app-questionnaire\n      (submitResponse)=\"submitSurvey()\"\n      [questionnairePage]=\"surveyContent.pages[surveyLibServices.currentElement.currentPageIndex]\"\n      *ngIf=\"surveyContent.pages[surveyLibServices.currentElement.currentPageIndex].pageName == QUESTIONNAIRE_PAGE\"\n      (previousPageEvent)=\"previousPage()\"></app-questionnaire>\n\n    <app-thank-you-page\n      [thankYouPage]=\"surveyContent\n      .pages[surveyLibServices.currentElement.currentPageIndex]\"\n      *ngIf=\"surveyContent.pages[surveyLibServices.currentElement.currentPageIndex]\n      .pageName == THANK_YOU_PAGE\">\n    </app-thank-you-page>\n<!--\n    <button class=\"btn-primary\" *ngIf=\"surveyLibServices.enableSubmit\" (click)=\"submitSurvey()\">Submit</button>\n-->\n  </div>\n  <app-default-thank-you-page\n    *ngIf=\"surveyLibServices.defaultThankYouPage\">\n  </app-default-thank-you-page>\n\n  <footer class=\"footer\">\n\n    <div class=\"footer-container\">\n\n      <div class=\"footer-left\" *ngIf=\"surveyContent.pages[surveyLibServices.currentElement.currentPageIndex].pageName == QUESTIONNAIRE_PAGE\">\n        <div class=\"progress-container\">\n         <p><span id=\"step-number\">0</span>/{{(surveyContent.pages[surveyLibServices.currentElement.currentPageIndex].questions.length)}} answered</p>\n          <div class=\"progress-bar\">\n            <progress id=\"progress\" [value]=\"pagesService.surveyResponses !== undefined ? pagesService.surveyResponses.length : 0\" [max]=\"surveyContent.pages[surveyLibServices.currentElement.currentPageIndex].questions.length\"></progress>\n          </div>\n        </div>\n      <div class=\"arrowUp-arrowDown-container\">\n        <button class=\"arrowUp-arrowDown-btn\"\n                [disabled]=\"surveyLibServices.isQuestionCardCampaign && pagesService.sequenceOfQuestionTraversed.length < 3\"\n                (click)=\"previousQuestion()\">\n          <span class=\"arrowDown\"></span>\n        </button>\n          <button class=\"arrowUp-arrowDown-btn\"\n                  (click)=\"nextQuestion()\">\n            <span class=\"arrowUp\"></span>\n        </button>\n        <!--<button class=\"btn up-dwn\" (click)=\"previousQuestion()\">&#11165;</button>-->\n        <!--<button class=\"btn up-dwn\" (click)=\"nextQuestion()\">&#11167;</button>-->\n      </div>\n\n      </div>\n\n      <div class=\"footer-right\">\n        <img [src]=\"'https://cdn.omoto.io/powered-by-omoto-60-x-30@2x.png'\" alt=\"powered by Omoto\">\n      </div>\n    </div>\n\n  </footer>\n\n\n\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [":root{--white-25:rgba(255, 255, 255, 0.25);--font-family:'Ubuntu',sans-serif;--bg-color:#f4a06e;--primary-color:#004e89;--primary-color-dark:#001B56;--footer-bg-color:#f9cfb6;--footer-primary-color:#b98f76;--footer-secondary-color:#fce7da;--text-color-primary:#ffffff;--text-color-secondary:#4a4a4a;--primary-button-text-color:#fffff;--positiveTranslate:translateX(350px);--negativeTranslate:translateX(-350px);--negativeTranslate3D:translate3d(-350px,0,0)}*,:after,:before{box-sizing:inherit}body,html{margin:0;padding:0;height:100%;width:100%;box-sizing:border-box;transition:none!important}.entry-next{-webkit-animation:.6s cubic-bezier(.215,.61,.355,1) both animMoveRightToCurrent;animation:.6s cubic-bezier(.215,.61,.355,1) both animMoveRightToCurrent}.entry-next-delay{-webkit-animation:.6s cubic-bezier(.215,.61,.355,1) .1s both animMoveRightToCurrent;animation:.6s cubic-bezier(.215,.61,.355,1) .1s both animMoveRightToCurrent}@-webkit-keyframes animMoveRightToCurrent{from{opacity:0;-webkit-transform:var(--positiveTranslate)}to{opacity:1;-webkit-transform:translateY(0)}}@keyframes animMoveRightToCurrent{from{opacity:0;-webkit-transform:var(--positiveTranslate)}to{opacity:1;-webkit-transform:translateY(0)}}.exit-next{-webkit-animation:.6s cubic-bezier(.215,.61,.355,1) forwards animMoveCurrentToLeft;animation:.6s cubic-bezier(.215,.61,.355,1) forwards animMoveCurrentToLeft}.exit-next-delay{-webkit-animation:.6s cubic-bezier(.215,.61,.355,1) .1s forwards animMoveCurrentToLeft;animation:.6s cubic-bezier(.215,.61,.355,1) .1s forwards animMoveCurrentToLeft}@-webkit-keyframes animMoveCurrentToLeft{to{opacity:0;-webkit-transform:var(--negativeTranslate3D)}}@keyframes animMoveCurrentToLeft{to{opacity:0;-webkit-transform:var(--negativeTranslate3D);transform:var(--negativeTranslate3D)}}.entry-previous{-webkit-animation:.6s cubic-bezier(.215,.61,.355,1) both animMoveLeftToCurrent;animation:.6s cubic-bezier(.215,.61,.355,1) .1s both animMoveLeftToCurrent}.entry-previous-delay{-webkit-animation:.6s cubic-bezier(.215,.61,.355,1) .1s both animMoveLeftToCurrent;animation:.6s cubic-bezier(.215,.61,.355,1) .1s both animMoveLeftToCurrent}@-webkit-keyframes animMoveLeftToCurrent{from{opacity:0;-webkit-transform:var(--negativeTranslate)}to{opacity:1;-webkit-transform:translateY(0)}}@keyframes animMoveLeftToCurrent{from{opacity:0;-webkit-transform:var(--negativeTranslate);transform:var(--negativeTranslate)}to{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}}.exit-previous{-webkit-animation:.6s cubic-bezier(.215,.61,.355,1) .1s forwards animMoveCurrentToRight;animation:.6s cubic-bezier(.215,.61,.355,1) .1s forwards animMoveCurrentToRight}.exit-previous-delay{-webkit-animation:.6s cubic-bezier(.215,.61,.355,1) forwards animMoveCurrentToRight;animation:.6s cubic-bezier(.215,.61,.355,1) forwards animMoveCurrentToRight}@-webkit-keyframes animMoveCurrentToRight{from{opacity:1;-webkit-transform:translateY(0)}to{opacity:0;-webkit-transform:var(--positiveTranslate)}}@keyframes animMoveCurrentToRight{from{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}to{opacity:0;-webkit-transform:var(--positiveTranslate);transform:var(--positiveTranslate)}}.input{border-radius:3px;padding:5px 0 5px 10px;color:var(--text-color-secondary);background-color:var(--white-25);font-size:.875rem;position:relative;box-shadow:1px 1px 3px 0 rgba(0,0,0,.5);height:31px}.select{cursor:pointer;position:relative;width:250px}.select .input:after,.select .input:before{content:'';position:absolute;left:calc(100% - 20px);-webkit-transform:translateY(-50%);transform:translateY(-50%);width:0;height:0}.select .input:before{border-top:5px solid var(--text-color-secondary);border-left:5px solid transparent;border-right:5px solid transparent;top:50%}.select .input:after{border-top:5px solid var(--white-25);border-left:5px solid transparent;border-right:5px solid transparent;top:calc(50% - 1px)}.select-options{position:absolute;width:100%;border-radius:4px;z-index:100;top:104%;left:0;display:none;overflow:hidden;box-shadow:1px 1px 3px 0 rgba(0,0,0,.5)}.select-options.visible{display:block;background-color:var(--white-25);z-index:1}.select-options ul{list-style:none;padding:0;margin:0}.select-options ul li{padding:5px 0 5px 10px;border-bottom:1px solid #ddd;font-size:.875rem;color:var(--text-color-secondary);background-color:var(--white-25);position:relative;overflow:hidden}.select-options ul li:hover{background-color:var(--primary-color);color:var(--text-color-primary)}.select-options ul li:last-child{border-bottom:0}.select-options ul li.selected{color:var(--text-color-primary);background-color:var(--primary-color);padding:5px 5px 5px 35px}.select-options ul li.selected:before{content:'';width:5px;height:10px;color:#000;border:2px solid var(--text-color-primary);border-right:0;border-bottom:0;right:calc(100% - 20px);top:50%;-webkit-transform:translateY(-50%) rotate(-135deg);transform:translateY(-50%) rotate(-135deg);position:absolute}.survey-container{font-weight:400;font-style:normal;font-stretch:normal;letter-spacing:normal;font-family:var(--font-family);line-height:1.5;background-color:var(--bg-color);height:calc(100vh - 80px);width:100%;overflow-y:auto;overflow-x:hidden;margin:0;padding:0}.survey-container-wrap{margin-left:auto;margin-right:auto;margin-bottom:10px;padding-top:8.18em;max-width:46.125em;color:var(--primary-color)}.skip-this-question{color:var(--text-color-secondary);cursor:pointer;font-size:.85em;clear:both}.skip-this-question-marginLeft{margin-left:2%}.skip-this-question:hover{color:var(--primary-color)}.question-description{margin-top:5px;font-size:14px}.footer{height:80px;position:absolute;bottom:0;width:100%;font-family:var(--font-family);background-color:var(--footer-bg-color)}.footer-container{position:absolute;bottom:0;left:50%;max-width:46.125em;width:46.125em;margin-left:-23.0625em}.footer-right{padding:15px 0;float:right}.footer-right img{width:81px}.footer-left{float:left;margin:10px 0 0}.progress-container{width:16.25em;display:inline-block}.progress-container p{margin:0;line-height:normal;font-size:.875rem;color:var(--footer-primary-color)}.progress-bar{width:100%;display:inline-block}.arrowUp-arrowDown-container{display:inline-block;margin:0 0 0 1em}.arrowUp-arrowDown-btn{width:25px;height:25px;background-color:var(--footer-bg-color);border-radius:3px;margin:0 10px 0 0;border:1px solid var(--footer-primary-color);cursor:pointer;padding:0}.arrowUp-arrowDown-btn:active{background:var(--footer-primary-color);outline:var(--footer-primary-color);color:var(--footer-secondary-color)}.arrowUp-arrowDown-btn:active span{border:solid var(--footer-secondary-color);border-width:0 2px 2px 0}.arrowUp-arrowDown-btn:focus{outline:var(--footer-primary-color)}.arrowUp-arrowDown-container span{border:solid var(--footer-primary-color);border-width:0 2px 2px 0;display:inline-block;padding:3px}.arrowUp{transform:rotate(-45deg);-webkit-transform:rotate(-45deg);margin-right:3px}.arrowDown{transform:rotate(135deg);-webkit-transform:rotate(135deg);margin-left:3px}progress{width:100%;border:1px solid var(--footer-primary-color);border-radius:14px}progress::-moz-progress-bar{border-radius:14px;background:var(--footer-primary-color);transition:.5s ease-out}progress::-webkit-progress-bar{border-radius:14px;background:var(--footer-secondary-color)}progress::-webkit-progress-value{border-radius:14px;background:var(--footer-primary-color);transition:.5s ease-out}.org-logo{display:block;max-width:250px;max-height:70px;min-height:50px}.welcome-thankyou-heading{font-size:1.75em;margin:2rem 0 0;font-weight:700}.welcome-thankyou-text{margin:0!important}.survey-statement{font-size:1.31em;font-weight:500;margin:2rem 0 0}.blink-btn-animation{-webkit-animation:.25s 2 blinkAnimation;animation:.25s 2 blinkAnimation}@-webkit-keyframes blinkAnimation{50%{opacity:.3}}@keyframes blinkAnimation{50%{opacity:.3}}.btn-primary{margin:1.56em 0 0;border-radius:4px;text-align:center;background-color:var(--primary-color);border:1px solid var(--primary-color);font-size:1rem;min-width:7.31em;min-height:2.5em;color:var(--primary-button-text-color);font-family:var(--font-family);cursor:pointer}.btn-primary:focus{background-color:var(--primary-color-dark);border:1px solid var(--primary-color-dark);outline:0}.btn-primary:hover{box-shadow:0 11px 22px -6px rgba(0,0,0,.5)}.btn-primary:active{background-color:var(--primary-color-dark)}.btn-secondary{border-radius:4px;margin:10px 10px 0 0;cursor:pointer;color:var(--text-color-secondary);border:1px solid var(--white-25);background-color:var(--white-25);font-family:var(--font-family);font-size:1rem;box-shadow:1px 1px 3px 0 rgba(0,0,0,.5);transition:.3s}.btn-secondary:hover{box-shadow:0 0 3px 0 var(--primary-color);border:solid 1px var(--primary-color)}.btn-secondary:focus{background-color:var(--primary-color);color:var(--text-color-primary);border:var(--primary-color);outline:0;box-shadow:none}.btn-secondary:active{background-color:var(--primary-color);box-shadow:1px 1px 5px 1px rgba(0,0,0,.5);outline:0}.btn-focused-state{background-color:var(--primary-color);color:var(--text-color-primary);border:var(--primary-color);outline:0;box-shadow:none}.checkmark{display:inline-block;-webkit-transform:rotate(45deg);transform:rotate(45deg);height:16px;width:9px;border-bottom:3px solid var(--text-color-secondary);border-right:3px solid var(--text-color-secondary)}.checkmark-checked{border-bottom:3px solid var(--text-color-primary);border-right:3px solid var(--text-color-primary)}.crossmark{position:relative;display:inline-block;margin-bottom:7px;margin-right:25px}.crossmark:after{position:absolute;content:'';display:block;width:18px;height:0;border:solid var(--text-color-secondary);border-width:0 0 3px;-webkit-transform:rotate(45deg);transform:rotate(45deg);left:0;top:0}.crossmark:before{position:absolute;content:'';display:block;width:18px;height:0;border:solid var(--text-color-secondary);border-width:0 0 3px;-webkit-transform:rotate(-45deg);transform:rotate(-45deg);left:0;top:0}.crossmark-checked:after,.crossmark-checked:before{border:solid var(--text-color-primary);border-width:0 0 3px}.nps-btn-group{display:flex;justify-content:space-between;width:75%;margin:7px 0 0}.nps-btn{width:40px;height:40px;font-size:1.5em;line-height:1.19;margin:0}.nps-btn-focus{background-color:var(--primary-color);color:var(--text-color-primary);border:var(--primary-color);outline:0;box-shadow:none}.nps-legend{margin:5px 0 0;font-size:.75em;color:var(--text-color-secondary);position:relative;width:75%}#left-nps-label{position:absolute;width:8%;left:0}#center-nps-label{position:absolute;width:8%;left:47.5%}#right-nps-label{position:absolute;width:8%;right:0;text-align:end}.multiple-choice{width:320px;min-height:32px;margin:7px 0 0;padding:5px 0 0 7px;font-size:.875em;display:block;border-radius:4px;border:1px solid var(--white-25);box-shadow:1px 1px 3px 0 rgba(0,0,0,.5);color:var(--text-color-secondary);transition:.3s;background-color:var(--white-25);cursor:pointer}.multiple-choice-checkbox{display:none}.multiple-choice-checkbox:checked+span{background-color:var(--primary-color);color:var(--text-color-primary);border:none;box-shadow:none}.survey-input-textarea{width:95%;min-height:5em;max-height:21em;font-size:.875rem;color:var(--text-color-secondary);margin:7px 0 0;padding:6px 0 0 5px;display:block;background-color:var(--white-25);border:var(--white-25);resize:vertical;font-family:var(--font-family)}.survey-input-textarea:active,.survey-input-textarea:focus{outline:1px solid var(--primary-color)}.survey-input-text-box{width:100%;height:32px;margin:7px 0 0;padding:0 0 0 5px;font-size:.875rem;color:var(--text-color-secondary);background-color:var(--white-25);border:var(--white-25);font-family:var(--font-family)}.survey-input-text-box:active,.survey-input-text-box:focus{outline:1px solid var(--primary-color)}.yes-no-btn{width:71px;height:32px;padding:0}.thumbs-btn{width:40px;height:32px;padding:3px 0 0}.rating{direction:rtl;display:block;margin:7px 0 0;float:left}.rating input[type=radio]{display:none}.rating label{width:32px;height:32px;display:inline-block;cursor:pointer;margin:0 7px 0 0;position:relative}.ratingFillIcon,.ratingOutlineIcon{fill:var(--primary-color);position:absolute}.ratingFillIcon{display:none}.rating input[type=radio]:checked~label>div>.ratingFillIcon,.rating label:hover .ratingFillIcon,.rating label:hover~label .ratingFillIcon{fill:var(--primary-color);display:block}.rating input[type=radio]:checked~label>div>.ratingFillIcon{-webkit-animation:.25s 2 blinkAnimation;animation:.25s 2 blinkAnimation}.drop-down{margin:7px 0 0;width:100%;height:32px;font-size:.75em;line-height:1.5;color:var(--text-color-secondary);padding:7px 0 7px 12px;border:1px solid var(--white-25);border-radius:4px;background-color:var(--white-25);cursor:pointer}.drop-down:hover .dropdown-content{display:block}.drop-down:focus{outline:1px solid var(--primary-color)}.agree-disagree-btn{min-width:115px;height:32px}.matrix{display:flex;justify-content:center;align-items:center}.matrix-left{display:inline-block}.matrix-left p{font-size:1.2em;line-height:1.43;color:var(--p-font-color);margin:12px 0 0}.matrix-right{margin:20px 0 0 20px;padding:0 0 10px}.matrix-star-rating{float:none}.matrix-star-rating label{width:25px;height:25px;margin:0}.matrix-star-rating input[type=radio]:checked~label>img,.matrix-star-rating label:hover,.matrix-star-rating label:hover~label{background:url(https://cdn.omoto.io/star-fill.png) no-repeat}.matrix-drop-down{width:157px;height:32px}.isRequired{color:red;margin-right:3px}.validation-error-msg{color:red;font-size:.75em}@media (min-width:481px) and (max-width:767px){.survey-container{height:100%}.survey-container-wrap{padding:20px 20px 10px;background-color:var(--bg-color);height:calc(100% - 59px);overflow-x:hidden;overflow-y:auto}.survey-statement{font-size:1.125em}.multiple-choice{width:100%;max-width:320px}.footer{height:59px;position:fixed}.footer-container{padding:0 20px;position:initial;max-width:initial;width:initial;margin:0}.footer-right img{width:60px;height:30px}.progress-container{width:10em}.footer-left{margin:5px 0 0}.btn-primary{margin:20px 0 0}.nps-btn-group{margin-top:7px;width:85%}.nps-legend{width:85%}.nps-btn{width:35px;height:35px;font-size:1.06em;line-height:2.2;margin:0;padding:0}.matrix{margin:0 auto}.matrix-left p{width:138px;height:20px;font-size:.875em}.matrix-right{padding:4px 0 0}}@media (min-width:320px) and (max-width:375px){.survey-container{height:100%}.org-logo{width:100%;height:auto}.survey-container-wrap{margin:0;padding:20px 20px 10px;height:calc(100vh - 59px);background-color:var(--bg-color);overflow-y:auto;overflow-x:hidden}.welcome-thankyou-heading{margin:1rem 0 0}.survey-statement{font-size:14px;margin:1rem 0 0}.multiple-choice{width:100%;max-width:320px;height:28px;padding:4px 0 0 7px;font-size:12px}.footer{height:59px;position:fixed}.footer-container{padding:0 20px;position:initial;max-width:initial;width:initial;margin:0}.footer-right img{width:60px;height:30px}.footer-left{margin:5px 0 0}.progress-container{width:8.3em}.btn-primary{margin:16px 0 0;font-size:14px}.nps-btn-group{margin-top:7px;width:100%}.nps-btn{width:25px;height:25px;font-size:1.06em;line-height:1.06;margin:0 3px 0 0;padding:0}#right-nps-label,.nps-legend{width:100%}.ratingIconAbove6{width:25px!important;margin:0 3px 0 0!important}.ratingIconAbove6 .ratingFillIcon,.ratingIconAbove6 .ratingOutlineIcon{width:25px}.matrix{margin:0 auto}.matrix-left p{width:138px;height:20px;font-size:.875em}.matrix-right{padding:4px 0 0}}@media (min-width:375px) and (max-width:480px){.survey-container{height:100%}.org-logo{width:100%;height:auto}.survey-container-wrap{margin:0;padding:20px 20px 10px;height:calc(100vh - 59px);background-color:var(--bg-color);overflow-y:auto;overflow-x:hidden}.survey-statement{font-size:1.125em}.multiple-choice{width:100%;max-width:320px}.footer{height:59px;position:fixed}.footer-container{padding:0 20px;position:initial;max-width:initial;width:initial;margin:0}.footer-right img{width:60px;height:30px}.footer-left{margin:5px 0 0}.progress-container{width:8.3em}.btn-primary{margin:20px 0 0}.nps-btn-group{margin-top:7px;width:100%}.nps-btn{width:25px;height:25px;font-size:1.06em;line-height:1.06;margin:0;padding:0}#right-nps-label,.nps-legend{width:100%}.ratingIconAbove6{width:25px!important;margin:0 3px 0 0!important}.ratingIconAbove6 .ratingFillIcon,.ratingIconAbove6 .ratingOutlineIcon{width:25px}.matrix{margin:0 auto}.matrix-left p{width:138px;height:20px;font-size:.875em}.matrix-right{padding:4px 0 0}}#error_snackbar{visibility:hidden;width:250px;margin-left:-125px;background-color:rgba(0,0,0,.55);color:#fff;text-align:center;border-radius:2px;padding:16px;position:absolute;z-index:1;left:50%;bottom:10%;font-size:1em}#error_snackbar.show{visibility:visible;-webkit-animation:.5s fadein,.5s 2.5s fadeout;animation:.5s fadein,.5s 2.5s fadeout}@-webkit-keyframes fadein{from{bottom:0;opacity:0}to{bottom:10%;opacity:1}}@keyframes fadein{from{bottom:0;opacity:0}to{bottom:10%;opacity:1}}@-webkit-keyframes fadeout{from{bottom:10%;opacity:1}to{bottom:0;opacity:0}}@keyframes fadeout{from{bottom:10%;opacity:1}to{bottom:0;opacity:0}}@media screen and (-webkit-min-device-pixel-ratio:0){progress{height:10px}input,select,textarea{font-size:16px}}"]
            }] }
];
/** @nocollapse */
PagesComponent.ctorParameters = () => [
    { type: PagesService },
    { type: SurveyLibService }
];
PagesComponent.propDecorators = {
    surveyResponseEmitter: [{ type: Output }],
    surveyContent: [{ type: Input }],
    isTestMode: [{ type: Input }],
    surveyTheme: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/welcome-page/welcome-page.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WelcomePageComponent {
    /**
     * @param {?} pageService
     */
    constructor(pageService) {
        this.pageService = pageService;
        this.nextPageEvent = pageService.nextPageEvent;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.pageService.stage != 'entry-next') {
            document.getElementById("welcome-page").className = 'entry-next';
            document.getElementById("welcome-page-delay").className = 'entry-next-delay';
        }
        else {
            document.getElementById("welcome-page").className = 'entry-previous-delay';
            document.getElementById("welcome-page-delay").className = 'entry-previous';
        }
    }
    /**
     * @return {?}
     */
    nextPage() {
        //this.pageService.store.dispatch(new Reset());
        document.getElementById("btn-primary").classList.add('blink-btn-animation');
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.nextPageEvent.emit();
        }), 350);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
}
WelcomePageComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-welcome-page',
                template: "<div id=\"welcome-page\">\n  <div class=\"welcome-thankyou-heading\">{{welcomePage.properties.headingValue}}</div>\n  <div class=\"survey-statement welcome-thankyou-text\"> {{ welcomePage.properties.subHeadingValue }} </div>\n</div>\n\n<div id=\"welcome-page-delay\" >\n<button class=\"btn-primary\" id=\"btn-primary\"  (click)=\"nextPage()\">{{ welcomePage.properties.buttonText}}</button>\n</div>\n\n\n\n",
                styles: [""]
            }] }
];
/** @nocollapse */
WelcomePageComponent.ctorParameters = () => [
    { type: PagesService }
];
WelcomePageComponent.propDecorators = {
    welcomePage: [{ type: Input }],
    nextPageEvent: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/questionnaire/expression-builder.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ExpressionBuilder {
    constructor() {
        this.IS_EQUALS_TO = 'Is equals to';
        this.IS_NOT_EQUALS_TO = 'Is not equals to';
        this.IS_LESS_THAN = 'Is less than';
        this.IS_GREATER_THAN = 'Is greater than';
        this.IS_LESS_THAN_OR_EQUALS_TO = 'Is less than or equals to';
        this.IS_GREATER_THAN_OR_EQUALS_TO = 'Is grater than or equals to';
        this.IS = 'Is';
        this.IS_NOT = 'Is not';
        this.IS_ON = "Is on";
        this.IS_NOT_ON = "Is not on";
        this.IS_BEFORE = "Is before";
        this.IS_AFTER = "Is after";
        this.IS_BEFORE_OR_ON = "Is before or on";
        this.IS_AFTER_OR_ON = "Is after or on";
        this.IS_BETWEEN = "Is between";
        this.IS_BEGINS_WITH = "Is begins with";
        this.IS_ENDS_WITH = "Is ends with";
        this.CONTAINS = "Contains";
        this.DOES_NOT_CONTAINS = "Does not contains";
    }
    /**
     * @param {?} conditions
     * @param {?} responses
     * @param {?} questionType
     * @return {?}
     */
    build(conditions, responses, questionType) {
        /** @type {?} */
        let expression = '';
        switch (questionType) {
            case 'Drop down':
            case 'Choice':
                for (let condition of conditions) {
                    /** @type {?} */
                    let result = this.evaluateChoiceConditions(condition, responses[responses.findIndex((/**
                     * @param {?} res
                     * @return {?}
                     */
                    res => res.questionId == condition._if))]);
                    if (condition.relationWithNextCondition != undefined)
                        expression += result + ' ' + condition.relationWithNextCondition + ' ';
                    else
                        expression += result + ' ';
                }
                break;
            case 'Yes No':
                for (let condition of conditions) {
                    /** @type {?} */
                    let result = this.evaluateYesNoConditions(condition, responses[responses.findIndex((/**
                     * @param {?} res
                     * @return {?}
                     */
                    res => res.questionId == condition._if))]);
                    if (condition.relationWithNextCondition != undefined)
                        expression += result + ' ' + condition.relationWithNextCondition + ' ';
                    else
                        expression += result + ' ';
                }
                break;
            case 'Rating':
                for (let i = 0; i < conditions.length; i++) {
                    /** @type {?} */
                    let result = this.evaluateRatingConditions(conditions[i], responses[responses.findIndex((/**
                     * @param {?} res
                     * @return {?}
                     */
                    res => res.questionId == conditions[i]._if))]);
                    console.warn(result);
                    if ((i + 1) < conditions.length) {
                        expression += result + ' ' + conditions[i].relationWithNextCondition + ' ';
                    }
                    else {
                        expression += result + ' ';
                    }
                }
                break;
            case 'Nps':
                for (let i = 0; i < conditions.length; i++) {
                    /** @type {?} */
                    let result = this.evaluateNPSConditions(conditions[i], responses[responses.findIndex((/**
                     * @param {?} res
                     * @return {?}
                     */
                    res => res.questionId == conditions[i]._if))]);
                    console.warn(result);
                    if ((i + 1) < conditions.length) {
                        expression += result + ' ' + conditions[i].relationWithNextCondition + ' ';
                    }
                    else {
                        expression += result + ' ';
                    }
                }
                break;
            case 'Date':
                for (let condition of conditions) {
                    /** @type {?} */
                    let result = this.evaluateDateConditions(condition, responses[responses.findIndex((/**
                     * @param {?} res
                     * @return {?}
                     */
                    res => res.questionId == condition._if))]);
                    if (condition.relationWithNextCondition != undefined) {
                        expression += result + ' ' + condition.relationWithNextCondition + ' ';
                    }
                    else {
                        expression += result + ' ';
                    }
                }
                break;
            case 'Short text':
                for (let condition of conditions) {
                    /** @type {?} */
                    let result = this.evaluateTextConditions(condition, responses[responses.findIndex((/**
                     * @param {?} res
                     * @return {?}
                     */
                    res => res.questionId == condition._if))]);
                    if (condition.relationWithNextCondition != undefined) {
                        expression += result + ' ' + condition.relationWithNextCondition + ' ';
                    }
                    else {
                        expression += result + ' ';
                    }
                }
                break;
            default:
                break;
        }
        return expression;
    }
    /**
     * @private
     * @param {?} condition
     * @param {?} currentResponse
     * @return {?}
     */
    evaluateChoiceConditions(condition, currentResponse) {
        return condition.condition == this.IS ?
            currentResponse.choices.some((/**
             * @param {?} choice
             * @return {?}
             */
            choice => choice.choiceId == condition._this)) :
            !currentResponse.choices.some((/**
             * @param {?} choice
             * @return {?}
             */
            choice => choice.choiceId == condition._this));
    }
    /**
     * @private
     * @param {?} condition
     * @param {?} response
     * @return {?}
     */
    evaluateRatingConditions(condition, response) {
        console.warn(response);
        switch (condition.condition) {
            case this.IS_EQUALS_TO:
                return (response.rating == condition._this);
            case this.IS_NOT_EQUALS_TO:
                return (response.rating != condition._this);
            case this.IS_LESS_THAN:
                return (response.rating < condition._this);
            case this.IS_GREATER_THAN:
                return (response.rating > condition._this);
            case this.IS_LESS_THAN_OR_EQUALS_TO:
                return (response.rating <= condition._this);
            case this.IS_GREATER_THAN_OR_EQUALS_TO:
                return (response.rating >= condition._this);
            default:
                return false;
        }
    }
    /**
     * @private
     * @param {?} condition
     * @param {?} response
     * @return {?}
     */
    evaluateNPSConditions(condition, response) {
        console.warn(response);
        switch (condition.condition) {
            case this.IS:
                return RegExp(condition._this).test(response.rating + '');
            case this.IS_NOT:
                return !RegExp(condition._this).test(response.rating + '');
            default:
                return false;
        }
    }
    /**
     * @private
     * @param {?} condition
     * @param {?} currentResponse
     * @return {?}
     */
    evaluateYesNoConditions(condition, currentResponse) {
        return condition.condition == this.IS ?
            currentResponse.answer == condition._this :
            !currentResponse.answer == condition._this;
    }
    /**
     * @private
     * @param {?} condition
     * @param {?} currentResponse
     * @return {?}
     */
    evaluateDateConditions(condition, currentResponse) {
        /** @type {?} */
        let thisDate = new Date(condition._this);
        /** @type {?} */
        let responseDate = new Date(currentResponse.answer);
        switch (condition.condition) {
            case this.IS_ON:
                return responseDate == thisDate;
            case this.IS_NOT_ON:
                return responseDate != thisDate;
            case this.IS_BEFORE:
                return responseDate < thisDate;
            case this.IS_AFTER:
                return responseDate > thisDate;
            case this.IS_BEFORE_OR_ON:
                return responseDate <= thisDate;
            case this.IS_AFTER_OR_ON:
                return responseDate >= thisDate;
            //todo Expression for date between range.
            case this.IS_BETWEEN:
                return true;
            default:
                return false;
        }
    }
    /**
     * @private
     * @param {?} condition
     * @param {?} currentResponse
     * @return {?}
     */
    evaluateTextConditions(condition, currentResponse) {
        switch (condition.condition) {
            case this.IS_EQUALS_TO:
                return currentResponse.answer == condition._this;
            case this.IS_BEGINS_WITH:
                return currentResponse.answer.startsWith(condition._this);
            case this.IS_ENDS_WITH:
                return currentResponse.answer.endsWith(condition._this);
            case this.CONTAINS:
                return currentResponse.answer.includes(condition._this);
            case this.DOES_NOT_CONTAINS:
                return !currentResponse.answer.includes(condition._this);
            default:
                return false;
        }
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/questionnaire/mandatory-question-validation.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MandatoryQuestionValidation {
    constructor() {
    }
    /**
     * @param {?} questionType
     * @param {?} response
     * @return {?}
     */
    isQuestionAnswered(questionType, response) {
        console.log('Inside isQuestionAnswered!');
        console.log('Question type: ' + questionType);
        if (response == undefined)
            return false;
        switch (questionType) {
            case 'Address':
                return this.isAddressFormAnswered(response);
            case 'Choice':
                return this.isChoiceQuestionAnswered(response);
            case 'Contact form':
                return this.isContactFormAnswered(response);
            case 'Date':
                return this.isDateQuestionAnswered(response);
            case 'Drop Down':
                return this.isDropDownQuestionAnswered(response);
            case 'Email':
                return this.isEmailQuestionAnswered(response);
            case 'Short text':
            case 'Long text':
                return this.isTextQuestionAnswered(response);
            case 'Nps':
            case 'Rating':
                return this.isRatingQuestionAnswered(response);
            case 'Statement':
                return this.isStatementQuestionAnswered(response);
            case 'Yes No':
            case 'Legal':
                return this.isYesNoQuestionAnswered(response);
            default: return false;
        }
    }
    /**
     * @private
     * @param {?} response
     * @return {?}
     */
    isAddressFormAnswered(response) {
        return false;
    }
    /**
     * @private
     * @param {?} response
     * @return {?}
     */
    isContactFormAnswered(response) {
        return false;
    }
    /**
     * @private
     * @param {?} response
     * @return {?}
     */
    isChoiceQuestionAnswered(response) {
        return response.choices != undefined && response.choices.length > 0;
    }
    /**
     * @private
     * @param {?} response
     * @return {?}
     */
    isDateQuestionAnswered(response) {
        return response.answer != undefined && response.answer.length > 0;
    }
    /**
     * @private
     * @param {?} response
     * @return {?}
     */
    isDropDownQuestionAnswered(response) {
        return response.answerId != undefined;
    }
    /**
     * @private
     * @param {?} response
     * @return {?}
     */
    isEmailQuestionAnswered(response) {
        return response.answer != undefined && response.answer.length > 0;
    }
    /**
     * @private
     * @param {?} response
     * @return {?}
     */
    isTextQuestionAnswered(response) {
        return response.answer != undefined && response.answer.length > 0;
    }
    /**
     * @private
     * @param {?} response
     * @return {?}
     */
    isRatingQuestionAnswered(response) {
        return response.rating != undefined && response.rating > -1;
    }
    /**
     * @private
     * @param {?} response
     * @return {?}
     */
    isStatementQuestionAnswered(response) {
        return false;
    }
    /**
     * @private
     * @param {?} response
     * @return {?}
     */
    isYesNoQuestionAnswered(response) {
        return response.answer != undefined && response.answer.length > 0;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/questionnaire/questionnaire.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class QuestionnaireComponent {
    /**
     * @param {?} pagesService
     * @param {?} surveyLibService
     */
    constructor(pagesService, surveyLibService) {
        this.pagesService = pagesService;
        this.surveyLibService = surveyLibService;
        this.previousPageEvent = new EventEmitter();
        this.submitResponse = new EventEmitter();
        this.mandatoryQuestion = new MandatoryQuestionValidation();
        this.expressionBuilder = new ExpressionBuilder();
        this.isMandatoryQuestionAnswered = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        console.log(this.questionnairePage.questions.length);
        console.log(this.surveyLibService.currentElement.currentQuestionIndex);
        if (this.surveyLibService.isQuestionCardCampaign) {
            this.nextQuestion(true);
        }
        this.pagesService.stage = 'entry-next';
        this.pagesService.sequenceOfQuestionTraversed.push(this.surveyLibService.currentElement.currentQuestionIndex);
        this.previousQuestionSubscription = this.pagesService.previousQuestion.subscribe((/**
         * @return {?}
         */
        () => this.previousQuestion()));
        this.nextQuestionSubscription = this.pagesService.nextQuestion.subscribe((/**
         * @return {?}
         */
        () => this.nextQuestion()));
    }
    /**
     * @param {?=} skipAnimation
     * @return {?}
     */
    nextQuestion(skipAnimation = false) {
        console.log("nextQuestion");
        if (this.questionnairePage.questions[this.surveyLibService.currentElement.currentQuestionIndex].attributes.required) {
            if (this.mandatoryQuestion.isQuestionAnswered(this.questionnairePage
                .questions[this.surveyLibService.currentElement.currentQuestionIndex].questionType, this.pagesService.getResponse(this.questionnairePage.questions[this.surveyLibService
                .currentElement.currentQuestionIndex].identifier))) {
                this.jump(skipAnimation);
                this.isMandatoryQuestionAnswered = true;
            }
            else {
                this.isMandatoryQuestionAnswered = false;
                this.showErrorMessage();
            }
        }
        else
            this.jump(skipAnimation);
        console.log(this.surveyLibService.currentElement);
        this.surveyLibService.currentElementEventEmitter.emit(this.surveyLibService.currentElement);
        this.updateProgressBar();
    }
    /**
     * @return {?}
     */
    previousQuestion() {
        console.log(this.pagesService.sequenceOfQuestionTraversed);
        if (!this.surveyLibService.isEmbededInDesigner) {
            if (this.pagesService.sequenceOfQuestionTraversed.length > 1) {
                this.animatePreviousExit(this.questionnairePage.questions[this.surveyLibService.currentElement.currentQuestionIndex].questionType);
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    /** @type {?} */
                    let previousQuestionIndex = this.pagesService.sequenceOfQuestionTraversed[this.pagesService.sequenceOfQuestionTraversed.length - 2];
                    this.pagesService.sequenceOfQuestionTraversed = this.pagesService.sequenceOfQuestionTraversed.filter((/**
                     * @param {?} sequence
                     * @return {?}
                     */
                    sequence => sequence < this.surveyLibService.currentElement.currentQuestionIndex));
                    this.surveyLibService.currentElement.currentQuestionIndex = previousQuestionIndex;
                    this.updateProgressBar();
                    this.pagesService.stage = 'entry-previous';
                }), 400);
            }
            else {
                //this.resetResponse();
                this.previousPageEvent.emit();
            }
        }
        else {
            if (this.surveyLibService.currentElement.currentQuestionIndex > 0) {
                this.updateProgressBar();
                this.surveyLibService.currentElement.currentQuestionIndex--;
            }
            else {
                if (this.surveyLibService.currentElement.currentPageIndex > 0) {
                    this.previousPageEvent.emit();
                }
            }
        }
        this.surveyLibService.currentElementEventEmitter.emit(this.surveyLibService.currentElement);
    }
    /**
     * @private
     * @param {?} skipAnimation
     * @return {?}
     */
    jump(skipAnimation) {
        this.animateExitNext(this.questionnairePage.questions[this.surveyLibService.currentElement.currentQuestionIndex].questionType);
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.questionnairePage.questions[this.surveyLibService.currentElement.currentQuestionIndex].logicJumps != undefined && this.questionnairePage.questions[this.surveyLibService.currentElement.currentQuestionIndex].logicJumps.blocks.length > 0)
                this.logicJump();
            else
                this.defaultJump();
            this.pagesService.stage = 'entry-next';
        }), skipAnimation ? 0 : 400);
    }
    /**
     * @private
     * @return {?}
     */
    logicJump() {
        console.log('Inside logicJump: ' + this.surveyLibService.currentElement.currentQuestionIndex);
        /** @type {?} */
        let logicJump = false;
        for (let block of this.questionnairePage.questions[this.surveyLibService.currentElement.currentQuestionIndex].logicJumps.blocks) {
            console.warn(this.pagesService.surveyResponses);
            if (eval(this.expressionBuilder.build(block.conditions, this.pagesService.surveyResponses, this.questionnairePage.questions[this.surveyLibService.currentElement.currentQuestionIndex].questionType))) {
                /** @type {?} */
                let jumpIndex = this.questionnairePage.questions.findIndex((/**
                 * @param {?} question
                 * @return {?}
                 */
                question => question.questionId == block.thatIndex));
                if (QuestionnaireComponent.isBackwardJump(this.surveyLibService.currentElement.currentQuestionIndex, jumpIndex)) {
                    this.backwardJump(jumpIndex);
                }
                else {
                    this.forwardJump(jumpIndex);
                }
                logicJump = true;
                break;
            }
        }
        if (!logicJump) {
            this.defaultJump();
            /*this.surveyLibService.currentElement.currentQuestionIndex = this.questionnairePage.questions.findIndex(question => question.questionId == this.questionnairePage.questions[this.surveyLibService.currentElement.currentQuestionIndex].logicJumps.defaultJump);
            this.questionnairePage.questions[this.surveyLibService.currentElement.currentQuestionIndex] = this.questionnairePage.questions[this.surveyLibService.currentElement.currentQuestionIndex];
            this.pagesService.sequenceOfQuestionTraversed.push(this.surveyLibService.currentElement.currentQuestionIndex);*/
        }
    }
    /**
     * @private
     * @return {?}
     */
    defaultJump() {
        if (this.surveyLibService.currentElement.currentQuestionIndex < this.questionnairePage.questions.length - 1) {
            this.surveyLibService.currentElement.currentQuestionIndex++;
            this.questionnairePage.questions[this.surveyLibService.currentElement.currentQuestionIndex] = this.questionnairePage.questions[this.surveyLibService.currentElement.currentQuestionIndex];
            this.pagesService.sequenceOfQuestionTraversed.push(this.surveyLibService.currentElement.currentQuestionIndex);
            console.log('Inside default jump: ' + this.surveyLibService.currentElement.currentQuestionIndex);
            this.surveyLibService.enableSubmit = false;
        }
        else {
            this.surveyLibService.enableSubmit = true;
            this.submitResponse.emit();
        }
    }
    /**
     * @private
     * @param {?} currentQuestionIndex
     * @param {?} jumpIndex
     * @return {?}
     */
    static isBackwardJump(currentQuestionIndex, jumpIndex) {
        return jumpIndex < currentQuestionIndex;
    }
    /**
     * @private
     * @param {?} jumpIndex
     * @return {?}
     */
    backwardJump(jumpIndex) {
        console.log('Inside backwardJump: ' + this.surveyLibService.currentElement.currentQuestionIndex);
        this.surveyLibService.currentElement.currentQuestionIndex = jumpIndex;
        this.questionnairePage.questions[this.surveyLibService.currentElement.currentQuestionIndex] = this.questionnairePage.questions[this.surveyLibService.currentElement.currentQuestionIndex];
        this.pagesService.sequenceOfQuestionTraversed = this.pagesService.sequenceOfQuestionTraversed.filter((/**
         * @param {?} sequence
         * @return {?}
         */
        sequence => sequence <= jumpIndex));
        this.removeResponses(this.pagesService.sequenceOfQuestionTraversed);
    }
    /**
     * @private
     * @param {?} jumpIndex
     * @return {?}
     */
    forwardJump(jumpIndex) {
        console.log('Inside forwardJump: ' + this.surveyLibService.currentElement.currentQuestionIndex);
        this.surveyLibService.currentElement.currentQuestionIndex = jumpIndex;
        this.questionnairePage.questions[this.surveyLibService.currentElement.currentQuestionIndex] = this.questionnairePage.questions[this.surveyLibService.currentElement.currentQuestionIndex];
        this.pagesService.sequenceOfQuestionTraversed.push(this.surveyLibService.currentElement.currentQuestionIndex);
    }
    /**
     * @private
     * @param {?} questionIndexes
     * @return {?}
     */
    removeResponses(questionIndexes) {
        /** @type {?} */
        let excludeQuestionIds = [];
        for (let index of questionIndexes) {
            excludeQuestionIds.push(this.questionnairePage.questions[index].questionId);
        }
        this.pagesService.removeResponsesOfExcludedQuestionIds(excludeQuestionIds);
    }
    /**
     * @private
     * @return {?}
     */
    updateProgressBar() {
        document.getElementById('step-number').innerText = this.pagesService.surveyResponses.length.toString();
        //document.getElementById('progress').setAttribute('value', this.pagesService.response.length.toString());
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.previousQuestionSubscription.unsubscribe();
        this.nextQuestionSubscription.unsubscribe();
    }
    /**
     * @private
     * @return {?}
     */
    showErrorMessage() {
        /** @type {?} */
        let x = document.getElementById("error_snackbar");
        document.getElementById('message').innerText = this.questionnairePage
            .questions[this.surveyLibService.currentElement.currentQuestionIndex].attributes
            .requiredErrorMessage;
        x.className = "show";
        setTimeout((/**
         * @return {?}
         */
        () => { x.className = x.className.replace("show", ""); }), 3000);
    }
    /**
     * @private
     * @param {?} questionType
     * @return {?}
     */
    animateExitNext(questionType) {
        console.log(questionType);
        /** @type {?} */
        let elementById = null;
        switch (questionType) {
            case 'Nps':
                elementById = document.getElementById('nps-question');
                if (elementById !== null) {
                    document.getElementById('nps-question').className = 'exit-next';
                    document.getElementById('nps-question-delay').className = 'exit-next-delay';
                }
                break;
            case 'Choice':
                elementById = document.getElementById('choice-question');
                if (elementById !== null) {
                    document.getElementById('choice-question').className = 'exit-next';
                    document.getElementById('choice-question-delay').className = 'exit-next-delay';
                }
                break;
            case 'Rating':
                elementById = document.getElementById('rating-question');
                if (elementById !== null) {
                    document.getElementById('rating-question').className = 'exit-next';
                    document.getElementById('rating-question-delay').className = 'exit-next-delay';
                }
                break;
            case 'Drop down':
                elementById = document.getElementById('drop-down-question');
                if (elementById !== null) {
                    document.getElementById('drop-down-question').className = 'exit-next';
                    document.getElementById('drop-down-question-delay').className = 'exit-next-delay';
                }
                break;
            case 'Yes / No':
                elementById = document.getElementById('yes-no-question');
                if (elementById !== null) {
                    document.getElementById('yes-no-question').className = 'exit-next';
                    document.getElementById('yes-no-question-delay').className = 'exit-next-delay';
                }
                break;
            case 'Short text':
                elementById = document.getElementById('short-question');
                if (elementById !== null) {
                    document.getElementById('short-question').className = 'exit-next';
                    document.getElementById('short-question-delay').className = 'exit-next-delay';
                }
                break;
            case 'Long text':
                elementById = document.getElementById('long-question');
                if (elementById !== null) {
                    document.getElementById('long-question').className = 'exit-next';
                    document.getElementById('long-question-delay').className = 'exit-next-delay';
                }
                break;
            case 'Statement':
                elementById = document.getElementById('statement-question');
                if (elementById !== null) {
                    document.getElementById('statement-question').className = 'exit-next';
                    document.getElementById('statement-question-delay').className = 'exit-next-delay';
                }
                break;
            case 'Email':
                elementById = document.getElementById('email-question');
                if (elementById !== null) {
                    document.getElementById('email-question').className = 'exit-next';
                    document.getElementById('email-question-delay').className = 'exit-next-delay';
                }
                break;
            case 'Phone number':
                elementById = document.getElementById('phone-question');
                if (elementById !== null) {
                    document.getElementById('phone-question').className = 'exit-next';
                    document.getElementById('phone-question-delay').className = 'exit-next-delay';
                }
                break;
            case 'Number':
                elementById = document.getElementById('number-question');
                if (elementById !== null) {
                    document.getElementById('number-question').className = 'exit-next';
                    document.getElementById('number-question-delay').className = 'exit-next-delay';
                }
                break;
            case 'Name':
                elementById = document.getElementById('name-question');
                if (elementById !== null) {
                    document.getElementById('name-question').className = 'exit-next';
                    document.getElementById('name-question-delay').className = 'exit-next-delay';
                }
                break;
            case 'Website':
                elementById = document.getElementById('website-question');
                if (elementById !== null) {
                    document.getElementById('website-question').className = 'exit-next';
                    document.getElementById('website-question-delay').className = 'exit-next-delay';
                }
                break;
            case 'Legal':
                elementById = document.getElementById('agree-disagree-question');
                if (elementById !== null) {
                    document.getElementById('agree-disagree-question').className = 'exit-next';
                    document.getElementById('agree-disagree-question-delay').className = 'exit-next-delay';
                }
                break;
            case 'Date':
                elementById = document.getElementById('date-question');
                if (elementById !== null) {
                    document.getElementById('date-question').className = 'exit-next';
                    document.getElementById('date-question-delay').className = 'exit-next-delay';
                }
                break;
        }
    }
    /**
     * @private
     * @param {?} questionType
     * @return {?}
     */
    animatePreviousExit(questionType) {
        switch (questionType) {
            case 'Nps':
                document.getElementById('nps-question').className = 'exit-previous-delay';
                document.getElementById('nps-question-delay').className = 'exit-previous';
                break;
            case 'Choice':
                document.getElementById('choice-question').className = 'exit-previous-delay';
                document.getElementById('choice-question-delay').className = 'exit-previous';
                break;
            case 'Rating':
                document.getElementById('rating-question').className = 'exit-previous-delay';
                document.getElementById('rating-question-delay').className = 'exit-previous';
                break;
            case 'Drop down':
                document.getElementById('drop-down-question').className = 'exit-previous-delay';
                document.getElementById('drop-down-question-delay').className = 'exit-previous';
                break;
            case 'Yes / No':
                document.getElementById('yes-no-question').className = 'exit-previous-delay';
                document.getElementById('yes-no-question-delay').className = 'exit-previous';
                break;
            case 'Short text':
                document.getElementById('short-question').className = 'exit-previous-delay';
                document.getElementById('short-question-delay').className = 'exit-previous';
                break;
            case 'Long text':
                document.getElementById('long-question').className = 'exit-previous-delay';
                document.getElementById('long-question-delay').className = 'exit-previous';
                break;
            case 'Statement':
                document.getElementById('statement-question').className = 'exit-previous-delay';
                document.getElementById('statement-question-delay').className = 'exit-previous';
                break;
            case 'Email':
                document.getElementById('email-question').className = 'exit-previous-delay';
                document.getElementById('email-question-delay').className = 'exit-previous';
                break;
            case 'Phone number':
                document.getElementById('phone-question').className = 'exit-previous-delay';
                document.getElementById('phone-question-delay').className = 'exit-previous';
                break;
            case 'Number':
                document.getElementById('number-question').className = 'exit-previous-delay';
                document.getElementById('number-question-delay').className = 'exit-previous';
                break;
            case 'Name':
                document.getElementById('name-question').className = 'exit-previous-delay';
                document.getElementById('name-question-delay').className = 'exit-previous';
                break;
            case 'Website':
                document.getElementById('website-question').className = 'exit-previous-delay';
                document.getElementById('website-question-delay').className = 'exit-previous';
                break;
            case 'Legal':
                document.getElementById('agree-disagree-question').className = 'exit-previous-delay';
                document.getElementById('agree-disagree-question-delay').className = 'exit-previous';
                break;
            case 'Date':
                document.getElementById('date-question').className = 'exit-previous-delay';
                document.getElementById('date-question-delay').className = 'exit-previous';
                break;
        }
    }
}
QuestionnaireComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-questionnaire',
                template: "<app-choice\n  [isLastQuestion]=\"(questionnairePage.questions.length -1) === this.surveyLibService.currentElement.currentQuestionIndex \"\n\n  [choiceQuestion]=\"questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex]\"\n            *ngIf=\"questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex].questionType == 'Choice'\"\n            [isMultipleChoice]=\"questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex].attributes.multipleChoice\"\n            [surveyResponse]=\"pagesService.getResponse(questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex].identifier)\"\n            (submitEvent)=\"nextQuestion()\">\n</app-choice>\n\n<app-nps\n  *ngIf=\"questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex].questionType == 'Nps'\"\n  [npsQuestion]=\"questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex]\"\n  [surveyResponse]=\"pagesService.getResponse(questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex].identifier)\"\n  (submitEvent)=\"nextQuestion()\">\n</app-nps>\n\n<app-yes-no\n  [yesNoQuestion]=\"questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex]\"\n  [surveyResponse]=\"pagesService.getResponse(questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex].identifier)\"\n  *ngIf=\"questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex].questionType == 'Yes / No'\"\n  (submitEvent)=\"nextQuestion()\">\n</app-yes-no>\n\n<app-rating\n  *ngIf=\"questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex].questionType == 'Rating'\"\n  [surveyResponse]=\"pagesService.getResponse(questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex].identifier)\"\n  [ratingQuestion]=\"questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex]\"\n  (submitEvent)=\"nextQuestion()\">\n</app-rating>\n\n\n<app-drop-down\n  [surveyResponse]=\"pagesService.getResponse(questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex].identifier)\"\n  *ngIf=\"questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex].questionType == 'Drop down'\"\n  [dropDown]=\"questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex]\"\n  (submitEvent)=\"nextQuestion()\">\n</app-drop-down>\n\n\n<app-short-text\n  [isLastQuestion]=\"(questionnairePage.questions.length -1) === this.surveyLibService.currentElement.currentQuestionIndex \"\n\n  [surveyResponse]=\"pagesService.getResponse(questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex].identifier)\"\n  *ngIf=\"questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex].questionType == 'Short text'\"\n  [shortText]=\"questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex]\"\n  (submitEvent)=\"nextQuestion()\">\n</app-short-text>\n\n\n<app-long-text\n  [isLastQuestion]=\"(questionnairePage.questions.length -1) === this.surveyLibService.currentElement.currentQuestionIndex \"\n\n  [surveyResponse]=\"pagesService.getResponse(questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex].identifier)\"\n  [longText]=\"questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex]\"\n  *ngIf=\"questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex].questionType == 'Long text'\"\n  (submitEvent)=\"nextQuestion()\">\n</app-long-text>\n\n<app-statement\n  [surveyResponse]=\"pagesService.getResponse(questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex].identifier)\"\n  *ngIf=\"questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex].questionType == 'Statement'\"\n  [statement]=\"questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex]\"\n  (submitEvent)=\"nextQuestion()\">\n</app-statement>\n\n\n<app-email\n  [isLastQuestion]=\"(questionnairePage.questions.length -1) === this.surveyLibService.currentElement.currentQuestionIndex \"\n  [surveyResponse]=\"pagesService.getResponse(questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex].identifier)\"\n  *ngIf=\"questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex].questionType == 'Email'\"\n  [email]=\"questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex]\"\n  (submitEvent)=\"nextQuestion()\">\n</app-email>\n\n<app-phone\n  [isLastQuestion]=\"(questionnairePage.questions.length -1) === this.surveyLibService.currentElement.currentQuestionIndex \"\n\n  [surveyResponse]=\"pagesService.getResponse(questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex].identifier)\"\n  *ngIf=\"questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex].questionType == 'Phone number'\"\n  [phone]=\"questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex]\"\n  (submitEvent)=\"nextQuestion()\">\n</app-phone>\n\n<app-number\n  [isLastQuestion]=\"(questionnairePage.questions.length -1) === this.surveyLibService.currentElement.currentQuestionIndex \"\n\n  [surveyResponse]=\"pagesService.getResponse(questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex].identifier)\"\n  *ngIf=\"questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex].questionType == 'Number'\"\n  [phone]=\"questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex]\"\n  (submitEvent)=\"nextQuestion()\">\n</app-number>\n\n\n<app-name [name]=\"questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex]\"\n          [surveyResponse]=\"pagesService.getResponse(questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex].identifier)\"\n          *ngIf=\"questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex].questionType == 'Name'\"\n          (submitEvent)=\"nextQuestion()\">\n</app-name>\n\n<app-website\n  [isLastQuestion]=\"(questionnairePage.questions.length -1) === this.surveyLibService.currentElement.currentQuestionIndex \"\n  [website]=\"questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex]\"\n             [surveyResponse]=\"pagesService.getResponse(questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex].identifier)\"\n             *ngIf=\"questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex].questionType == 'Website'\"\n             (submitEvent)=\"nextQuestion()\"></app-website>\n\n<app-agree-disagree\n  *ngIf=\"questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex].questionType == 'Legal'\"\n  [agreeDisagree]=\"questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex]\"\n  [surveyResponse]=\"pagesService.getResponse(questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex].identifier)\"\n  (submitEvent)=\"nextQuestion()\">\n</app-agree-disagree>\n\n<app-date [dateQuestion]=\"questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex]\"\n          *ngIf=\"questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex].questionType == 'Date'\"\n          [surveyResponse]=\"pagesService.getResponse(questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex].identifier)\"\n          (submitEvent)=\"nextQuestion()\">\n</app-date>\n<!-- <app-contact-form *ngIf=\"questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex].questionType == 'Contact Form'\"\n                   [contactForm] = \"questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex]\"\n                   (submitEvent)=\"nextQuestion()\">\n </app-contact-form>\n <app-address *ngIf=\"questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex].questionType == 'Address Form'\"\n              [addressForm] = \"questionnairePage.questions[surveyLibService.currentElement.currentQuestionIndex]\"\n              (submitEvent)=\"nextQuestion()\">\n </app-address>-->\n\n\n\n\n<!--<button class=\"back-button\" mat-button (click)=\"previousQuestion()\">Back</button>\n<button class=\"submit-button\"\n        mat-button\n        *ngIf=\"isLastQuestion\"\n        (click)=\"submitResponse()\">Submit</button>-->\n\n<div id=\"error_snackbar\"><span id=\"message\">Error</span></div>\n",
                styles: ["/*!* START OF ANIMATION*!*//*!* END OF ANIMATION*!*/", ":root{--white-25:rgba(255, 255, 255, 0.25);--font-family:'Ubuntu',sans-serif;--bg-color:#f4a06e;--primary-color:#004e89;--primary-color-dark:#001B56;--footer-bg-color:#f9cfb6;--footer-primary-color:#b98f76;--footer-secondary-color:#fce7da;--text-color-primary:#ffffff;--text-color-secondary:#4a4a4a;--primary-button-text-color:#fffff;--positiveTranslate:translateX(350px);--negativeTranslate:translateX(-350px);--negativeTranslate3D:translate3d(-350px,0,0)}*,:after,:before{box-sizing:inherit}body,html{margin:0;padding:0;height:100%;width:100%;box-sizing:border-box;transition:none!important}.entry-next{-webkit-animation:.6s cubic-bezier(.215,.61,.355,1) both animMoveRightToCurrent;animation:.6s cubic-bezier(.215,.61,.355,1) both animMoveRightToCurrent}.entry-next-delay{-webkit-animation:.6s cubic-bezier(.215,.61,.355,1) .1s both animMoveRightToCurrent;animation:.6s cubic-bezier(.215,.61,.355,1) .1s both animMoveRightToCurrent}@-webkit-keyframes animMoveRightToCurrent{from{opacity:0;-webkit-transform:var(--positiveTranslate)}to{opacity:1;-webkit-transform:translateY(0)}}@keyframes animMoveRightToCurrent{from{opacity:0;-webkit-transform:var(--positiveTranslate)}to{opacity:1;-webkit-transform:translateY(0)}}.exit-next{-webkit-animation:.6s cubic-bezier(.215,.61,.355,1) forwards animMoveCurrentToLeft;animation:.6s cubic-bezier(.215,.61,.355,1) forwards animMoveCurrentToLeft}.exit-next-delay{-webkit-animation:.6s cubic-bezier(.215,.61,.355,1) .1s forwards animMoveCurrentToLeft;animation:.6s cubic-bezier(.215,.61,.355,1) .1s forwards animMoveCurrentToLeft}@-webkit-keyframes animMoveCurrentToLeft{to{opacity:0;-webkit-transform:var(--negativeTranslate3D)}}@keyframes animMoveCurrentToLeft{to{opacity:0;-webkit-transform:var(--negativeTranslate3D);transform:var(--negativeTranslate3D)}}.entry-previous{-webkit-animation:.6s cubic-bezier(.215,.61,.355,1) both animMoveLeftToCurrent;animation:.6s cubic-bezier(.215,.61,.355,1) .1s both animMoveLeftToCurrent}.entry-previous-delay{-webkit-animation:.6s cubic-bezier(.215,.61,.355,1) .1s both animMoveLeftToCurrent;animation:.6s cubic-bezier(.215,.61,.355,1) .1s both animMoveLeftToCurrent}@-webkit-keyframes animMoveLeftToCurrent{from{opacity:0;-webkit-transform:var(--negativeTranslate)}to{opacity:1;-webkit-transform:translateY(0)}}@keyframes animMoveLeftToCurrent{from{opacity:0;-webkit-transform:var(--negativeTranslate);transform:var(--negativeTranslate)}to{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}}.exit-previous{-webkit-animation:.6s cubic-bezier(.215,.61,.355,1) .1s forwards animMoveCurrentToRight;animation:.6s cubic-bezier(.215,.61,.355,1) .1s forwards animMoveCurrentToRight}.exit-previous-delay{-webkit-animation:.6s cubic-bezier(.215,.61,.355,1) forwards animMoveCurrentToRight;animation:.6s cubic-bezier(.215,.61,.355,1) forwards animMoveCurrentToRight}@-webkit-keyframes animMoveCurrentToRight{from{opacity:1;-webkit-transform:translateY(0)}to{opacity:0;-webkit-transform:var(--positiveTranslate)}}@keyframes animMoveCurrentToRight{from{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}to{opacity:0;-webkit-transform:var(--positiveTranslate);transform:var(--positiveTranslate)}}.input{border-radius:3px;padding:5px 0 5px 10px;color:var(--text-color-secondary);background-color:var(--white-25);font-size:.875rem;position:relative;box-shadow:1px 1px 3px 0 rgba(0,0,0,.5);height:31px}.select{cursor:pointer;position:relative;width:250px}.select .input:after,.select .input:before{content:'';position:absolute;left:calc(100% - 20px);-webkit-transform:translateY(-50%);transform:translateY(-50%);width:0;height:0}.select .input:before{border-top:5px solid var(--text-color-secondary);border-left:5px solid transparent;border-right:5px solid transparent;top:50%}.select .input:after{border-top:5px solid var(--white-25);border-left:5px solid transparent;border-right:5px solid transparent;top:calc(50% - 1px)}.select-options{position:absolute;width:100%;border-radius:4px;z-index:100;top:104%;left:0;display:none;overflow:hidden;box-shadow:1px 1px 3px 0 rgba(0,0,0,.5)}.select-options.visible{display:block;background-color:var(--white-25);z-index:1}.select-options ul{list-style:none;padding:0;margin:0}.select-options ul li{padding:5px 0 5px 10px;border-bottom:1px solid #ddd;font-size:.875rem;color:var(--text-color-secondary);background-color:var(--white-25);position:relative;overflow:hidden}.select-options ul li:hover{background-color:var(--primary-color);color:var(--text-color-primary)}.select-options ul li:last-child{border-bottom:0}.select-options ul li.selected{color:var(--text-color-primary);background-color:var(--primary-color);padding:5px 5px 5px 35px}.select-options ul li.selected:before{content:'';width:5px;height:10px;color:#000;border:2px solid var(--text-color-primary);border-right:0;border-bottom:0;right:calc(100% - 20px);top:50%;-webkit-transform:translateY(-50%) rotate(-135deg);transform:translateY(-50%) rotate(-135deg);position:absolute}.survey-container{font-weight:400;font-style:normal;font-stretch:normal;letter-spacing:normal;font-family:var(--font-family);line-height:1.5;background-color:var(--bg-color);height:calc(100vh - 80px);width:100%;overflow-y:auto;overflow-x:hidden;margin:0;padding:0}.survey-container-wrap{margin-left:auto;margin-right:auto;margin-bottom:10px;padding-top:8.18em;max-width:46.125em;color:var(--primary-color)}.skip-this-question{color:var(--text-color-secondary);cursor:pointer;font-size:.85em;clear:both}.skip-this-question-marginLeft{margin-left:2%}.skip-this-question:hover{color:var(--primary-color)}.question-description{margin-top:5px;font-size:14px}.footer{height:80px;position:absolute;bottom:0;width:100%;font-family:var(--font-family);background-color:var(--footer-bg-color)}.footer-container{position:absolute;bottom:0;left:50%;max-width:46.125em;width:46.125em;margin-left:-23.0625em}.footer-right{padding:15px 0;float:right}.footer-right img{width:81px}.footer-left{float:left;margin:10px 0 0}.progress-container{width:16.25em;display:inline-block}.progress-container p{margin:0;line-height:normal;font-size:.875rem;color:var(--footer-primary-color)}.progress-bar{width:100%;display:inline-block}.arrowUp-arrowDown-container{display:inline-block;margin:0 0 0 1em}.arrowUp-arrowDown-btn{width:25px;height:25px;background-color:var(--footer-bg-color);border-radius:3px;margin:0 10px 0 0;border:1px solid var(--footer-primary-color);cursor:pointer;padding:0}.arrowUp-arrowDown-btn:active{background:var(--footer-primary-color);outline:var(--footer-primary-color);color:var(--footer-secondary-color)}.arrowUp-arrowDown-btn:active span{border:solid var(--footer-secondary-color);border-width:0 2px 2px 0}.arrowUp-arrowDown-btn:focus{outline:var(--footer-primary-color)}.arrowUp-arrowDown-container span{border:solid var(--footer-primary-color);border-width:0 2px 2px 0;display:inline-block;padding:3px}.arrowUp{transform:rotate(-45deg);-webkit-transform:rotate(-45deg);margin-right:3px}.arrowDown{transform:rotate(135deg);-webkit-transform:rotate(135deg);margin-left:3px}progress{width:100%;border:1px solid var(--footer-primary-color);border-radius:14px}progress::-moz-progress-bar{border-radius:14px;background:var(--footer-primary-color);transition:.5s ease-out}progress::-webkit-progress-bar{border-radius:14px;background:var(--footer-secondary-color)}progress::-webkit-progress-value{border-radius:14px;background:var(--footer-primary-color);transition:.5s ease-out}.org-logo{display:block;max-width:250px;max-height:70px;min-height:50px}.welcome-thankyou-heading{font-size:1.75em;margin:2rem 0 0;font-weight:700}.welcome-thankyou-text{margin:0!important}.survey-statement{font-size:1.31em;font-weight:500;margin:2rem 0 0}.blink-btn-animation{-webkit-animation:.25s 2 blinkAnimation;animation:.25s 2 blinkAnimation}@-webkit-keyframes blinkAnimation{50%{opacity:.3}}@keyframes blinkAnimation{50%{opacity:.3}}.btn-primary{margin:1.56em 0 0;border-radius:4px;text-align:center;background-color:var(--primary-color);border:1px solid var(--primary-color);font-size:1rem;min-width:7.31em;min-height:2.5em;color:var(--primary-button-text-color);font-family:var(--font-family);cursor:pointer}.btn-primary:focus{background-color:var(--primary-color-dark);border:1px solid var(--primary-color-dark);outline:0}.btn-primary:hover{box-shadow:0 11px 22px -6px rgba(0,0,0,.5)}.btn-primary:active{background-color:var(--primary-color-dark)}.btn-secondary{border-radius:4px;margin:10px 10px 0 0;cursor:pointer;color:var(--text-color-secondary);border:1px solid var(--white-25);background-color:var(--white-25);font-family:var(--font-family);font-size:1rem;box-shadow:1px 1px 3px 0 rgba(0,0,0,.5);transition:.3s}.btn-secondary:hover{box-shadow:0 0 3px 0 var(--primary-color);border:solid 1px var(--primary-color)}.btn-secondary:focus{background-color:var(--primary-color);color:var(--text-color-primary);border:var(--primary-color);outline:0;box-shadow:none}.btn-secondary:active{background-color:var(--primary-color);box-shadow:1px 1px 5px 1px rgba(0,0,0,.5);outline:0}.btn-focused-state{background-color:var(--primary-color);color:var(--text-color-primary);border:var(--primary-color);outline:0;box-shadow:none}.checkmark{display:inline-block;-webkit-transform:rotate(45deg);transform:rotate(45deg);height:16px;width:9px;border-bottom:3px solid var(--text-color-secondary);border-right:3px solid var(--text-color-secondary)}.checkmark-checked{border-bottom:3px solid var(--text-color-primary);border-right:3px solid var(--text-color-primary)}.crossmark{position:relative;display:inline-block;margin-bottom:7px;margin-right:25px}.crossmark:after{position:absolute;content:'';display:block;width:18px;height:0;border:solid var(--text-color-secondary);border-width:0 0 3px;-webkit-transform:rotate(45deg);transform:rotate(45deg);left:0;top:0}.crossmark:before{position:absolute;content:'';display:block;width:18px;height:0;border:solid var(--text-color-secondary);border-width:0 0 3px;-webkit-transform:rotate(-45deg);transform:rotate(-45deg);left:0;top:0}.crossmark-checked:after,.crossmark-checked:before{border:solid var(--text-color-primary);border-width:0 0 3px}.nps-btn-group{display:flex;justify-content:space-between;width:75%;margin:7px 0 0}.nps-btn{width:40px;height:40px;font-size:1.5em;line-height:1.19;margin:0}.nps-btn-focus{background-color:var(--primary-color);color:var(--text-color-primary);border:var(--primary-color);outline:0;box-shadow:none}.nps-legend{margin:5px 0 0;font-size:.75em;color:var(--text-color-secondary);position:relative;width:75%}#left-nps-label{position:absolute;width:8%;left:0}#center-nps-label{position:absolute;width:8%;left:47.5%}#right-nps-label{position:absolute;width:8%;right:0;text-align:end}.multiple-choice{width:320px;min-height:32px;margin:7px 0 0;padding:5px 0 0 7px;font-size:.875em;display:block;border-radius:4px;border:1px solid var(--white-25);box-shadow:1px 1px 3px 0 rgba(0,0,0,.5);color:var(--text-color-secondary);transition:.3s;background-color:var(--white-25);cursor:pointer}.multiple-choice-checkbox{display:none}.multiple-choice-checkbox:checked+span{background-color:var(--primary-color);color:var(--text-color-primary);border:none;box-shadow:none}.survey-input-textarea{width:95%;min-height:5em;max-height:21em;font-size:.875rem;color:var(--text-color-secondary);margin:7px 0 0;padding:6px 0 0 5px;display:block;background-color:var(--white-25);border:var(--white-25);resize:vertical;font-family:var(--font-family)}.survey-input-textarea:active,.survey-input-textarea:focus{outline:1px solid var(--primary-color)}.survey-input-text-box{width:100%;height:32px;margin:7px 0 0;padding:0 0 0 5px;font-size:.875rem;color:var(--text-color-secondary);background-color:var(--white-25);border:var(--white-25);font-family:var(--font-family)}.survey-input-text-box:active,.survey-input-text-box:focus{outline:1px solid var(--primary-color)}.yes-no-btn{width:71px;height:32px;padding:0}.thumbs-btn{width:40px;height:32px;padding:3px 0 0}.rating{direction:rtl;display:block;margin:7px 0 0;float:left}.rating input[type=radio]{display:none}.rating label{width:32px;height:32px;display:inline-block;cursor:pointer;margin:0 7px 0 0;position:relative}.ratingFillIcon,.ratingOutlineIcon{fill:var(--primary-color);position:absolute}.ratingFillIcon{display:none}.rating input[type=radio]:checked~label>div>.ratingFillIcon,.rating label:hover .ratingFillIcon,.rating label:hover~label .ratingFillIcon{fill:var(--primary-color);display:block}.rating input[type=radio]:checked~label>div>.ratingFillIcon{-webkit-animation:.25s 2 blinkAnimation;animation:.25s 2 blinkAnimation}.drop-down{margin:7px 0 0;width:100%;height:32px;font-size:.75em;line-height:1.5;color:var(--text-color-secondary);padding:7px 0 7px 12px;border:1px solid var(--white-25);border-radius:4px;background-color:var(--white-25);cursor:pointer}.drop-down:hover .dropdown-content{display:block}.drop-down:focus{outline:1px solid var(--primary-color)}.agree-disagree-btn{min-width:115px;height:32px}.matrix{display:flex;justify-content:center;align-items:center}.matrix-left{display:inline-block}.matrix-left p{font-size:1.2em;line-height:1.43;color:var(--p-font-color);margin:12px 0 0}.matrix-right{margin:20px 0 0 20px;padding:0 0 10px}.matrix-star-rating{float:none}.matrix-star-rating label{width:25px;height:25px;margin:0}.matrix-star-rating input[type=radio]:checked~label>img,.matrix-star-rating label:hover,.matrix-star-rating label:hover~label{background:url(https://cdn.omoto.io/star-fill.png) no-repeat}.matrix-drop-down{width:157px;height:32px}.isRequired{color:red;margin-right:3px}.validation-error-msg{color:red;font-size:.75em}@media (min-width:481px) and (max-width:767px){.survey-container{height:100%}.survey-container-wrap{padding:20px 20px 10px;background-color:var(--bg-color);height:calc(100% - 59px);overflow-x:hidden;overflow-y:auto}.survey-statement{font-size:1.125em}.multiple-choice{width:100%;max-width:320px}.footer{height:59px;position:fixed}.footer-container{padding:0 20px;position:initial;max-width:initial;width:initial;margin:0}.footer-right img{width:60px;height:30px}.progress-container{width:10em}.footer-left{margin:5px 0 0}.btn-primary{margin:20px 0 0}.nps-btn-group{margin-top:7px;width:85%}.nps-legend{width:85%}.nps-btn{width:35px;height:35px;font-size:1.06em;line-height:2.2;margin:0;padding:0}.matrix{margin:0 auto}.matrix-left p{width:138px;height:20px;font-size:.875em}.matrix-right{padding:4px 0 0}}@media (min-width:320px) and (max-width:375px){.survey-container{height:100%}.org-logo{width:100%;height:auto}.survey-container-wrap{margin:0;padding:20px 20px 10px;height:calc(100vh - 59px);background-color:var(--bg-color);overflow-y:auto;overflow-x:hidden}.welcome-thankyou-heading{margin:1rem 0 0}.survey-statement{font-size:14px;margin:1rem 0 0}.multiple-choice{width:100%;max-width:320px;height:28px;padding:4px 0 0 7px;font-size:12px}.footer{height:59px;position:fixed}.footer-container{padding:0 20px;position:initial;max-width:initial;width:initial;margin:0}.footer-right img{width:60px;height:30px}.footer-left{margin:5px 0 0}.progress-container{width:8.3em}.btn-primary{margin:16px 0 0;font-size:14px}.nps-btn-group{margin-top:7px;width:100%}.nps-btn{width:25px;height:25px;font-size:1.06em;line-height:1.06;margin:0 3px 0 0;padding:0}#right-nps-label,.nps-legend{width:100%}.ratingIconAbove6{width:25px!important;margin:0 3px 0 0!important}.ratingIconAbove6 .ratingFillIcon,.ratingIconAbove6 .ratingOutlineIcon{width:25px}.matrix{margin:0 auto}.matrix-left p{width:138px;height:20px;font-size:.875em}.matrix-right{padding:4px 0 0}}@media (min-width:375px) and (max-width:480px){.survey-container{height:100%}.org-logo{width:100%;height:auto}.survey-container-wrap{margin:0;padding:20px 20px 10px;height:calc(100vh - 59px);background-color:var(--bg-color);overflow-y:auto;overflow-x:hidden}.survey-statement{font-size:1.125em}.multiple-choice{width:100%;max-width:320px}.footer{height:59px;position:fixed}.footer-container{padding:0 20px;position:initial;max-width:initial;width:initial;margin:0}.footer-right img{width:60px;height:30px}.footer-left{margin:5px 0 0}.progress-container{width:8.3em}.btn-primary{margin:20px 0 0}.nps-btn-group{margin-top:7px;width:100%}.nps-btn{width:25px;height:25px;font-size:1.06em;line-height:1.06;margin:0;padding:0}#right-nps-label,.nps-legend{width:100%}.ratingIconAbove6{width:25px!important;margin:0 3px 0 0!important}.ratingIconAbove6 .ratingFillIcon,.ratingIconAbove6 .ratingOutlineIcon{width:25px}.matrix{margin:0 auto}.matrix-left p{width:138px;height:20px;font-size:.875em}.matrix-right{padding:4px 0 0}}#error_snackbar{visibility:hidden;width:250px;margin-left:-125px;background-color:rgba(0,0,0,.55);color:#fff;text-align:center;border-radius:2px;padding:16px;position:absolute;z-index:1;left:50%;bottom:10%;font-size:1em}#error_snackbar.show{visibility:visible;-webkit-animation:.5s fadein,.5s 2.5s fadeout;animation:.5s fadein,.5s 2.5s fadeout}@-webkit-keyframes fadein{from{bottom:0;opacity:0}to{bottom:10%;opacity:1}}@keyframes fadein{from{bottom:0;opacity:0}to{bottom:10%;opacity:1}}@-webkit-keyframes fadeout{from{bottom:10%;opacity:1}to{bottom:0;opacity:0}}@keyframes fadeout{from{bottom:10%;opacity:1}to{bottom:0;opacity:0}}@media screen and (-webkit-min-device-pixel-ratio:0){progress{height:10px}input,select,textarea{font-size:16px}}"]
            }] }
];
/** @nocollapse */
QuestionnaireComponent.ctorParameters = () => [
    { type: PagesService },
    { type: SurveyLibService }
];
QuestionnaireComponent.propDecorators = {
    previousPageEvent: [{ type: Output }],
    currentQuestionIndex: [{ type: Input }],
    submitResponse: [{ type: Output }],
    questionnairePage: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/thank-you-page/thank-you-page.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ThankYouPageComponent {
    // isActive: boolean = true;
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
        //this.thankYouPage = PersistenceService.get(PagesComponent.CURRENT_PAGE);
        document.getElementById("thank-you-page").className = 'entry-next';
        document.getElementById("thank-you-page-delay").className = 'entry-next-delay';
    }
}
ThankYouPageComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-thank-you-page',
                template: "<div id=\"thank-you-page\">\n        <div class=\"welcome-thankyou-heading\">{{ thankYouPage.properties.headingValue }}</div>\n\n   <div class=\"survey-statement welcome-thankyou-text\">  {{ thankYouPage.properties.subHeadingValue }} </div>\n</div>\n\n<div id=\"thank-you-page-delay\">\n<button class=\"btn-primary\" id=\"btn-primary\" >{{ thankYouPage.properties.buttonText }}</button>\n</div>\n\n",
                styles: [""]
            }] }
];
/** @nocollapse */
ThankYouPageComponent.ctorParameters = () => [];
ThankYouPageComponent.propDecorators = {
    thankYouPage: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/questionnaire/choice/choice.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ChoiceComponent {
    /**
     * @param {?} pageService
     */
    constructor(pageService) {
        this.pageService = pageService;
        this.isActive = false;
        this.submitEvent = new EventEmitter();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set isMultipleChoice(value) {
        this._isMultipleChoice = value;
        console.log('Inside isMultipleChoice');
        console.log(value);
        this.choiceQuestion.choices.forEach((/**
         * @param {?} choice
         * @return {?}
         */
        choice => choice.isChecked = false));
    }
    /**
     * @return {?}
     */
    get isMultipleChoice() {
        return this._isMultipleChoice;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        console.warn(this.surveyResponse);
        if (this.surveyResponse.choices !== undefined) {
            this.surveyResponse.choices.forEach((/**
             * @param {?} choice
             * @return {?}
             */
            choice => choice.isChecked = true));
        }
        if (this.pageService.stage == 'entry-next') {
            document.getElementById('choice-question').className = 'entry-next';
            document.getElementById('choice-question-delay').className = 'entry-next-delay';
        }
        else if (this.pageService.stage == 'entry-previous') {
            document.getElementById('choice-question').className = 'entry-previous-delay';
            document.getElementById('choice-question-delay').className = 'entry-previous';
        }
    }
    /**
     * @return {?}
     */
    submit() {
        this.isActive = true;
        this.surveyResponse.choices = this.selectedOptions;
        if (this.surveyResponse.choices != undefined &&
            this.surveyResponse.choices.length > 0) {
            this.surveyResponse.questionId = this.choiceQuestion.questionId;
            this.surveyResponse.question = this.choiceQuestion.question;
            this.surveyResponse.questionType = this.choiceQuestion.questionType;
            this.surveyResponse.identifier = this.choiceQuestion.identifier;
            this.pageService.persistSurvey(this.surveyResponse);
        }
        document.getElementById('btn-primary').classList.add('blink-btn-animation');
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.submitEvent.emit();
        }), 350);
    }
    /**
     * @return {?}
     */
    get selectedOptions() {
        return this.choiceQuestion.choices
            .filter((/**
         * @param {?} choice
         * @return {?}
         */
        choice => choice.isChecked))
            .map((/**
         * @param {?} opt
         * @return {?}
         */
        opt => opt));
    }
    /**
     * @private
     * @param {?} choices
     * @return {?}
     */
    changeSelection(choices) {
        if (typeof choices !== 'undefined') {
            choices.forEach((/**
             * @param {?} choice
             * @return {?}
             */
            choice => {
                this.choiceQuestion.choices.forEach((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => {
                    if (choice.choiceId == c.choiceId) {
                        c.isChecked = true;
                    }
                }));
            }));
        }
    }
    /**
     * @return {?}
     */
    onClickOthers() {
        if (!this.choiceQuestion.others.isChecked) {
            this.choiceQuestion.others.isChecked = true;
            this.choiceQuestion.others.showCheckbox = false;
        }
        else {
            this.choiceQuestion.others.isChecked = false;
            this.choiceQuestion.others.showCheckbox = true;
        }
    }
    /**
     * @return {?}
     */
    onInputOthers() {
        this.choiceQuestion.others.isChecked = true;
        this.choiceQuestion.others.showCheckbox = true;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onOptionSelectionChange($event) {
        if ($event) {
            this.choiceQuestion.attributes.numberOfSelection++;
        }
        else {
            this.choiceQuestion.attributes.numberOfSelection--;
        }
    }
    /**
     * @param {?} identifier
     * @return {?}
     */
    onSingleSelect(identifier) {
        this.choiceQuestion.choices.forEach((/**
         * @param {?} choice
         * @return {?}
         */
        choice => choice.isChecked = false));
        /** @type {?} */
        let index = this.choiceQuestion.choices.findIndex((/**
         * @param {?} choice
         * @return {?}
         */
        choice => choice.identifier == identifier));
        if (index > 0) {
            this.choiceQuestion.choices[index].isChecked = true;
        }
    }
    /**
     * @param {?} choice
     * @return {?}
     */
    isDisabled(choice) {
        if (this.choiceQuestion.attributes.selection == undefined)
            return false;
        else if (this.choiceQuestion.attributes.selection.type == 'Exact') {
            return this.choiceQuestion.attributes.numberOfSelection >= this.choiceQuestion.attributes.selection.exact
                && !choice.isChecked;
        }
        else if (this.choiceQuestion.attributes.selection.type == 'Range') {
            return this.choiceQuestion.attributes.numberOfSelection >= this.choiceQuestion.attributes.selection.rangeTo
                && !choice.isChecked;
        }
        else
            return false;
    }
}
ChoiceComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-choice',
                template: "<div id=\"choice-question\">\n\n  <div class=\"survey-statement\">\n    <span *ngIf=\"choiceQuestion.attributes.required\" class=\"isRequired\">*</span>{{choiceQuestion.question}}\n  </div>\n  <p class=\"question-description\">\n    {{choiceQuestion.attributes.description}}\n  </p>\n\n</div>\n<div id=\"choice-question-delay\">\n\n  <ng-container *ngIf=\"isMultipleChoice; else singleSelection\">\n\n    <div *ngFor=\"let c of choiceQuestion.choices; index as choiceIndex\">\n      <label>\n        <input class=\"multiple-choice-checkbox\" type=\"checkbox\" name=\"option {{choiceIndex}}\"\n               (ngModelChange)=\"onOptionSelectionChange($event)\"\n               [disabled]=\"isDisabled(c)\"\n               [(ngModel)]=\"c.isChecked\"/>\n        <span class=\"btn-secondary multiple-choice\">{{c.text}}</span>\n      </label>\n    </div>\n\n\n    <div *ngIf=\"choiceQuestion.attributes.others && choiceQuestion.others != undefined\">\n      <label *ngIf=\"choiceQuestion.others.showCheckbox\">\n        <input type=\"checkbox\" name=\"Others\" style=\"display: none;\"\n               (click)=\"onClickOthers()\"\n               [(ngModel)]=\"choiceQuestion.others.isChecked\"/>\n        <span class=\"btn-secondary multiple-choice\">{{choiceQuestion.others.value}}</span>\n      </label>\n      <div *ngIf=\"!choiceQuestion.others.showCheckbox\">\n      <span class=\"btn-secondary multiple-choice\">\n            <input type=\"text\"\n                   appAutofocus\n                   [(ngModel)]=\"choiceQuestion.others.value\"\n                   class=\"multiple-choice-editableTextBox\">\n            <button (click)=\"onInputOthers()\"\n                    class=\"btn editable-others\">&#10004;</button>\n      </span>\n      </div>\n    </div>\n  </ng-container>\n\n  <ng-template #singleSelection>\n    <div\n      *ngFor=\"let c of choiceQuestion.choices; index as choiceIndex\">\n      <label>\n        <input class=\"multiple-choice-radio-btn\"\n               type=\"radio\"\n               name=\"radio_name\"\n               [id]=\"choiceIndex\"\n               [value]=\"c.identifier\"\n               (change)=\"onSingleSelect(c.identifier)\"\n               [checked]=\"c.isChecked\"\n        />\n        <span class=\"multiple-choice\">{{c.text}}</span>\n      </label>\n    </div>\n  </ng-template>\n\n  <button class=\"btn-primary\" id=\"btn-primary\" (click)=\"submit()\">{{isLastQuestion?'Submit': 'Done'}}</button>\n  <span *ngIf=\"!choiceQuestion.attributes.required\" (click)=\"submit()\"\n        class=\"skip-this-question skip-this-question-marginLeft\">Skip</span>\n</div>\n",
                styles: [".multiple-choice-radio-btn{display:none}.editable-others{padding:0 4%;border:1px solid var(--white-25);margin:1.6% 1% 0 0}.editable-others:active,.editable-others:focus{border:1px solid var(--white-25)}.multiple-choice-editableTextBox{width:85%!important;height:28px!important;border:none!important;padding-left:2%!important;margin:0!important;font-size:inherit;color:var(--text-color-secondary)}.multiple-choice-editableTextBox:active,.multiple-choice-editableTextBox:focus{outline:0!important}.mcq-disabled{background:0 0;cursor:not-allowed}.mcq-subcategory{padding-left:15px}"]
            }] }
];
/** @nocollapse */
ChoiceComponent.ctorParameters = () => [
    { type: PagesService }
];
ChoiceComponent.propDecorators = {
    choiceQuestion: [{ type: Input }],
    surveyResponse: [{ type: Input }],
    submitEvent: [{ type: Output }],
    isLastQuestion: [{ type: Input }],
    isMultipleChoice: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/questionnaire/yes-no/yes-no.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class YesNoComponent {
    /**
     * @param {?} pageService
     */
    constructor(pageService) {
        this.pageService = pageService;
        this.isActive = false;
        this.submitEvent = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.pageService.stage == 'entry-next') {
            document.getElementById('yes-no-question').className = 'entry-next';
            document.getElementById('yes-no-question-delay').className = 'entry-next-delay';
        }
        else if (this.pageService.stage == 'entry-previous') {
            document.getElementById('yes-no-question').className = 'entry-previous-delay';
            document.getElementById('yes-no-question-delay').className = 'entry-previous';
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onSelect(value) {
        if (value != undefined) {
            this.isActive = true;
            this.surveyResponse.question = this.yesNoQuestion.question;
            this.surveyResponse.questionType = this.yesNoQuestion.questionType;
            this.surveyResponse.questionId = this.yesNoQuestion.questionId;
            this.surveyResponse.identifier = this.yesNoQuestion.identifier;
            this.surveyResponse.answer = value;
            this.pageService.persistSurvey(this.surveyResponse);
            value == 'Yes' ? document.getElementById('yes-btn').classList.add('blink-btn-animation') : '';
            value == 'No' ? document.getElementById('no-btn').classList.add('blink-btn-animation') : '';
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.submitEvent.emit();
            }), 350);
        }
        else {
            this.submitEvent.emit();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
}
YesNoComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-yes-no',
                template: "<div id=\"yes-no-question\">\n<div class=\"survey-statement\">\n  <span *ngIf=\"yesNoQuestion.attributes.required\" style=\"color:red;margin-right: 0.5%\">*</span>{{ yesNoQuestion.question }} </div>\n  <p class=\"question-description\">\n  {{yesNoQuestion.attributes.description}}\n</p>\n\n</div>\n\n\n\n<div id=\"yes-no-question-delay\">\n<button\n    name=\"yes-no\" value=\"yes\" id=\"yes-btn\"\n    [ngClass]=\"surveyResponse.answer == 'Yes'?'btn-secondary yes-no-btn btn-focused-state':'btn-secondary yes-no-btn'\"\n    (click)=\"onSelect('Yes')\"><span [ngClass]=\"surveyResponse.answer == 'Yes'? 'checkmark checkmark-checked':'checkmark'\"></span><span style=\"margin-left: 10px\">YES</span>\n</button>\n\n\n\n<button\n    name=\"yes-no\" value=\"no\" id=\"no-btn\"\n    [ngClass]=\"surveyResponse.answer == 'No'?'btn-secondary yes-no-btn btn-focused-state':'btn-secondary yes-no-btn'\"\n    (click)=\"onSelect('No')\"><span [ngClass]=\"surveyResponse.answer == 'No'? 'crossmark crossmark-checked':'crossmark'\"></span><span>NO</span>\n</button>\n\n\n<div style=\"margin-top:2%\" *ngIf=\"!yesNoQuestion.attributes.required\" class=\"skip-this-question\">\n  <span (click)=\"onSelect(undefined)\">Skip</span>\n</div>\n\n</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
YesNoComponent.ctorParameters = () => [
    { type: PagesService }
];
YesNoComponent.propDecorators = {
    yesNoQuestion: [{ type: Input }],
    surveyResponse: [{ type: Input }],
    submitEvent: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/questionnaire/short-text/short-text.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ShortTextComponent {
    /**
     * @param {?} pageService
     */
    constructor(pageService) {
        this.pageService = pageService;
        this.submitEvent = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.pageService.stage == 'entry-next') {
            document.getElementById('short-question').className = 'entry-next';
            document.getElementById('short-question-delay').className = 'entry-next-delay';
        }
        else if (this.pageService.stage == 'entry-previous') {
            document.getElementById('short-question').className = 'entry-previous-delay';
            document.getElementById('short-question-delay').className = 'entry-previous';
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onInputValue(value) {
        if (value != undefined) {
            this.surveyResponse.questionId = this.shortText.questionId;
            this.surveyResponse.question = this.shortText.question;
            this.surveyResponse.questionType = this.shortText.questionType;
            this.surveyResponse.identifier = this.shortText.identifier;
            this.surveyResponse.answer = value;
            this.pageService.persistSurvey(this.surveyResponse);
            document.getElementById('btn-primary').classList.add('blink-btn-animation');
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.submitEvent.emit();
            }), 350);
        }
        else {
            this.submitEvent.emit();
        }
    }
    /**
     * @return {?}
     */
    skipQuestion() {
        this.surveyResponse.identifier = this.shortText.identifier;
        this.surveyResponse.answer = undefined;
        this.submitEvent.emit();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
}
ShortTextComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-short-text',
                template: "<div id=\"short-question\">\n<div class=\"survey-statement\">\n  <span *ngIf=\"shortText.attributes.required\" class=\"isRequired\">*</span>{{ shortText.question }}</div>\n\n  <p class=\"question-description\">\n  {{shortText.attributes.description}}\n</p>\n\n</div>\n\n<div id=\"short-question-delay\">\n<input class=\"survey-input-text-box\" #shortTextInput\n        type=\"text\" onfocus=\"this.placeholder=''\"\n       [(ngModel)]=\"surveyResponse.answer\"\n       [maxLength]=\"shortText.attributes.maxCharacterCount\"\n       placeholder=\"Enter text here\">\n<button class=\"btn-primary\" id=\"btn-primary\" (click)=\"onInputValue(shortTextInput.value)\">{{isLastQuestion?'Submit': 'Done'}}</button>\n<span\n  (click)=\"onInputValue(undefined)\"\n  *ngIf=\"!shortText.attributes.required\" class=\"skip-this-question skip-this-question-marginLeft\">Skip</span>\n</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
ShortTextComponent.ctorParameters = () => [
    { type: PagesService }
];
ShortTextComponent.propDecorators = {
    shortText: [{ type: Input }],
    surveyResponse: [{ type: Input }],
    submitEvent: [{ type: Output }],
    isLastQuestion: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/questionnaire/long-text/long-text.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class LongTextComponent {
    /**
     * @param {?} pageService
     * @param {?} surveyLibServices
     */
    constructor(pageService, surveyLibServices) {
        this.pageService = pageService;
        this.surveyLibServices = surveyLibServices;
        this.submitEvent = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.pageService.stage == 'entry-next') {
            document.getElementById('long-question').className = 'entry-next';
            document.getElementById('long-question-delay').className = 'entry-next-delay';
        }
        else if (this.pageService.stage == 'entry-previous') {
            document.getElementById('long-question').className = 'entry-previous-delay';
            document.getElementById('long-question-delay').className = 'entry-previous';
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onInputValue(value) {
        if (value != undefined) {
            this.surveyResponse.questionId = this.longText.questionId;
            this.surveyResponse.question = this.longText.question;
            this.surveyResponse.questionType = this.longText.questionType;
            this.surveyResponse.answer = value;
            this.surveyResponse.identifier = this.longText.identifier;
            this.pageService.persistSurvey(this.surveyResponse);
            document.getElementById('btn-primary').classList.add('blink-btn-animation');
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.submitEvent.emit();
            }), 350);
        }
        else {
            this.submitEvent.emit();
        }
    }
    /**
     * @return {?}
     */
    skipQuestion() {
        this.submitEvent.emit();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
}
LongTextComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-long-text',
                template: "<div id=\"long-question\">\n\n<div class=\"survey-statement\">\n  <span *ngIf=\"longText.attributes.required\" class=\"isRequired\">*</span>{{ longText.question }}</div>\n  <p class=\"question-description\">\n  {{longText.attributes.description}}\n</p>\n\n</div>\n\n<div id=\"long-question-delay\">\n<textarea class=\"survey-input-textarea\" #longTextInput onfocus=\"this.placeholder=''\" name=\"message\"\n          placeholder=\"Add comment here\"\n          [maxLength]=\"longText.attributes.maxCharacterCount\"\n          [(ngModel)]=\"surveyResponse.answer\">\n  </textarea>\n<button class=\"btn-primary\"  id=\"btn-primary\" (click)=\"onInputValue(longTextInput.value)\">{{isLastQuestion?'Submit': 'Done'}}</button>\n<span *ngIf=\"!longText.attributes.required\"\n     (click)=\"onInputValue(undefined)\"\n     class=\"skip-this-question skip-this-question-marginLeft\">Skip</span>\n<!--<div class=\"row\">\n<button id=\"skip-button\"\n        (click)=\"skipQuestion()\">Skip</button>\n<button id=\"done-button\"\n        (click)=\"onInputValue()\">Done</button>\n</div>-->\n</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
LongTextComponent.ctorParameters = () => [
    { type: PagesService },
    { type: SurveyLibService }
];
LongTextComponent.propDecorators = {
    longText: [{ type: Input }],
    surveyResponse: [{ type: Input }],
    submitEvent: [{ type: Output }],
    isLastQuestion: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/questionnaire/statement/statement.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class StatementComponent {
    /**
     * @param {?} pageService
     */
    constructor(pageService) {
        this.pageService = pageService;
        this.submitEvent = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.pageService.stage == 'entry-next') {
            document.getElementById('statement-question').className = 'entry-next';
            document.getElementById('statement-question-delay').className = 'entry-next-delay';
        }
        else if (this.pageService.stage == 'entry-previous') {
            document.getElementById('statement-question').className = 'entry-previous-delay';
            document.getElementById('statement-question-delay').className = 'entry-previous';
        }
    }
    /**
     * @return {?}
     */
    onSubmit() {
        this.surveyResponse.answer = 'Ok';
        this.surveyResponse.identifier = this.statement.identifier;
        this.surveyResponse.questionId = this.statement.questionId;
        this.surveyResponse.questionType = this.statement.questionType;
        this.pageService.persistSurvey(this.surveyResponse);
        document.getElementById('btn-primary').classList.add('blink-btn-animation');
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.submitEvent.emit();
        }), 350);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.submitEvent.unsubscribe();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onSkip(value) {
        if (value != undefined) {
            this.surveyResponse.answer = value;
            this.surveyResponse.identifier = this.statement.identifier;
            this.surveyResponse.questionId = this.statement.questionId;
            this.surveyResponse.questionType = this.statement.questionType;
            this.pageService.persistSurvey(this.surveyResponse);
        }
        this.submitEvent.emit();
    }
}
StatementComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-statement',
                template: "<div id=\"statement-question\">\n<div class=\"survey-statement\"> <span *ngIf=\"statement.attributes.required\" class=\"isRequired\">*</span>{{ statement.question }} </div>\n<p class=\"question-description\">\n  {{statement.attributes.description}}\n</p>\n\n</div>\n\n\n\n<div id=\"statement-question-delay\">\n<button class=\"btn-primary\"\n        id=\"btn-primary\"\n        type=\"submit\"\n        *ngIf=\"surveyResponse.answer != 'Ok'\"\n        name=\"name\"\n        (click)=\"onSubmit()\">Done</button>\n<button class=\"btn-primary\"\n        type=\"submit\"\n        id=\"btn-primary\"\n        name=\"name\"\n        appAutofocus\n        *ngIf=\"surveyResponse.answer == 'Ok'\"\n        (click)=\"onSubmit()\">Done</button>\n<span\n  (click)=\"onSkip(undefined)\"\n  *ngIf=\"!statement.attributes.required\" class=\"skip-this-question skip-this-question-marginLeft\">Skip</span>\n</div>\n",
                styles: [".statement-button{position:absolute;left:0;margin-left:1%}"]
            }] }
];
/** @nocollapse */
StatementComponent.ctorParameters = () => [
    { type: PagesService }
];
StatementComponent.propDecorators = {
    statement: [{ type: Input }],
    surveyResponse: [{ type: Input }],
    submitEvent: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/questionnaire/email/email.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class EmailComponent {
    /**
     * @param {?} pageService
     */
    constructor(pageService) {
        this.pageService = pageService;
        this.EMAIL_REGEXP = new RegExp('^(([^<>()\\[\\]\\\\.,;:\\s@"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@"]+)*)|(".+"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$');
        this.submitEvent = new EventEmitter();
        this.isValidEmail = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.pageService.stage == 'entry-next') {
            document.getElementById('email-question').className = 'entry-next';
            document.getElementById('email-question-delay').className = 'entry-next-delay';
        }
        else if (this.pageService.stage == 'entry-previous') {
            document.getElementById('email-question').className = 'entry-previous-delay';
            document.getElementById('email-question-delay').className = 'entry-previous';
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onSubmit(value) {
        console.log(value);
        if (value != undefined) {
            this.isValidEmail = this.isValidEmailId(value);
            console.log('Is valid email: ' + this.isValidEmail);
            if (this.isValidEmail) {
                this.surveyResponse.questionId = this.email.questionId;
                this.surveyResponse.question = this.email.question;
                this.surveyResponse.questionType = this.email.questionType;
                this.surveyResponse.identifier = this.email.identifier;
                this.surveyResponse.answer = value;
                this.pageService.persistSurvey(this.surveyResponse);
                document.getElementById('btn-primary').classList.add('blink-btn-animation');
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.submitEvent.emit();
                }), 350);
            }
        }
        else {
            this.submitEvent.emit();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
    /**
     * @private
     * @param {?} email
     * @return {?}
     */
    isValidEmailId(email) {
        return this.EMAIL_REGEXP.test(email);
    }
}
EmailComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-email',
                template: "<div id=\"email-question\">\n<div class=\"survey-statement\">\n    <span *ngIf=\"email.attributes.required\" class=\"isRequired\">*</span>{{ email.question }}\n</div>\n<p class=\"question-description\">\n    {{email.attributes.description}}\n  </p>\n\n</div>\n\n\n<div id=\"email-question-delay\">\n<input class=\"survey-input-text-box\"\n  #emailInput\n  type=\"email\"\n  name=\"email\"\n  onfocus=\"this.placeholder=''\"\n  placeholder=\"Enter valid email ID\"\n  [(ngModel)]=\"surveyResponse.answer\">\n  <div *ngIf=\"!isValidEmail\" class=\"validation-error-msg\">Please enter valid email</div>\n<button class=\"btn-primary\" id=\"btn-primary\"  (click)=\"onSubmit(emailInput.value)\">{{isLastQuestion?'Submit': 'Done'}}</button>\n<span (click)=\"onSubmit(undefined)\"\n  *ngIf=\"!email.attributes.required\" class=\"skip-this-question skip-this-question-marginLeft\">Skip</span>\n</div>\n",
                styles: [".email-text-box{position:absolute;left:0;margin-left:1%}"]
            }] }
];
/** @nocollapse */
EmailComponent.ctorParameters = () => [
    { type: PagesService }
];
EmailComponent.propDecorators = {
    email: [{ type: Input }],
    submitEvent: [{ type: Output }],
    surveyResponse: [{ type: Input }],
    isLastQuestion: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/questionnaire/nps/nps.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NpsComponent {
    /**
     * @param {?} pageService
     */
    constructor(pageService) {
        this.pageService = pageService;
        this.submitEvent = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.pageService.stage == 'entry-next') {
            document.getElementById('nps-question').className = 'entry-next';
            document.getElementById('nps-question-delay').className = 'entry-next-delay';
        }
        else if (this.pageService.stage == 'entry-previous') {
            document.getElementById('nps-question').className = 'entry-previous-delay';
            document.getElementById('nps-question-delay').className = 'entry-previous';
        }
    }
    /**
     * @param {?} rating
     * @return {?}
     */
    onSelect(rating) {
        if (rating != undefined) {
            this.surveyResponse.question = this.npsQuestion.question;
            this.surveyResponse.questionType = this.npsQuestion.questionType;
            this.surveyResponse.identifier = this.npsQuestion.identifier;
            this.surveyResponse.questionId = this.npsQuestion.questionId;
            this.surveyResponse.rating = rating;
            this.pageService.persistSurvey(this.surveyResponse);
            document.getElementById('rating-' + rating).classList.add('blink-btn-animation');
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.submitEvent.emit();
            }), 350);
        }
        else {
            this.submitEvent.emit();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        /*this.surveyState*/
    }
}
NpsComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-nps',
                template: "<div id=\"nps-question\">\n\n<div class=\"survey-statement\"><u></u>\n  <span *ngIf=\"npsQuestion.attributes.required\" class=\"isRequired\">*</span>{{ npsQuestion.question }} </div>\n  <p class=\"question-description\" *ngIf=\"npsQuestion.attributes.isDescriptionEnabled\">\n  {{npsQuestion.attributes.description}}\n</p>\n</div>\n\n<div id=\"nps-question-delay\">\n<div class=\"nps-btn-group\">\n\n    <button id=\"rating-0\" class=\"btn-secondary nps-btn\" [ngClass]=\"{'nps-btn-focus':surveyResponse.rating==0 }\" (click)=\"onSelect(0)\">0</button>\n\n    <button id=\"rating-1\" class=\"btn-secondary nps-btn\" [ngClass]=\"{'nps-btn-focus':surveyResponse.rating==1 }\" (click)=\"onSelect(1)\">1</button>\n\n    <button id=\"rating-2\" class=\"btn-secondary nps-btn\" [ngClass]=\"{'nps-btn-focus':surveyResponse.rating==2 }\" (click)=\"onSelect(2)\">2</button>\n\n    <button id=\"rating-3\" class=\"btn-secondary nps-btn\" [ngClass]=\"{'nps-btn-focus':surveyResponse.rating==3 }\" (click)=\"onSelect(3)\">3</button>\n\n    <button id=\"rating-4\" class=\"btn-secondary nps-btn\" [ngClass]=\"{'nps-btn-focus':surveyResponse.rating==4 }\" (click)=\"onSelect(4)\">4</button>\n\n    <button id=\"rating-5\" class=\"btn-secondary nps-btn\" [ngClass]=\"{'nps-btn-focus':surveyResponse.rating==5 }\" (click)=\"onSelect(5)\">5</button>\n\n    <button id=\"rating-6\" class=\"btn-secondary nps-btn\" [ngClass]=\"{'nps-btn-focus':surveyResponse.rating==6 }\" (click)=\"onSelect(6)\">6</button>\n\n    <button id=\"rating-7\" class=\"btn-secondary nps-btn\" [ngClass]=\"{'nps-btn-focus':surveyResponse.rating==7 }\" (click)=\"onSelect(7)\">7</button>\n\n    <button id=\"rating-8\" class=\"btn-secondary nps-btn\" [ngClass]=\"{'nps-btn-focus':surveyResponse.rating==8 }\" (click)=\"onSelect(8)\">8</button>\n\n    <button id=\"rating-9\" class=\"btn-secondary nps-btn\" [ngClass]=\"{'nps-btn-focus':surveyResponse.rating==9 }\" (click)=\"onSelect(9)\">9</button>\n\n    <button id=\"rating-10\" class=\"btn-secondary nps-btn\" [ngClass]=\"{'nps-btn-focus':surveyResponse.rating==10 }\" (click)=\"onSelect(10)\">10</button>\n\n</div>\n<div class=\"nps-legend\">\n  <span id=\"left-nps-label\">{{npsQuestion.attributes.leftLabel}}</span>\n  <span id=\"center-nps-label\">{{npsQuestion.attributes.centerLabel}}</span>\n  <span id=\"right-nps-label\">{{npsQuestion.attributes.rightLabel}}</span>\n</div>\n\n<div  class=\"skip-this-question\" style=\"margin-top:8%;\" *ngIf=\"!npsQuestion.attributes.required\">\n  <span (click)=\"onSelect(undefined)\" >Skip</span>\n</div>\n\n</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
NpsComponent.ctorParameters = () => [
    { type: PagesService }
];
NpsComponent.propDecorators = {
    npsQuestion: [{ type: Input }],
    surveyResponse: [{ type: Input }],
    submitEvent: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/questionnaire/date/date.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DateComponent {
    /**
     * @param {?} pageService
     */
    constructor(pageService) {
        this.pageService = pageService;
        this.submitEvent = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.platform = navigator.platform;
        console.log(navigator.platform);
        if (this.pageService.stage == 'entry-next') {
            document.getElementById('date-question').className = 'entry-next';
            document.getElementById('date-question-delay').className = 'entry-next-delay';
        }
        else if (this.pageService.stage == 'entry-previous') {
            document.getElementById('date-question').className = 'entry-previous-delay';
            document.getElementById('date-question-delay').className = 'entry-previous';
        }
    }
    /**
     * @param {?} date
     * @return {?}
     */
    onDateSelect(date) {
        if (date != undefined) {
            this.surveyResponse.questionId = this.dateQuestion.questionId;
            this.surveyResponse.question = this.dateQuestion.question;
            this.surveyResponse.questionType = this.dateQuestion.questionType;
            this.surveyResponse.identifier = this.dateQuestion.identifier;
            this.surveyResponse.answer = date;
            this.pageService.persistSurvey(this.surveyResponse);
            document.getElementById('input').classList.add('blink-btn-animation');
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.submitEvent.emit();
            }), 350);
        }
        else {
            this.submitEvent.emit();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
}
DateComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-date',
                template: "\n<div id=\"date-question\">\n<div class=\"survey-statement\">  <span *ngIf=\"dateQuestion.attributes.required\" class=\"isRequired\">*</span>{{dateQuestion.question}}</div>\n<p class=\"question-description\">\n        {{dateQuestion.attributes.description}}\n      </p>\n</div>\n\n<div id=\"date-question-delay\">\n  <!-- for IOS device function will be fired on (blur) -->\n<input *ngIf=\"platform == ('iPhone' || 'iPad')\" type=\"date\" id=\"input\" style=\"display:inline-block\" [(ngModel)]=\"surveyResponse.answer\"\n       (blur)=\"onDateSelect($event.target.value)\">\n  <!-- for IOS device function will be fired on (input) -->\n  <input *ngIf=\"platform !== 'iPhone'\" type=\"date\" id=\"input\" style=\"display:inline-block\" [(ngModel)]=\"surveyResponse.answer\"\n         (input)=\"onDateSelect($event.target.value)\">\n\n  <span\n  (click)=\"onDateSelect(undefined)\"\n  *ngIf=\"!dateQuestion.attributes.required\" class=\"skip-this-question skip-this-question-marginLeft\">Skip</span>\n</div>\n",
                styles: ["[type=date]{background:var(--white-25) url(https://cdn1.iconfinder.com/data/icons/cc_mono_icon_set/blacks/16x16/calendar_2.png) 97% 50% no-repeat;height:2em;outline:0}input::-webkit-clear-button,input::-webkit-inner-spin-button{display:none}input::-webkit-calendar-picker-indicator{color:transparent;opacity:1}input::-webkit-calendar-picker-indicator:hover{background:var(--white-25);cursor:pointer}input{margin:10px 0 0;border:1px solid var(--white-25);background-color:var(--white-25);color:var(--text-color-secondary);padding:3px 5px;width:262px}"]
            }] }
];
/** @nocollapse */
DateComponent.ctorParameters = () => [
    { type: PagesService }
];
DateComponent.propDecorators = {
    dateQuestion: [{ type: Input }],
    submitEvent: [{ type: Output }],
    surveyResponse: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/questionnaire/rating/rating.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RatingComponent {
    /**
     * @param {?} pageService
     */
    constructor(pageService) {
        this.pageService = pageService;
        this.submitEvent = new EventEmitter();
        this.isActive = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.pageService.stage == 'entry-next') {
            document.getElementById('rating-question').className = 'entry-next';
            document.getElementById('rating-question-delay').className = 'entry-next-delay';
        }
        else if (this.pageService.stage == 'entry-previous') {
            document.getElementById('rating-question').className = 'entry-previous-delay';
            document.getElementById('rating-question-delay').className = 'entry-previous';
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        console.log(this.ratingQuestion.attributes.steps.length);
        if (this.ratingQuestion.attributes.steps.length > 6) {
            /** @type {?} */
            let els = document.getElementsByTagName("label");
            console.log(els[0]);
            for (let i = 0, all = els.length; i < all; i++) {
                els[i].classList.add('ratingIconAbove6');
            }
        }
    }
    /**
     * @param {?} rating
     * @return {?}
     */
    onRatingSelect(rating) {
        console.warn(rating);
        this.isActive = true;
        this.surveyResponse.question = this.ratingQuestion.question;
        this.surveyResponse.questionType = this.ratingQuestion.questionType;
        this.surveyResponse.questionId = this.ratingQuestion.questionId;
        this.surveyResponse.rating = rating;
        this.surveyResponse.identifier = this.ratingQuestion.identifier;
        this.pageService.persistSurvey(this.surveyResponse);
        console.log(this.ratingQuestion.attributes.ratingIcon);
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.submitEvent.emit();
        }), 350);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
}
RatingComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-rating',
                template: "<div id=\"rating-question\">\n<div class=\"survey-statement\">\n  <span *ngIf=\"ratingQuestion.attributes.required\" class=\"isRequired\">*</span>{{ratingQuestion.question}}</div>\n  <p class=\"question-description\" [ngStyle]=\"{'display':'ratingQuestion.attributes.description == undefined' ? 'none' :'block'}\">\n  {{ratingQuestion.attributes.description}}\n</p>\n\n</div>\n\n\n\n<div id=\"rating-question-delay\">\n<div class=\"rating\">\n    <ng-container *ngFor=\"let step of ratingQuestion.attributes.steps; let stepIndex = index\">\n      <input type=\"radio\" [id]=\"ratingQuestion.attributes.steps.length - stepIndex+'rating'\"\n             [value]=\"step.value\"\n             [(ngModel)]=\"surveyResponse.rating\"\n             (click)=\"onRatingSelect(step.value); $event.stopPropagation()\"\n             name=\"star-rating\" >\n      <label [for] = \"ratingQuestion.attributes.steps.length - stepIndex+'rating'\">\n        <div *ngIf=\"ratingQuestion.attributes.ratingIcon == 'star'\">\n          <svg class=\"ratingOutlineIcon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" height=\"30\" viewBox=\"0 0 24 24\"><path d=\"M15.668 8.626l8.332 1.159-6.065 5.874 1.48 8.341-7.416-3.997-7.416 3.997 1.481-8.341-6.064-5.874 8.331-1.159 3.668-7.626 3.669 7.626zm-6.67.925l-6.818.948 4.963 4.807-1.212 6.825 6.068-3.271 6.069 3.271-1.212-6.826 4.964-4.806-6.819-.948-3.002-6.241-3.001 6.241z\"/></svg>\n          <svg class=\"ratingFillIcon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" height=\"30\" viewBox=\"0 0 24 24\"><path d=\"M12 .587l3.668 7.568 8.332 1.151-6.064 5.828 1.48 8.279-7.416-3.967-7.417 3.967 1.481-8.279-6.064-5.828 8.332-1.151z\"/></svg>\n        </div>\n        <div *ngIf=\"ratingQuestion.attributes.ratingIcon == 'heart'\">\n          <svg class=\"ratingOutlineIcon\" width=\"30\" height=\"30\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M12 21.593c-5.63-5.539-11-10.297-11-14.402 0-3.791 3.068-5.191 5.281-5.191 1.312 0 4.151.501 5.719 4.457 1.59-3.968 4.464-4.447 5.726-4.447 2.54 0 5.274 1.621 5.274 5.181 0 4.069-5.136 8.625-11 14.402m5.726-20.583c-2.203 0-4.446 1.042-5.726 3.238-1.285-2.206-3.522-3.248-5.719-3.248-3.183 0-6.281 2.187-6.281 6.191 0 4.661 5.571 9.429 12 15.809 6.43-6.38 12-11.148 12-15.809 0-4.011-3.095-6.181-6.274-6.181\"/></svg>\n          <svg class=\"ratingFillIcon\" width=\"30\" height=\"30\" xmlns=\"http://www.w3.org/2000/svg\"  viewBox=\"0 0 24 24\"><path d=\"M12 4.248c-3.148-5.402-12-3.825-12 2.944 0 4.661 5.571 9.427 12 15.808 6.43-6.381 12-11.147 12-15.808 0-6.792-8.875-8.306-12-2.944z\"/></svg>\n        </div>\n        <div *ngIf=\"ratingQuestion.attributes.ratingIcon == 'thumbsUp'\">\n          <svg class=\"ratingOutlineIcon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" height=\"30\" viewBox=\"0 0 24 24\"><path d=\"M21.406 9.558c-1.21-.051-2.87-.278-3.977-.744.809-3.283 1.253-8.814-2.196-8.814-1.861 0-2.351 1.668-2.833 3.329-1.548 5.336-3.946 6.816-6.4 7.401v-.73h-6v12h6v-.904c2.378.228 4.119.864 6.169 1.746 1.257.541 3.053 1.158 5.336 1.158 2.538 0 4.295-.997 5.009-3.686.5-1.877 1.486-7.25 1.486-8.25 0-1.648-1.168-2.446-2.594-2.506zm-17.406 10.442h-2v-8h2v8zm15.896-5.583s.201.01 1.069-.027c1.082-.046 1.051 1.469.004 1.563l-1.761.099c-.734.094-.656 1.203.141 1.172 0 0 .686-.017 1.143-.041 1.068-.056 1.016 1.429.04 1.551-.424.053-1.745.115-1.745.115-.811.072-.706 1.235.109 1.141l.771-.031c.822-.074 1.003.825-.292 1.661-1.567.881-4.685.131-6.416-.614-2.239-.965-4.438-1.934-6.959-2.006v-6c3.264-.749 6.328-2.254 8.321-9.113.898-3.092 1.679-1.931 1.679.574 0 2.071-.49 3.786-.921 5.533 1.061.543 3.371 1.402 6.12 1.556 1.055.059 1.024 1.455-.051 1.584l-1.394.167s-.608 1.111.142 1.116z\"/></svg>\n          <svg class=\"ratingFillIcon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" height=\"30\" viewBox=\"0 0 24 24\"><path d=\"M5 22h-5v-12h5v12zm17.615-8.412c-.857-.115-.578-.734.031-.922.521-.16 1.354-.5 1.354-1.51 0-.672-.5-1.562-2.271-1.49-1.228.05-3.666-.198-4.979-.885.906-3.656.688-8.781-1.688-8.781-1.594 0-1.896 1.807-2.375 3.469-1.221 4.242-3.312 6.017-5.687 6.885v10.878c4.382.701 6.345 2.768 10.505 2.768 3.198 0 4.852-1.735 4.852-2.666 0-.335-.272-.573-.96-.626-.811-.062-.734-.812.031-.953 1.268-.234 1.826-.914 1.826-1.543 0-.529-.396-1.022-1.098-1.181-.837-.189-.664-.757.031-.812 1.133-.09 1.688-.764 1.688-1.41 0-.565-.424-1.109-1.26-1.221z\"/></svg>\n        </div>\n      </label>\n    </ng-container>\n</div>\n\n  <div style=\"margin-top:2%\" class=\"skip-this-question\" *ngIf=\"!ratingQuestion.attributes.required\">\n  <span (click)=\"onRatingSelect(undefined)\">Skip</span>\n  </div>\n\n</div>\n\n",
                styles: [""]
            }] }
];
/** @nocollapse */
RatingComponent.ctorParameters = () => [
    { type: PagesService }
];
RatingComponent.propDecorators = {
    ratingQuestion: [{ type: Input }],
    surveyResponse: [{ type: Input }],
    submitEvent: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/questionnaire/drop-down/drop-down.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DropDownComponent {
    /**
     * @param {?} pageService
     */
    constructor(pageService) {
        this.pageService = pageService;
        this.submitEvent = new EventEmitter();
    }
    /**
     * @param {?} text
     * @return {?}
     */
    onSelect(text) {
        if (text != undefined) {
            this.surveyResponse.question = this.dropDown.question;
            this.surveyResponse.questionType = this.dropDown.questionType;
            this.surveyResponse.questionId = this.dropDown.questionId;
            this.surveyResponse.answerId = this.getChoiceIdByText(text);
            this.surveyResponse.identifier = this.dropDown.identifier;
            this.surveyResponse.answer = text;
            this.pageService.persistSurvey(this.surveyResponse);
            document.getElementById('input').classList.add('blink-btn-animation');
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.submitEvent.emit();
            }), 350);
        }
        else {
            this.submitEvent.emit();
        }
    }
    /**
     * @private
     * @param {?} choiceId
     * @return {?}
     */
    getChoiceById(choiceId) {
        /** @type {?} */
        let index = this.dropDown.choices.findIndex((/**
         * @param {?} choice
         * @return {?}
         */
        choice => choice.choiceId == choiceId));
        return this.dropDown.choices[index].text;
    }
    /**
     * @private
     * @param {?} text
     * @return {?}
     */
    getChoiceIdByText(text) {
        /** @type {?} */
        let index = this.dropDown.choices.findIndex((/**
         * @param {?} choice
         * @return {?}
         */
        choice => choice.text == text));
        return this.dropDown.choices[index].choiceId;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.pageService.stage == 'entry-next') {
            document.getElementById('drop-down-question').className = 'entry-next';
            document.getElementById('drop-down-question-delay').className = 'entry-next-delay';
        }
        else if (this.pageService.stage == 'entry-previous') {
            document.getElementById('drop-down-question').className = 'entry-previous-delay';
            document.getElementById('drop-down-question-delay').className = 'entry-previous';
        }
    }
    /**
     * @return {?}
     */
    toggleCustomDropDown() {
        document.getElementById('select-options').classList.toggle('visible');
        document.getElementById('skipBtn').classList.toggle('invisible');
    }
    /**
     * @param {?} text
     * @param {?} i
     * @return {?}
     */
    onDropDownSelection(text, i) {
        /** @type {?} */
        let selectedOptionsEl = document.getElementsByTagName('li');
        selectedOptionsEl[i].classList.add('selected');
        for (let j = 0; j < selectedOptionsEl.length; j++) {
            if (i == j) {
                selectedOptionsEl[j].classList.add('selected');
            }
            else {
                selectedOptionsEl[j].classList.remove('selected');
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
}
DropDownComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-drop-down',
                template: "<div id=\"drop-down-question\">\n<div class=\"survey-statement\">\n    <span *ngIf=\"dropDown.attributes.required\" class=\"isRequired\">*</span>{{dropDown.question}}\n</div>\n<p class=\"question-description\">\n    {{dropDown.attributes.description}}\n  </p>\n\n</div>\n\n\n<div id=\"drop-down-question-delay\">\n  <div>\n  <div style=\"display: inline-block\" class=\"select\" (click)=\"toggleCustomDropDown()\">\n    <div class=\"input\" id=\"input\">{{surveyResponse.answer == undefined ? 'Please select' : surveyResponse.answer }}</div>\n    <div class=\"select-options\" id=\"select-options\">\n      <ul>\n        <li (click)=\"onSelect(choice.text); onDropDownSelection(choice.text, index)\" *ngFor=\"let choice of dropDown.choices; let index = index\"\n            [ngClass]=\"surveyResponse.answer == choice.text ? 'selected':''\"\n        >\n          <span>{{choice.text}}</span>\n        </li>\n      </ul>\n    </div>\n  </div>\n\n  <span\n    (click)=\"onSelect(undefined)\"\n    *ngIf=\"!dropDown.attributes.required\" id=\"skipBtn\" class=\"skip-this-question skip-this-question-marginLeft\">Skip</span>\n</div>\n\n</div>\n",
                styles: [".invisible{display:none}"]
            }] }
];
/** @nocollapse */
DropDownComponent.ctorParameters = () => [
    { type: PagesService }
];
DropDownComponent.propDecorators = {
    dropDown: [{ type: Input }],
    surveyResponse: [{ type: Input }],
    submitEvent: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/questionnaire/contact-form/contact-form.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ContactFormComponent {
    /**
     * @param {?} pagesService
     */
    constructor(pagesService) {
        this.pagesService = pagesService;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.createForm();
    }
    /**
     * @return {?}
     */
    createForm() {
        /** @type {?} */
        const formGroup = {};
        for (let prop of Object.keys(this.contactForm.contactForm)) {
            formGroup[prop] = new FormControl(this.contactForm.contactForm[prop].value || '', ContactFormComponent.mapValidators(this.contactForm.contactForm[prop].validation));
        }
        this.form = new FormGroup(formGroup);
    }
    /**
     * @private
     * @param {?} validators
     * @return {?}
     */
    static mapValidators(validators) {
        /** @type {?} */
        const formValidators = [];
        if (validators) {
            for (const validation of Object.keys(validators)) {
                if (validation === 'required') {
                    formValidators.push(Validators.required);
                }
                else if (validation === 'min') {
                    formValidators.push(Validators.min(validators[validation]));
                }
            }
        }
        return formValidators;
    }
    /**
     * @return {?}
     */
    onSubmit() {
        this.response.contactInfo = this.objectProps;
        this.response.questionId = this.contactForm.questionId;
        this.pagesService.persistSurvey(this.response);
        //console.log(this.dataObject);
        /*  for (let controlsKey in this.form.controls) {
            this.dataObject[controlsKey].value = form[controlsKey];
          }
          console.log(this.dataObject);
          this.response.questionId = this.contactForm.questionId;*/
        //this.response.contactInfo
    }
}
ContactFormComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-contact-form',
                template: "\n<div>\n\n  <form novalidate (ngSubmit)=\"onSubmit()\" [formGroup]=\"form\">\n    <div *ngFor=\"let prop of objectProps\">\n      <label [attr.for]=\"prop\">{{prop.label}}</label>\n\n      <div [ngSwitch]=\"prop.type\">\n        <input *ngSwitchCase=\"'text'\"\n               [formControlName]=\"prop.key\"\n               [id]=\"prop.key\" [type]=\"prop.type\"\n               [(ngModel)] = \"prop.value\">\n\n      </div>\n<!--\n      <div class=\"error\" *ngIf=\"form.get(prop.key).invalid && (form.get(prop.key).dirty || form.get(prop.key).touched)\">\n        <div *ngIf=\"form.get(prop.key).errors.required\">\n          <h6>{{ prop.label }} is required.</h6>\n        </div>\n      </div>-->\n\n\n    </div>\n    <p>\n      <button type=\"submit\">Done</button>\n    </p>\n  </form>\n\n</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
ContactFormComponent.ctorParameters = () => [
    { type: PagesService }
];
ContactFormComponent.propDecorators = {
    contactForm: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/questionnaire/address/address.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AddressComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
AddressComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-address',
                template: "<div>\n  <span *ngIf=\"addressForm.questionType == 'Address Form'\">\n    <span *ngIf=\"addressForm.attributes.required\" class=\"isRequired\">*</span>\n    {{addressForm.question}}\n  </span>\n  <table *ngFor=\"let address of addressForm.addressForm; index as addressIndex\">\n    <tr>\n      <td *ngIf=\"address.text == 'Street 1'\">\n        <label for=\"street 1\">\n          <input type=\"text\" id=\"street 1\" placeholder=\"Street 1\">\n        </label>\n      </td>\n\n      <td *ngIf=\"address.text == 'Street 2'\">\n        <label for=\"street 2\">\n          <input type=\"text\" id=\"street 2\" placeholder=\"Street 2\">\n        </label>\n      </td>\n\n      <td *ngIf=\"address.text == 'City'\">\n        <label for=\"city\">\n          <input type=\"text\" id=\"city\" placeholder=\"City\">\n        </label>\n      </td>\n\n      <td *ngIf=\"address.text == 'State'\">\n        <label for=\"state\">\n          <input type=\"text\" id=\"state\" placeholder=\"State\">\n        </label>\n      </td>\n\n      <td *ngIf=\"address.text == 'Country'\">\n        <label for=\"country\">\n          <input type=\"text\" id=\"country\" placeholder=\"Country\">\n        </label>\n      </td>\n\n      <td *ngIf=\"address.text == 'Zip code'\">\n        <label for=\"zip-code\">\n          <input type=\"text\" id=\"zip-code\" placeholder=\"Zip code\">\n        </label>\n      </td>\n\n    </tr>\n  </table>\n</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
AddressComponent.ctorParameters = () => [];
AddressComponent.propDecorators = {
    addressForm: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/questionnaire/phone/phone.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PhoneComponent {
    /**
     * @param {?} pageService
     */
    constructor(pageService) {
        this.pageService = pageService;
        this.submitEvent = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.pageService.stage == 'entry-next') {
            document.getElementById('phone-question').className = 'entry-next';
            document.getElementById('phone-question-delay').className = 'entry-next-delay';
        }
        else if (this.pageService.stage == 'entry-previous') {
            document.getElementById('phone-question').className = 'entry-previous-delay';
            document.getElementById('phone-question-delay').className = 'entry-previous';
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onSubmit(value) {
        if (value != undefined) {
            this.surveyResponse.questionId = this.phone.questionId;
            this.surveyResponse.question = this.phone.question;
            this.surveyResponse.questionType = this.phone.questionType;
            this.surveyResponse.identifier = this.phone.identifier;
            this.surveyResponse.answer = value;
            this.pageService.persistSurvey(this.surveyResponse);
            document.getElementById('btn-primary').classList.add('blink-btn-animation');
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.submitEvent.emit();
            }), 350);
        }
        else {
            this.submitEvent.emit();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
}
PhoneComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-phone',
                template: "<div id=\"phone-question\">\n<div class=\"survey-statement\">\n  <span *ngIf=\"phone.attributes.required\" style=\"color:red;margin-right: 0.5%\">*</span>{{phone.question}}\n</div>\n\n<p class=\"question-description\">\n  {{phone.attributes.description}}\n</p>\n</div>\n\n\n\n<div id=\"phone-question-delay\">\n<input class=\"survey-input-text-box\"\n  #phoneInput\n  type=\"number\"\n  name=\"phone\"\n  [(ngModel)]=\"surveyResponse.answer\"\n  onfocus=\"this.placeholder=''\"\n  placeholder=\"Enter valid phone number\">\n<button class=\"btn-primary\" id=\"btn-primary\" (click)=\"onSubmit(phoneInput.value)\">{{isLastQuestion?'Submit': 'Done'}}</button>\n<span\n  (click)=\"onSubmit(undefined)\"\n  *ngIf=\"!phone.attributes.required\" class=\"skip-this-question skip-this-question-marginLeft\">Skip</span>\n</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
PhoneComponent.ctorParameters = () => [
    { type: PagesService }
];
PhoneComponent.propDecorators = {
    phone: [{ type: Input }],
    surveyResponse: [{ type: Input }],
    submitEvent: [{ type: Output }],
    isLastQuestion: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/questionnaire/name/name.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NameComponent {
    /**
     * @param {?} pageService
     */
    constructor(pageService) {
        this.pageService = pageService;
        this.submitEvent = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.pageService.stage == 'entry-next') {
            document.getElementById('name-question').className = 'entry-next';
            document.getElementById('name-question-delay').className = 'entry-next-delay';
        }
        else if (this.pageService.stage == 'entry-previous') {
            document.getElementById('name-question').className = 'entry-previous-delay';
            document.getElementById('name-question-delay').className = 'entry-previous';
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onSubmit(value) {
        if (value != undefined) {
            this.surveyResponse.questionId = this.name.questionId;
            this.surveyResponse.question = this.name.question;
            this.surveyResponse.questionType = this.name.questionType;
            this.surveyResponse.identifier = this.name.identifier;
            this.surveyResponse.answer = value;
            this.pageService.persistSurvey(this.surveyResponse);
            document.getElementById('btn-primary').classList.add('blink-btn-animation');
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.submitEvent.emit();
            }), 350);
        }
        else {
            this.submitEvent.emit();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
}
NameComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-name',
                template: "<div id=\"name-question\">\n<div class=\"survey-statement\">\n  <span *ngIf=\"name.attributes.required\" class=\"isRequired\">*</span>{{name.question}}\n</div>\n<p class=\"question-description\">\n  {{name.attributes.description}}\n</p>\n</div>\n\n\n\n<div id=\"name-question-delay\">\n<input class=\"survey-input-text-box\"\n  #nameInput\n  type=\"text\" name=\"name\"\n  [(ngModel)]=\"surveyResponse.answer\" onfocus=\"this.placeholder=''\"\n  placeholder=\"Enter first name followed by last name\">\n<button class=\"btn-primary\" id=\"btn-primary\" type=\"submit\" name=\"name\" (click)=\"onSubmit(nameInput.value)\">Done</button>\n<span\n  *ngIf=\"!name.attributes.required\"\n  (click)=\"onSubmit(undefined)\"\n  class=\"skip-this-question\">Skip</span>\n</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
NameComponent.ctorParameters = () => [
    { type: PagesService }
];
NameComponent.propDecorators = {
    name: [{ type: Input }],
    surveyResponse: [{ type: Input }],
    submitEvent: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/questionnaire/agree-disagree/agree-disagree.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AgreeDisagreeComponent {
    /**
     * @param {?} pageService
     */
    constructor(pageService) {
        this.pageService = pageService;
        this.submitEvent = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.pageService.stage == 'entry-next') {
            document.getElementById('agree-disagree-question').className = 'entry-next';
            document.getElementById('agree-disagree-question-delay').className = 'entry-next-delay';
        }
        else if (this.pageService.stage == 'entry-previous') {
            document.getElementById('agree-disagree-question').className = 'entry-previous-delay';
            document.getElementById('agree-disagree-question-delay').className = 'entry-previous';
        }
    }
    /**
     * @param {?} answer
     * @return {?}
     */
    onSubmit(answer) {
        if (answer != undefined) {
            this.surveyResponse.questionId = this.agreeDisagree.questionId;
            this.surveyResponse.question = this.agreeDisagree.question;
            this.surveyResponse.questionType = this.agreeDisagree.questionType;
            this.surveyResponse.identifier = this.agreeDisagree.identifier;
            this.surveyResponse.answer = answer;
            this.pageService.persistSurvey(this.surveyResponse);
            answer == 'Agree' ? document.getElementById('agree').classList.add('blink-btn-animation') : '';
            answer == 'Disagree' ? document.getElementById('disagree').classList.add('blink-btn-animation') : '';
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.submitEvent.emit();
            }), 350);
        }
        else {
            this.submitEvent.emit();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
}
AgreeDisagreeComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-agree-disagree',
                template: "<div id=\"agree-disagree-question\">\n<div class=\"survey-statement\">\n  <span *ngIf=\"agreeDisagree.attributes.required\" class=\"isRequired\">*</span>{{agreeDisagree.question}}\n</div>\n<p class=\"question-description\">\n  {{agreeDisagree.attributes.description}}\n</p>\n</div>\n\n\n<div id=\"agree-disagree-question-delay\">\n<button id=\"agree\"\n  [ngClass]=\"surveyResponse.answer == 'Agree'?'btn-secondary agree-disagree-btn btn-focused-state':'btn-secondary agree-disagree-btn'\"\n  (click)=\"onSubmit('Agree')\"><span [ngClass]=\"surveyResponse.answer == 'Agree'?'checkmark checkmark-checked':'checkmark'\"></span><span style=\"margin-left: 10px;\">AGREE</span>\n</button>\n\n<button id=\"disagree\"\n  [ngClass]=\"surveyResponse.answer == 'Disagree'?'btn-secondary agree-disagree-btn btn-focused-state':'btn-secondary agree-disagree-btn'\"\n  (click)=\"onSubmit('Disagree')\"><span [ngClass]=\"surveyResponse.answer == 'Disagree'?'crossmark crossmark-checked':'crossmark'\"></span><span>DISAGREE</span>\n</button>\n\n<div style=\"margin-top: 2%;\" class=\"skip-this-question\" *ngIf=\"!agreeDisagree.attributes.required\">\n  <span (click)=\"onSubmit(undefined)\" >Skip</span>\n</div>\n</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
AgreeDisagreeComponent.ctorParameters = () => [
    { type: PagesService }
];
AgreeDisagreeComponent.propDecorators = {
    agreeDisagree: [{ type: Input }],
    surveyResponse: [{ type: Input }],
    submitEvent: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/store/survey-actions.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const SAVE_CHOICE = 'save_choice';
/** @type {?} */
const SAVE_EMAIL = 'save_email';
/** @type {?} */
const SAVE_AGREE_DISAGREE = 'save_agree_disagree';
/** @type {?} */
const SAVE_PHONE = 'save_phone';
/** @type {?} */
const SAVE_ADDRESS = 'save_address';
/** @type {?} */
const SAVE_DATE = 'save_date';
/** @type {?} */
const SAVE_NPS = 'save_nps';
/** @type {?} */
const SAVE_YES_NO = 'save_yes_no';
/** @type {?} */
const SAVE_RATING = 'save_rating';
/** @type {?} */
const SAVE_LONG_TEXT = 'save_long_text';
/** @type {?} */
const SAVE_SHORT_TEXT = 'save_short_text';
/** @type {?} */
const RESET_RESPONSE = 'reset_response';
/** @type {?} */
const REMOVE_RESPONSES = 'remove_responses';
/** @type {?} */
const REMOVE_RESPONSES_OF_EXCLUDED_QUESTION_IDS = 'remove_responses_of_excluded_question_ids';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/store/survey.reducers.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
let surveyResponseInitialState = [];
/** @type {?} */
const INITIAL_STATE = {
    response: surveyResponseInitialState
};
/**
 * @param {?=} state
 * @param {?=} action
 * @return {?}
 */
function surveyReducers(state = INITIAL_STATE, action) {
    console.log(state);
    switch (action.type) {
        case SAVE_CHOICE:
            return Object.assign({}, state, { response: getResponse(state.response, action.payload) });
        case SAVE_NPS:
            return Object.assign({}, state, { response: getResponse(state.response, action.payload) });
        case SAVE_YES_NO:
            return Object.assign({}, state, { response: getResponse(state.response, action.payload) });
        case SAVE_RATING:
            return Object.assign({}, state, { response: getResponse(state.response, action.payload) });
        case SAVE_DATE:
            return Object.assign({}, state, { response: getResponse(state.response, action.payload) });
        case SAVE_EMAIL:
            return Object.assign({}, state, { response: getResponse(state.response, action.payload) });
        case SAVE_PHONE:
            return Object.assign({}, state, { response: getResponse(state.response, action.payload) });
        case SAVE_AGREE_DISAGREE:
            return Object.assign({}, state, { response: getResponse(state.response, action.payload) });
        case SAVE_LONG_TEXT:
            return Object.assign({}, state, { response: getResponse(state.response, action.payload) });
        case SAVE_SHORT_TEXT:
            return Object.assign({}, state, { response: getResponse(state.response, action.payload) });
        case SAVE_ADDRESS:
            return Object.assign({}, state, { response: getResponse(state.response, action.payload) });
        case REMOVE_RESPONSES:
            return Object.assign({}, state, { response: removeResponse(state.response, action.payload) });
        case REMOVE_RESPONSES_OF_EXCLUDED_QUESTION_IDS:
            return Object.assign({}, state, { response: removeResponsesOfExcludedQuestionIds(state.response, action.payload) });
        case RESET_RESPONSE:
            return INITIAL_STATE;
        default:
            console.log(JSON.stringify(state));
            return state;
    }
}
/**
 * @param {?} responses
 * @param {?} payload
 * @return {?}
 */
function removeResponse(responses, payload) {
    responses.splice(responses.findIndex((/**
     * @param {?} response
     * @return {?}
     */
    response => response.questionId == payload)), 1);
    return responses;
}
/**
 * @param {?} response
 * @param {?} payload
 * @return {?}
 */
function getResponse(response, payload) {
    /** @type {?} */
    let index = response.findIndex((/**
     * @param {?} question
     * @return {?}
     */
    question => question.identifier == payload.identifier));
    if (index == undefined || index < 0) {
        return [...response, payload];
    }
    else {
        response[index] = payload;
        return response;
    }
}
/**
 * @param {?} responses
 * @param {?} payload
 * @return {?}
 */
function removeResponsesOfExcludedQuestionIds(responses, payload) {
    return responses.filter((/**
     * @param {?} response
     * @return {?}
     */
    response => payload.find((/**
     * @param {?} questionId
     * @return {?}
     */
    questionId => questionId == response.questionId))));
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/questionnaire/website/website.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WebsiteComponent {
    /**
     * @param {?} pageService
     */
    constructor(pageService) {
        this.pageService = pageService;
        this.URL_REGEXP = new RegExp('^[A-Za-z][A-Za-z\\d.+-]*:\\/*(?:\\w+(?::\\w+)?@)?[^\\s/]+(?::\\d+)?(?:\\/[\\w#!:.?+=&%@\\-/]*)?$');
        this.submitEvent = new EventEmitter();
        this.isValidUrl = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.pageService.stage == 'entry-next') {
            document.getElementById('website-question').className = 'entry-next';
            document.getElementById('website-question-delay').className = 'entry-next-delay';
        }
        else if (this.pageService.stage == 'entry-previous') {
            document.getElementById('website-question').className = 'entry-previous-delay';
            document.getElementById('website-question-delay').className = 'entry-previous';
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onSubmit(value) {
        console.log(value);
        if (value != undefined) {
            this.isValidUrl = this.test(value);
            if (this.isValidUrl) {
                this.surveyResponse.questionId = this.website.questionId;
                this.surveyResponse.question = this.website.question;
                this.surveyResponse.questionType = this.website.questionType;
                this.surveyResponse.identifier = this.website.identifier;
                this.surveyResponse.answer = value;
                this.pageService.persistSurvey(this.surveyResponse);
                document.getElementById('btn-primary').classList.add('blink-btn-animation');
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.submitEvent.emit();
                }), 350);
            }
        }
        else {
            this.submitEvent.emit();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    test(url) {
        return this.URL_REGEXP.test(url);
    }
}
WebsiteComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-website',
                template: "<div id=\"website-question\">\n<div class=\"survey-statement\">\n    <span *ngIf=\"website.attributes.required\" class=\"isRequired\">*</span>{{website.question}}\n</div>\n<p class=\"question-description\">\n    {{website.attributes.description}}\n  </p>\n</div>\n\n<div id=\"website-question-delay\">\n<input class=\"survey-input-text-box\" #websiteInput\n       type=\"url\"\n       name=\"name\"\n       [(ngModel)]=\"surveyResponse.answer\"\n       placeholder=\"Enter website url\">\n  <div *ngIf=\"!isValidUrl\" class=\"validation-error-msg\">Please enter valid URL</div>\n<button class=\"btn-primary\" id=\"btn-primary\" type=\"submit\" name=\"name\" (click)=\"onSubmit(websiteInput.value)\">{{isLastQuestion?'Submit': 'Done'}}</button>\n\n<span\n  (click)=\"onSubmit(undefined)\"\n  *ngIf=\"!website.attributes.required\" class=\"skip-this-question skip-this-question-marginLeft\">Skip</span>\n</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
WebsiteComponent.ctorParameters = () => [
    { type: PagesService }
];
WebsiteComponent.propDecorators = {
    website: [{ type: Input }],
    surveyResponse: [{ type: Input }],
    submitEvent: [{ type: Output }],
    isLastQuestion: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/questionnaire/number/number.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NumberComponent {
    /**
     * @param {?} pageService
     */
    constructor(pageService) {
        this.pageService = pageService;
        this.submitEvent = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.pageService.stage == 'entry-next') {
            document.getElementById('number-question').className = 'entry-next';
            document.getElementById('number-question-delay').className = 'entry-next-delay';
        }
        else if (this.pageService.stage == 'entry-previous') {
            document.getElementById('number-question').className = 'entry-previous-delay';
            document.getElementById('number-question-delay').className = 'entry-previous';
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onSubmit(value) {
        if (value != undefined) {
            this.surveyResponse.questionId = this.phone.questionId;
            this.surveyResponse.question = this.phone.question;
            this.surveyResponse.identifier = this.phone.identifier;
            this.surveyResponse.questionType = this.phone.questionType;
            this.surveyResponse.answer = value;
            this.pageService.persistSurvey(this.surveyResponse);
            document.getElementById('btn-primary').classList.add('blink-btn-animation');
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.submitEvent.emit();
            }), 350);
        }
        else {
            this.submitEvent.emit();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
}
NumberComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-number',
                template: "<div id=\"number-question\">\n<div class=\"survey-statement\">\n  <span *ngIf=\"phone.attributes.required\" class=\"isRequired\">*</span>{{phone.question}}\n</div>\n<p class=\"question-description\">\n  {{phone.attributes.description}}\n</p>\n</div>\n\n<div id=\"number-question-delay\">\n<input class=\"survey-input-text-box\"\n  #numberInput\n  type=\"number\"\n  name=\"number\"\n  [(ngModel)]=\"surveyResponse.answer\"\n  onfocus=\"this.placeholder=''\" placeholder=\"Number\">\n<button class=\"btn-primary\" id=\"btn-primary\" (click)=\"onSubmit(numberInput.value)\">{{isLastQuestion?'Submit': 'Done'}}</button>\n<span\n  (click)=\"onSubmit(undefined)\"\n  *ngIf=\"!phone.attributes.required\"\n  class=\"skip-this-question skip-this-question-marginLeft\">Skip</span>\n</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
NumberComponent.ctorParameters = () => [
    { type: PagesService }
];
NumberComponent.propDecorators = {
    phone: [{ type: Input }],
    surveyResponse: [{ type: Input }],
    submitEvent: [{ type: Output }],
    isLastQuestion: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/shared/pipe/shuffle.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ShufflePipe {
    /**
     * @param {?} items
     * @return {?}
     */
    transform(items) {
        if (!items)
            return [];
        return items.sort((/**
         * @return {?}
         */
        () => .1 - Math.random()));
    }
}
ShufflePipe.decorators = [
    { type: Pipe, args: [{
                name: 'shuffle',
                pure: false
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/shared/directives/auto-focus.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AutofocusDirective {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.el.nativeElement.focus();
    }
}
AutofocusDirective.decorators = [
    { type: Directive, args: [{
                selector: '[appAutofocus]'
            },] }
];
/** @nocollapse */
AutofocusDirective.ctorParameters = () => [
    { type: ElementRef }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/default-thank-you-page/default-thank-you-page.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DefaultThankYouPageComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
        //this.thankYouPage = PersistenceService.get(PagesComponent.CURRENT_PAGE);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
}
DefaultThankYouPageComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-default-thank-you-page',
                template: "<div\n  class=\"survey-container-wrap\">\n  <div class=\"survey-statement\">Thanks for the feedback!</div>\n</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
DefaultThankYouPageComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/survey-lib.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SurveyLibModule {
}
SurveyLibModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    SurveyLibComponent,
                    PagesComponent,
                    WelcomePageComponent,
                    QuestionnaireComponent,
                    ThankYouPageComponent,
                    ChoiceComponent,
                    YesNoComponent,
                    ShortTextComponent,
                    LongTextComponent,
                    StatementComponent,
                    EmailComponent,
                    NpsComponent,
                    DateComponent,
                    RatingComponent,
                    DropDownComponent,
                    ContactFormComponent,
                    AddressComponent,
                    PhoneComponent,
                    NameComponent,
                    AgreeDisagreeComponent,
                    WebsiteComponent,
                    NumberComponent,
                    DefaultThankYouPageComponent,
                    ShufflePipe,
                    AutofocusDirective
                ],
                imports: [
                    CommonModule,
                    ReactiveFormsModule,
                    FormsModule,
                    StoreModule.forRoot({ survey: surveyReducers })
                ],
                exports: [SurveyLibComponent],
                providers: [PagesService, PersistenceService],
                schemas: [CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: public_api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: survey-lib.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { SurveyLibService, CurrentElement, SurveyLibComponent, SurveyLibModule, PagesModel, SurveyContent, SelectedThemeModel, Font, Colors, Page, Question, Others, LogicJumps, Block, Condition, RankingItem, ContactForm, Validation, Column, Picture, AddressForm, Row, Attributes, Selection, Step, Choice, Properties, DefaultThankYouPageComponent as ɵw, PagesComponent as ɵb, AddressComponent as ɵq, AgreeDisagreeComponent as ɵt, ChoiceComponent as ɵf, ContactFormComponent as ɵp, DateComponent as ɵm, DropDownComponent as ɵo, EmailComponent as ɵk, LongTextComponent as ɵi, NameComponent as ɵs, NpsComponent as ɵl, NumberComponent as ɵv, PhoneComponent as ɵr, QuestionnaireComponent as ɵd, RatingComponent as ɵn, ShortTextComponent as ɵh, StatementComponent as ɵj, WebsiteComponent as ɵu, YesNoComponent as ɵg, surveyReducers as ɵz, ThankYouPageComponent as ɵe, WelcomePageComponent as ɵc, AutofocusDirective as ɵy, PagesService as ɵa, PersistenceService as ɵba, ShufflePipe as ɵx };

//# sourceMappingURL=survey-lib.js.map