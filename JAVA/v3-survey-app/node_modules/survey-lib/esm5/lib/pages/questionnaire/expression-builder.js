/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/questionnaire/expression-builder.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
var ExpressionBuilder = /** @class */ (function () {
    function ExpressionBuilder() {
        this.IS_EQUALS_TO = 'Is equals to';
        this.IS_NOT_EQUALS_TO = 'Is not equals to';
        this.IS_LESS_THAN = 'Is less than';
        this.IS_GREATER_THAN = 'Is greater than';
        this.IS_LESS_THAN_OR_EQUALS_TO = 'Is less than or equals to';
        this.IS_GREATER_THAN_OR_EQUALS_TO = 'Is grater than or equals to';
        this.IS = 'Is';
        this.IS_NOT = 'Is not';
        this.IS_ON = "Is on";
        this.IS_NOT_ON = "Is not on";
        this.IS_BEFORE = "Is before";
        this.IS_AFTER = "Is after";
        this.IS_BEFORE_OR_ON = "Is before or on";
        this.IS_AFTER_OR_ON = "Is after or on";
        this.IS_BETWEEN = "Is between";
        this.IS_BEGINS_WITH = "Is begins with";
        this.IS_ENDS_WITH = "Is ends with";
        this.CONTAINS = "Contains";
        this.DOES_NOT_CONTAINS = "Does not contains";
    }
    /**
     * @param {?} conditions
     * @param {?} responses
     * @param {?} questionType
     * @return {?}
     */
    ExpressionBuilder.prototype.build = /**
     * @param {?} conditions
     * @param {?} responses
     * @param {?} questionType
     * @return {?}
     */
    function (conditions, responses, questionType) {
        var e_1, _a, e_2, _b, e_3, _c, e_4, _d;
        /** @type {?} */
        var expression = '';
        switch (questionType) {
            case 'Drop down':
            case 'Choice':
                var _loop_1 = function (condition) {
                    /** @type {?} */
                    var result = this_1.evaluateChoiceConditions(condition, responses[responses.findIndex((/**
                     * @param {?} res
                     * @return {?}
                     */
                    function (res) { return res.questionId == condition._if; }))]);
                    if (condition.relationWithNextCondition != undefined)
                        expression += result + ' ' + condition.relationWithNextCondition + ' ';
                    else
                        expression += result + ' ';
                };
                var this_1 = this;
                try {
                    for (var conditions_1 = tslib_1.__values(conditions), conditions_1_1 = conditions_1.next(); !conditions_1_1.done; conditions_1_1 = conditions_1.next()) {
                        var condition = conditions_1_1.value;
                        _loop_1(condition);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (conditions_1_1 && !conditions_1_1.done && (_a = conditions_1.return)) _a.call(conditions_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                break;
            case 'Yes No':
                var _loop_2 = function (condition) {
                    /** @type {?} */
                    var result = this_2.evaluateYesNoConditions(condition, responses[responses.findIndex((/**
                     * @param {?} res
                     * @return {?}
                     */
                    function (res) { return res.questionId == condition._if; }))]);
                    if (condition.relationWithNextCondition != undefined)
                        expression += result + ' ' + condition.relationWithNextCondition + ' ';
                    else
                        expression += result + ' ';
                };
                var this_2 = this;
                try {
                    for (var conditions_2 = tslib_1.__values(conditions), conditions_2_1 = conditions_2.next(); !conditions_2_1.done; conditions_2_1 = conditions_2.next()) {
                        var condition = conditions_2_1.value;
                        _loop_2(condition);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (conditions_2_1 && !conditions_2_1.done && (_b = conditions_2.return)) _b.call(conditions_2);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                break;
            case 'Rating':
                var _loop_3 = function (i) {
                    /** @type {?} */
                    var result = this_3.evaluateRatingConditions(conditions[i], responses[responses.findIndex((/**
                     * @param {?} res
                     * @return {?}
                     */
                    function (res) { return res.questionId == conditions[i]._if; }))]);
                    console.warn(result);
                    if ((i + 1) < conditions.length) {
                        expression += result + ' ' + conditions[i].relationWithNextCondition + ' ';
                    }
                    else {
                        expression += result + ' ';
                    }
                };
                var this_3 = this;
                for (var i = 0; i < conditions.length; i++) {
                    _loop_3(i);
                }
                break;
            case 'Nps':
                var _loop_4 = function (i) {
                    /** @type {?} */
                    var result = this_4.evaluateNPSConditions(conditions[i], responses[responses.findIndex((/**
                     * @param {?} res
                     * @return {?}
                     */
                    function (res) { return res.questionId == conditions[i]._if; }))]);
                    console.warn(result);
                    if ((i + 1) < conditions.length) {
                        expression += result + ' ' + conditions[i].relationWithNextCondition + ' ';
                    }
                    else {
                        expression += result + ' ';
                    }
                };
                var this_4 = this;
                for (var i = 0; i < conditions.length; i++) {
                    _loop_4(i);
                }
                break;
            case 'Date':
                var _loop_5 = function (condition) {
                    /** @type {?} */
                    var result = this_5.evaluateDateConditions(condition, responses[responses.findIndex((/**
                     * @param {?} res
                     * @return {?}
                     */
                    function (res) { return res.questionId == condition._if; }))]);
                    if (condition.relationWithNextCondition != undefined) {
                        expression += result + ' ' + condition.relationWithNextCondition + ' ';
                    }
                    else {
                        expression += result + ' ';
                    }
                };
                var this_5 = this;
                try {
                    for (var conditions_3 = tslib_1.__values(conditions), conditions_3_1 = conditions_3.next(); !conditions_3_1.done; conditions_3_1 = conditions_3.next()) {
                        var condition = conditions_3_1.value;
                        _loop_5(condition);
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (conditions_3_1 && !conditions_3_1.done && (_c = conditions_3.return)) _c.call(conditions_3);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
                break;
            case 'Short text':
                var _loop_6 = function (condition) {
                    /** @type {?} */
                    var result = this_6.evaluateTextConditions(condition, responses[responses.findIndex((/**
                     * @param {?} res
                     * @return {?}
                     */
                    function (res) { return res.questionId == condition._if; }))]);
                    if (condition.relationWithNextCondition != undefined) {
                        expression += result + ' ' + condition.relationWithNextCondition + ' ';
                    }
                    else {
                        expression += result + ' ';
                    }
                };
                var this_6 = this;
                try {
                    for (var conditions_4 = tslib_1.__values(conditions), conditions_4_1 = conditions_4.next(); !conditions_4_1.done; conditions_4_1 = conditions_4.next()) {
                        var condition = conditions_4_1.value;
                        _loop_6(condition);
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (conditions_4_1 && !conditions_4_1.done && (_d = conditions_4.return)) _d.call(conditions_4);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
                break;
            default:
                break;
        }
        return expression;
    };
    /**
     * @private
     * @param {?} condition
     * @param {?} currentResponse
     * @return {?}
     */
    ExpressionBuilder.prototype.evaluateChoiceConditions = /**
     * @private
     * @param {?} condition
     * @param {?} currentResponse
     * @return {?}
     */
    function (condition, currentResponse) {
        return condition.condition == this.IS ?
            currentResponse.choices.some((/**
             * @param {?} choice
             * @return {?}
             */
            function (choice) { return choice.choiceId == condition._this; })) :
            !currentResponse.choices.some((/**
             * @param {?} choice
             * @return {?}
             */
            function (choice) { return choice.choiceId == condition._this; }));
    };
    /**
     * @private
     * @param {?} condition
     * @param {?} response
     * @return {?}
     */
    ExpressionBuilder.prototype.evaluateRatingConditions = /**
     * @private
     * @param {?} condition
     * @param {?} response
     * @return {?}
     */
    function (condition, response) {
        console.warn(response);
        switch (condition.condition) {
            case this.IS_EQUALS_TO:
                return (response.rating == condition._this);
            case this.IS_NOT_EQUALS_TO:
                return (response.rating != condition._this);
            case this.IS_LESS_THAN:
                return (response.rating < condition._this);
            case this.IS_GREATER_THAN:
                return (response.rating > condition._this);
            case this.IS_LESS_THAN_OR_EQUALS_TO:
                return (response.rating <= condition._this);
            case this.IS_GREATER_THAN_OR_EQUALS_TO:
                return (response.rating >= condition._this);
            default:
                return false;
        }
    };
    /**
     * @private
     * @param {?} condition
     * @param {?} response
     * @return {?}
     */
    ExpressionBuilder.prototype.evaluateNPSConditions = /**
     * @private
     * @param {?} condition
     * @param {?} response
     * @return {?}
     */
    function (condition, response) {
        console.warn(response);
        switch (condition.condition) {
            case this.IS:
                return RegExp(condition._this).test(response.rating + '');
            case this.IS_NOT:
                return !RegExp(condition._this).test(response.rating + '');
            default:
                return false;
        }
    };
    /**
     * @private
     * @param {?} condition
     * @param {?} currentResponse
     * @return {?}
     */
    ExpressionBuilder.prototype.evaluateYesNoConditions = /**
     * @private
     * @param {?} condition
     * @param {?} currentResponse
     * @return {?}
     */
    function (condition, currentResponse) {
        return condition.condition == this.IS ?
            currentResponse.answer == condition._this :
            !currentResponse.answer == condition._this;
    };
    /**
     * @private
     * @param {?} condition
     * @param {?} currentResponse
     * @return {?}
     */
    ExpressionBuilder.prototype.evaluateDateConditions = /**
     * @private
     * @param {?} condition
     * @param {?} currentResponse
     * @return {?}
     */
    function (condition, currentResponse) {
        /** @type {?} */
        var thisDate = new Date(condition._this);
        /** @type {?} */
        var responseDate = new Date(currentResponse.answer);
        switch (condition.condition) {
            case this.IS_ON:
                return responseDate == thisDate;
            case this.IS_NOT_ON:
                return responseDate != thisDate;
            case this.IS_BEFORE:
                return responseDate < thisDate;
            case this.IS_AFTER:
                return responseDate > thisDate;
            case this.IS_BEFORE_OR_ON:
                return responseDate <= thisDate;
            case this.IS_AFTER_OR_ON:
                return responseDate >= thisDate;
            //todo Expression for date between range.
            case this.IS_BETWEEN:
                return true;
            default:
                return false;
        }
    };
    /**
     * @private
     * @param {?} condition
     * @param {?} currentResponse
     * @return {?}
     */
    ExpressionBuilder.prototype.evaluateTextConditions = /**
     * @private
     * @param {?} condition
     * @param {?} currentResponse
     * @return {?}
     */
    function (condition, currentResponse) {
        switch (condition.condition) {
            case this.IS_EQUALS_TO:
                return currentResponse.answer == condition._this;
            case this.IS_BEGINS_WITH:
                return currentResponse.answer.startsWith(condition._this);
            case this.IS_ENDS_WITH:
                return currentResponse.answer.endsWith(condition._this);
            case this.CONTAINS:
                return currentResponse.answer.includes(condition._this);
            case this.DOES_NOT_CONTAINS:
                return !currentResponse.answer.includes(condition._this);
            default:
                return false;
        }
    };
    return ExpressionBuilder;
}());
export { ExpressionBuilder };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ExpressionBuilder.prototype.IS_EQUALS_TO;
    /**
     * @type {?}
     * @private
     */
    ExpressionBuilder.prototype.IS_NOT_EQUALS_TO;
    /**
     * @type {?}
     * @private
     */
    ExpressionBuilder.prototype.IS_LESS_THAN;
    /**
     * @type {?}
     * @private
     */
    ExpressionBuilder.prototype.IS_GREATER_THAN;
    /**
     * @type {?}
     * @private
     */
    ExpressionBuilder.prototype.IS_LESS_THAN_OR_EQUALS_TO;
    /**
     * @type {?}
     * @private
     */
    ExpressionBuilder.prototype.IS_GREATER_THAN_OR_EQUALS_TO;
    /**
     * @type {?}
     * @private
     */
    ExpressionBuilder.prototype.IS;
    /**
     * @type {?}
     * @private
     */
    ExpressionBuilder.prototype.IS_NOT;
    /**
     * @type {?}
     * @private
     */
    ExpressionBuilder.prototype.IS_ON;
    /**
     * @type {?}
     * @private
     */
    ExpressionBuilder.prototype.IS_NOT_ON;
    /**
     * @type {?}
     * @private
     */
    ExpressionBuilder.prototype.IS_BEFORE;
    /**
     * @type {?}
     * @private
     */
    ExpressionBuilder.prototype.IS_AFTER;
    /**
     * @type {?}
     * @private
     */
    ExpressionBuilder.prototype.IS_BEFORE_OR_ON;
    /**
     * @type {?}
     * @private
     */
    ExpressionBuilder.prototype.IS_AFTER_OR_ON;
    /**
     * @type {?}
     * @private
     */
    ExpressionBuilder.prototype.IS_BETWEEN;
    /**
     * @type {?}
     * @private
     */
    ExpressionBuilder.prototype.IS_BEGINS_WITH;
    /**
     * @type {?}
     * @private
     */
    ExpressionBuilder.prototype.IS_ENDS_WITH;
    /**
     * @type {?}
     * @private
     */
    ExpressionBuilder.prototype.CONTAINS;
    /**
     * @type {?}
     * @private
     */
    ExpressionBuilder.prototype.DOES_NOT_CONTAINS;
}
//# sourceMappingURL=data:application/json;base64,