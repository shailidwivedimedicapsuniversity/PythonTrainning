/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/questionnaire/statement/statement.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { Question } from '../../pages.model';
import { SurveyResponses } from '../../survey-response.model';
import { PagesService } from '../../../shared/pages-services/pages.service';
var StatementComponent = /** @class */ (function () {
    function StatementComponent(pageService) {
        this.pageService = pageService;
        this.submitEvent = new EventEmitter();
    }
    /**
     * @return {?}
     */
    StatementComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.pageService.stage == 'entry-next') {
            document.getElementById('statement-question').className = 'entry-next';
            document.getElementById('statement-question-delay').className = 'entry-next-delay';
        }
        else if (this.pageService.stage == 'entry-previous') {
            document.getElementById('statement-question').className = 'entry-previous-delay';
            document.getElementById('statement-question-delay').className = 'entry-previous';
        }
    };
    /**
     * @return {?}
     */
    StatementComponent.prototype.onSubmit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.surveyResponse.answer = 'Ok';
        this.surveyResponse.identifier = this.statement.identifier;
        this.surveyResponse.questionId = this.statement.questionId;
        this.surveyResponse.questionType = this.statement.questionType;
        this.pageService.persistSurvey(this.surveyResponse);
        document.getElementById('btn-primary').classList.add('blink-btn-animation');
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.submitEvent.emit();
        }), 350);
    };
    /**
     * @return {?}
     */
    StatementComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.submitEvent.unsubscribe();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    StatementComponent.prototype.onSkip = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value != undefined) {
            this.surveyResponse.answer = value;
            this.surveyResponse.identifier = this.statement.identifier;
            this.surveyResponse.questionId = this.statement.questionId;
            this.surveyResponse.questionType = this.statement.questionType;
            this.pageService.persistSurvey(this.surveyResponse);
        }
        this.submitEvent.emit();
    };
    StatementComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-statement',
                    template: "<div id=\"statement-question\">\n<div class=\"survey-statement\"> <span *ngIf=\"statement.attributes.required\" class=\"isRequired\">*</span>{{ statement.question }} </div>\n<p class=\"question-description\">\n  {{statement.attributes.description}}\n</p>\n\n</div>\n\n\n\n<div id=\"statement-question-delay\">\n<button class=\"btn-primary\"\n        id=\"btn-primary\"\n        type=\"submit\"\n        *ngIf=\"surveyResponse.answer != 'Ok'\"\n        name=\"name\"\n        (click)=\"onSubmit()\">Done</button>\n<button class=\"btn-primary\"\n        type=\"submit\"\n        id=\"btn-primary\"\n        name=\"name\"\n        appAutofocus\n        *ngIf=\"surveyResponse.answer == 'Ok'\"\n        (click)=\"onSubmit()\">Done</button>\n<span\n  (click)=\"onSkip(undefined)\"\n  *ngIf=\"!statement.attributes.required\" class=\"skip-this-question skip-this-question-marginLeft\">Skip</span>\n</div>\n",
                    styles: [".statement-button{position:absolute;left:0;margin-left:1%}"]
                }] }
    ];
    /** @nocollapse */
    StatementComponent.ctorParameters = function () { return [
        { type: PagesService }
    ]; };
    StatementComponent.propDecorators = {
        statement: [{ type: Input }],
        surveyResponse: [{ type: Input }],
        submitEvent: [{ type: Output }]
    };
    return StatementComponent;
}());
export { StatementComponent };
if (false) {
    /** @type {?} */
    StatementComponent.prototype.statement;
    /** @type {?} */
    StatementComponent.prototype.surveyResponse;
    /** @type {?} */
    StatementComponent.prototype.submitEvent;
    /**
     * @type {?}
     * @private
     */
    StatementComponent.prototype.pageService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGVtZW50LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3N1cnZleS1saWIvIiwic291cmNlcyI6WyJsaWIvcGFnZXMvcXVlc3Rpb25uYWlyZS9zdGF0ZW1lbnQvc3RhdGVtZW50LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBcUIsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3hGLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUMzQyxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFFNUQsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLDhDQUE4QyxDQUFDO0FBRzFFO0lBZUUsNEJBQW9CLFdBQXlCO1FBQXpCLGdCQUFXLEdBQVgsV0FBVyxDQUFjO1FBRjdDLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUVnQixDQUFDOzs7O0lBRWxELHFDQUFROzs7SUFBUjtRQUNFLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLElBQUksWUFBWSxFQUFFO1lBQzFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxTQUFTLEdBQUcsWUFBWSxDQUFDO1lBQ3ZFLFFBQVEsQ0FBQyxjQUFjLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxTQUFTLEdBQUcsa0JBQWtCLENBQUM7U0FDcEY7YUFBSyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxJQUFJLGdCQUFnQixFQUFFO1lBQ3BELFFBQVEsQ0FBQyxjQUFjLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxTQUFTLEdBQUcsc0JBQXNCLENBQUM7WUFDakYsUUFBUSxDQUFDLGNBQWMsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLFNBQVMsR0FBRyxnQkFBZ0IsQ0FBQztTQUNsRjtJQUNILENBQUM7Ozs7SUFFRCxxQ0FBUTs7O0lBQVI7UUFBQSxpQkFVQztRQVRDLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztRQUNsQyxJQUFJLENBQUMsY0FBYyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQztRQUMzRCxJQUFJLENBQUMsY0FBYyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQztRQUMzRCxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQztRQUMvRCxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDcEQsUUFBUSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFDNUUsVUFBVTs7O1FBQUM7WUFDVCxLQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzFCLENBQUMsR0FBQyxHQUFHLENBQUMsQ0FBQztJQUNULENBQUM7Ozs7SUFFRCx3Q0FBVzs7O0lBQVg7UUFDRSxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2pDLENBQUM7Ozs7O0lBRUQsbUNBQU07Ozs7SUFBTixVQUFPLEtBQVU7UUFDZixJQUFJLEtBQUssSUFBSSxTQUFTLEVBQUU7WUFDdEIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1lBQ25DLElBQUksQ0FBQyxjQUFjLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDO1lBQzNELElBQUksQ0FBQyxjQUFjLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDO1lBQzNELElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDO1lBQy9ELElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztTQUNyRDtRQUNELElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDMUIsQ0FBQzs7Z0JBcERGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsZUFBZTtvQkFDekIsZzVCQUF5Qzs7aUJBRTFDOzs7O2dCQVBPLFlBQVk7Ozs0QkFVakIsS0FBSztpQ0FFTCxLQUFLOzhCQUdMLE1BQU07O0lBMENULHlCQUFDO0NBQUEsQUF0REQsSUFzREM7U0FqRFksa0JBQWtCOzs7SUFFN0IsdUNBQTZCOztJQUU3Qiw0Q0FDZ0M7O0lBRWhDLHlDQUNpQzs7Ozs7SUFFckIseUNBQWlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uRGVzdHJveSwgT25Jbml0LCBPdXRwdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtRdWVzdGlvbn0gZnJvbSAnLi4vLi4vcGFnZXMubW9kZWwnO1xuaW1wb3J0IHtTdXJ2ZXlSZXNwb25zZXN9IGZyb20gJy4uLy4uL3N1cnZleS1yZXNwb25zZS5tb2RlbCc7XG5pbXBvcnQgKiBhcyBzdXJ2ZXlBY3Rpb25zIGZyb20gJy4uLy4uL3N0b3JlL3N1cnZleS1hY3Rpb25zJztcbmltcG9ydCB7UGFnZXNTZXJ2aWNlfSBmcm9tICcuLi8uLi8uLi9zaGFyZWQvcGFnZXMtc2VydmljZXMvcGFnZXMuc2VydmljZSc7XG5cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYXBwLXN0YXRlbWVudCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9zdGF0ZW1lbnQuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9zdGF0ZW1lbnQuY29tcG9uZW50LmNzcyddXG59KVxuZXhwb3J0IGNsYXNzIFN0YXRlbWVudENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCxPbkRlc3Ryb3kge1xuXG4gIEBJbnB1dCgpIHN0YXRlbWVudDogUXVlc3Rpb247XG5cbiAgQElucHV0KClcbiAgc3VydmV5UmVzcG9uc2U6IFN1cnZleVJlc3BvbnNlcztcblxuICBAT3V0cHV0KClcbiAgc3VibWl0RXZlbnQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBwYWdlU2VydmljZTogUGFnZXNTZXJ2aWNlKSB7IH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAodGhpcy5wYWdlU2VydmljZS5zdGFnZSA9PSAnZW50cnktbmV4dCcpIHtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdGF0ZW1lbnQtcXVlc3Rpb24nKS5jbGFzc05hbWUgPSAnZW50cnktbmV4dCc7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhdGVtZW50LXF1ZXN0aW9uLWRlbGF5JykuY2xhc3NOYW1lID0gJ2VudHJ5LW5leHQtZGVsYXknO1xuICAgIH1lbHNlIGlmICh0aGlzLnBhZ2VTZXJ2aWNlLnN0YWdlID09ICdlbnRyeS1wcmV2aW91cycpIHtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdGF0ZW1lbnQtcXVlc3Rpb24nKS5jbGFzc05hbWUgPSAnZW50cnktcHJldmlvdXMtZGVsYXknO1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0YXRlbWVudC1xdWVzdGlvbi1kZWxheScpLmNsYXNzTmFtZSA9ICdlbnRyeS1wcmV2aW91cyc7XG4gICAgfVxuICB9XG5cbiAgb25TdWJtaXQoKXtcbiAgICB0aGlzLnN1cnZleVJlc3BvbnNlLmFuc3dlciA9ICdPayc7XG4gICAgdGhpcy5zdXJ2ZXlSZXNwb25zZS5pZGVudGlmaWVyID0gdGhpcy5zdGF0ZW1lbnQuaWRlbnRpZmllcjtcbiAgICB0aGlzLnN1cnZleVJlc3BvbnNlLnF1ZXN0aW9uSWQgPSB0aGlzLnN0YXRlbWVudC5xdWVzdGlvbklkO1xuICAgIHRoaXMuc3VydmV5UmVzcG9uc2UucXVlc3Rpb25UeXBlID0gdGhpcy5zdGF0ZW1lbnQucXVlc3Rpb25UeXBlO1xuICAgIHRoaXMucGFnZVNlcnZpY2UucGVyc2lzdFN1cnZleSh0aGlzLnN1cnZleVJlc3BvbnNlKTtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnRuLXByaW1hcnknKS5jbGFzc0xpc3QuYWRkKCdibGluay1idG4tYW5pbWF0aW9uJyk7XG4gICAgc2V0VGltZW91dCgoKT0+e1xuICAgICAgdGhpcy5zdWJtaXRFdmVudC5lbWl0KCk7XG4gICAgfSwzNTApO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5zdWJtaXRFdmVudC51bnN1YnNjcmliZSgpO1xuICB9XG5cbiAgb25Ta2lwKHZhbHVlOiBhbnkpe1xuICAgIGlmICh2YWx1ZSAhPSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuc3VydmV5UmVzcG9uc2UuYW5zd2VyID0gdmFsdWU7XG4gICAgICB0aGlzLnN1cnZleVJlc3BvbnNlLmlkZW50aWZpZXIgPSB0aGlzLnN0YXRlbWVudC5pZGVudGlmaWVyO1xuICAgICAgdGhpcy5zdXJ2ZXlSZXNwb25zZS5xdWVzdGlvbklkID0gdGhpcy5zdGF0ZW1lbnQucXVlc3Rpb25JZDtcbiAgICAgIHRoaXMuc3VydmV5UmVzcG9uc2UucXVlc3Rpb25UeXBlID0gdGhpcy5zdGF0ZW1lbnQucXVlc3Rpb25UeXBlO1xuICAgICAgdGhpcy5wYWdlU2VydmljZS5wZXJzaXN0U3VydmV5KHRoaXMuc3VydmV5UmVzcG9uc2UpO1xuICAgIH1cbiAgICB0aGlzLnN1Ym1pdEV2ZW50LmVtaXQoKTtcbiAgfVxuXG59XG4iXX0=