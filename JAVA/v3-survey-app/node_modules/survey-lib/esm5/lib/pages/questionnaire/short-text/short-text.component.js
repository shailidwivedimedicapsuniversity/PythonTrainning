/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/questionnaire/short-text/short-text.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { Question } from '../../pages.model';
import { SurveyResponses } from '../../survey-response.model';
import { PagesService } from '../../../shared/pages-services/pages.service';
var ShortTextComponent = /** @class */ (function () {
    function ShortTextComponent(pageService) {
        this.pageService = pageService;
        this.submitEvent = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ShortTextComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.pageService.stage == 'entry-next') {
            document.getElementById('short-question').className = 'entry-next';
            document.getElementById('short-question-delay').className = 'entry-next-delay';
        }
        else if (this.pageService.stage == 'entry-previous') {
            document.getElementById('short-question').className = 'entry-previous-delay';
            document.getElementById('short-question-delay').className = 'entry-previous';
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ShortTextComponent.prototype.onInputValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        if (value != undefined) {
            this.surveyResponse.questionId = this.shortText.questionId;
            this.surveyResponse.question = this.shortText.question;
            this.surveyResponse.questionType = this.shortText.questionType;
            this.surveyResponse.identifier = this.shortText.identifier;
            this.surveyResponse.answer = value;
            this.pageService.persistSurvey(this.surveyResponse);
            document.getElementById('btn-primary').classList.add('blink-btn-animation');
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.submitEvent.emit();
            }), 350);
        }
        else {
            this.submitEvent.emit();
        }
    };
    /**
     * @return {?}
     */
    ShortTextComponent.prototype.skipQuestion = /**
     * @return {?}
     */
    function () {
        this.surveyResponse.identifier = this.shortText.identifier;
        this.surveyResponse.answer = undefined;
        this.submitEvent.emit();
    };
    /**
     * @return {?}
     */
    ShortTextComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
    };
    ShortTextComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-short-text',
                    template: "<div id=\"short-question\">\n<div class=\"survey-statement\">\n  <span *ngIf=\"shortText.attributes.required\" class=\"isRequired\">*</span>{{ shortText.question }}</div>\n\n  <p class=\"question-description\">\n  {{shortText.attributes.description}}\n</p>\n\n</div>\n\n<div id=\"short-question-delay\">\n<input class=\"survey-input-text-box\" #shortTextInput\n        type=\"text\" onfocus=\"this.placeholder=''\"\n       [(ngModel)]=\"surveyResponse.answer\"\n       [maxLength]=\"shortText.attributes.maxCharacterCount\"\n       placeholder=\"Enter text here\">\n<button class=\"btn-primary\" id=\"btn-primary\" (click)=\"onInputValue(shortTextInput.value)\">{{isLastQuestion?'Submit': 'Done'}}</button>\n<span\n  (click)=\"onInputValue(undefined)\"\n  *ngIf=\"!shortText.attributes.required\" class=\"skip-this-question skip-this-question-marginLeft\">Skip</span>\n</div>\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ShortTextComponent.ctorParameters = function () { return [
        { type: PagesService }
    ]; };
    ShortTextComponent.propDecorators = {
        shortText: [{ type: Input }],
        surveyResponse: [{ type: Input }],
        submitEvent: [{ type: Output }],
        isLastQuestion: [{ type: Input }]
    };
    return ShortTextComponent;
}());
export { ShortTextComponent };
if (false) {
    /** @type {?} */
    ShortTextComponent.prototype.shortText;
    /** @type {?} */
    ShortTextComponent.prototype.surveyResponse;
    /** @type {?} */
    ShortTextComponent.prototype.submitEvent;
    /** @type {?} */
    ShortTextComponent.prototype.isLastQuestion;
    /**
     * @type {?}
     * @private
     */
    ShortTextComponent.prototype.pageService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvcnQtdGV4dC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9zdXJ2ZXktbGliLyIsInNvdXJjZXMiOlsibGliL3BhZ2VzL3F1ZXN0aW9ubmFpcmUvc2hvcnQtdGV4dC9zaG9ydC10ZXh0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBcUIsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3hGLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUUzQyxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFDNUQsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLDhDQUE4QyxDQUFDO0FBRzFFO0lBbUJFLDRCQUFvQixXQUF5QjtRQUF6QixnQkFBVyxHQUFYLFdBQVcsQ0FBYztRQU43QyxnQkFBVyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUFPakMsQ0FBQzs7OztJQUVELHFDQUFROzs7SUFBUjtRQUNFLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLElBQUksWUFBWSxFQUFFO1lBQzFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxTQUFTLEdBQUcsWUFBWSxDQUFDO1lBQ25FLFFBQVEsQ0FBQyxjQUFjLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxTQUFTLEdBQUcsa0JBQWtCLENBQUM7U0FDaEY7YUFBSyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxJQUFJLGdCQUFnQixFQUFFO1lBQ3BELFFBQVEsQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxTQUFTLEdBQUcsc0JBQXNCLENBQUM7WUFDN0UsUUFBUSxDQUFDLGNBQWMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLFNBQVMsR0FBRyxnQkFBZ0IsQ0FBQztTQUM5RTtJQUNILENBQUM7Ozs7O0lBRUQseUNBQVk7Ozs7SUFBWixVQUFhLEtBQWE7UUFBMUIsaUJBZUM7UUFkQyxJQUFJLEtBQUssSUFBSSxTQUFTLEVBQUU7WUFDdEIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUM7WUFDM0QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7WUFDdkQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUM7WUFDL0QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUM7WUFDM0QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1lBQ25DLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUNwRCxRQUFRLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQztZQUM1RSxVQUFVOzs7WUFBQztnQkFDVCxLQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQzFCLENBQUMsR0FBQyxHQUFHLENBQUMsQ0FBQztTQUNSO2FBQU07WUFDTCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ3pCO0lBQ0gsQ0FBQzs7OztJQUVELHlDQUFZOzs7SUFBWjtRQUNFLElBQUksQ0FBQyxjQUFjLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDO1FBQzNELElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQztRQUN2QyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzFCLENBQUM7Ozs7SUFFRCx3Q0FBVzs7O0lBQVg7SUFDQSxDQUFDOztnQkF4REYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxnQkFBZ0I7b0JBQzFCLHkzQkFBMEM7O2lCQUUzQzs7OztnQkFQTyxZQUFZOzs7NEJBVWpCLEtBQUs7aUNBRUwsS0FBSzs4QkFHTCxNQUFNO2lDQUdOLEtBQUs7O0lBNENSLHlCQUFDO0NBQUEsQUEzREQsSUEyREM7U0F0RFksa0JBQWtCOzs7SUFFN0IsdUNBQTZCOztJQUU3Qiw0Q0FDZ0M7O0lBRWhDLHlDQUNpQzs7SUFFakMsNENBQytCOzs7OztJQUduQix5Q0FBaUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25EZXN0cm95LCBPbkluaXQsIE91dHB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1F1ZXN0aW9ufSBmcm9tICcuLi8uLi9wYWdlcy5tb2RlbCc7XG5pbXBvcnQgKiBhcyBzdXJ2ZXlBY3Rpb25zIGZyb20gJy4uLy4uL3N0b3JlL3N1cnZleS1hY3Rpb25zJztcbmltcG9ydCB7U3VydmV5UmVzcG9uc2VzfSBmcm9tICcuLi8uLi9zdXJ2ZXktcmVzcG9uc2UubW9kZWwnO1xuaW1wb3J0IHtQYWdlc1NlcnZpY2V9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9wYWdlcy1zZXJ2aWNlcy9wYWdlcy5zZXJ2aWNlJztcblxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhcHAtc2hvcnQtdGV4dCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9zaG9ydC10ZXh0LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vc2hvcnQtdGV4dC5jb21wb25lbnQuY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgU2hvcnRUZXh0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LE9uRGVzdHJveSB7XG5cbiAgQElucHV0KCkgc2hvcnRUZXh0OiBRdWVzdGlvbjtcblxuICBASW5wdXQoKVxuICBzdXJ2ZXlSZXNwb25zZTogU3VydmV5UmVzcG9uc2VzO1xuXG4gIEBPdXRwdXQoKVxuICBzdWJtaXRFdmVudCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBASW5wdXQoKVxuICBwdWJsaWMgaXNMYXN0UXVlc3Rpb246IGJvb2xlYW47XG5cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBhZ2VTZXJ2aWNlOiBQYWdlc1NlcnZpY2UpIHtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIGlmICh0aGlzLnBhZ2VTZXJ2aWNlLnN0YWdlID09ICdlbnRyeS1uZXh0Jykge1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Nob3J0LXF1ZXN0aW9uJykuY2xhc3NOYW1lID0gJ2VudHJ5LW5leHQnO1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Nob3J0LXF1ZXN0aW9uLWRlbGF5JykuY2xhc3NOYW1lID0gJ2VudHJ5LW5leHQtZGVsYXknO1xuICAgIH1lbHNlIGlmICh0aGlzLnBhZ2VTZXJ2aWNlLnN0YWdlID09ICdlbnRyeS1wcmV2aW91cycpIHtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzaG9ydC1xdWVzdGlvbicpLmNsYXNzTmFtZSA9ICdlbnRyeS1wcmV2aW91cy1kZWxheSc7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2hvcnQtcXVlc3Rpb24tZGVsYXknKS5jbGFzc05hbWUgPSAnZW50cnktcHJldmlvdXMnO1xuICAgIH1cbiAgfVxuXG4gIG9uSW5wdXRWYWx1ZSh2YWx1ZTogc3RyaW5nKXtcbiAgICBpZiAodmFsdWUgIT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLnN1cnZleVJlc3BvbnNlLnF1ZXN0aW9uSWQgPSB0aGlzLnNob3J0VGV4dC5xdWVzdGlvbklkO1xuICAgICAgdGhpcy5zdXJ2ZXlSZXNwb25zZS5xdWVzdGlvbiA9IHRoaXMuc2hvcnRUZXh0LnF1ZXN0aW9uO1xuICAgICAgdGhpcy5zdXJ2ZXlSZXNwb25zZS5xdWVzdGlvblR5cGUgPSB0aGlzLnNob3J0VGV4dC5xdWVzdGlvblR5cGU7XG4gICAgICB0aGlzLnN1cnZleVJlc3BvbnNlLmlkZW50aWZpZXIgPSB0aGlzLnNob3J0VGV4dC5pZGVudGlmaWVyO1xuICAgICAgdGhpcy5zdXJ2ZXlSZXNwb25zZS5hbnN3ZXIgPSB2YWx1ZTtcbiAgICAgIHRoaXMucGFnZVNlcnZpY2UucGVyc2lzdFN1cnZleSh0aGlzLnN1cnZleVJlc3BvbnNlKTtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidG4tcHJpbWFyeScpLmNsYXNzTGlzdC5hZGQoJ2JsaW5rLWJ0bi1hbmltYXRpb24nKTtcbiAgICAgIHNldFRpbWVvdXQoKCk9PntcbiAgICAgICAgdGhpcy5zdWJtaXRFdmVudC5lbWl0KCk7XG4gICAgICB9LDM1MCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3VibWl0RXZlbnQuZW1pdCgpO1xuICAgIH1cbiAgfVxuXG4gIHNraXBRdWVzdGlvbigpe1xuICAgIHRoaXMuc3VydmV5UmVzcG9uc2UuaWRlbnRpZmllciA9IHRoaXMuc2hvcnRUZXh0LmlkZW50aWZpZXI7XG4gICAgdGhpcy5zdXJ2ZXlSZXNwb25zZS5hbnN3ZXIgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5zdWJtaXRFdmVudC5lbWl0KCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgfVxuXG5cbn1cbiJdfQ==