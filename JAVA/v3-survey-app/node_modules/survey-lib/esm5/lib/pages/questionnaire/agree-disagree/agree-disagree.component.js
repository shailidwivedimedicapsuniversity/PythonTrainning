/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/questionnaire/agree-disagree/agree-disagree.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { Question } from '../../pages.model';
import { PagesService } from '../../../shared/pages-services/pages.service';
import { SurveyResponses } from '../../survey-response.model';
var AgreeDisagreeComponent = /** @class */ (function () {
    function AgreeDisagreeComponent(pageService) {
        this.pageService = pageService;
        this.submitEvent = new EventEmitter();
    }
    /**
     * @return {?}
     */
    AgreeDisagreeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.pageService.stage == 'entry-next') {
            document.getElementById('agree-disagree-question').className = 'entry-next';
            document.getElementById('agree-disagree-question-delay').className = 'entry-next-delay';
        }
        else if (this.pageService.stage == 'entry-previous') {
            document.getElementById('agree-disagree-question').className = 'entry-previous-delay';
            document.getElementById('agree-disagree-question-delay').className = 'entry-previous';
        }
    };
    /**
     * @param {?} answer
     * @return {?}
     */
    AgreeDisagreeComponent.prototype.onSubmit = /**
     * @param {?} answer
     * @return {?}
     */
    function (answer) {
        var _this = this;
        if (answer != undefined) {
            this.surveyResponse.questionId = this.agreeDisagree.questionId;
            this.surveyResponse.question = this.agreeDisagree.question;
            this.surveyResponse.questionType = this.agreeDisagree.questionType;
            this.surveyResponse.identifier = this.agreeDisagree.identifier;
            this.surveyResponse.answer = answer;
            this.pageService.persistSurvey(this.surveyResponse);
            answer == 'Agree' ? document.getElementById('agree').classList.add('blink-btn-animation') : '';
            answer == 'Disagree' ? document.getElementById('disagree').classList.add('blink-btn-animation') : '';
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.submitEvent.emit();
            }), 350);
        }
        else {
            this.submitEvent.emit();
        }
    };
    /**
     * @return {?}
     */
    AgreeDisagreeComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
    };
    AgreeDisagreeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-agree-disagree',
                    template: "<div id=\"agree-disagree-question\">\n<div class=\"survey-statement\">\n  <span *ngIf=\"agreeDisagree.attributes.required\" class=\"isRequired\">*</span>{{agreeDisagree.question}}\n</div>\n<p class=\"question-description\">\n  {{agreeDisagree.attributes.description}}\n</p>\n</div>\n\n\n<div id=\"agree-disagree-question-delay\">\n<button id=\"agree\"\n  [ngClass]=\"surveyResponse.answer == 'Agree'?'btn-secondary agree-disagree-btn btn-focused-state':'btn-secondary agree-disagree-btn'\"\n  (click)=\"onSubmit('Agree')\"><span [ngClass]=\"surveyResponse.answer == 'Agree'?'checkmark checkmark-checked':'checkmark'\"></span><span style=\"margin-left: 10px;\">AGREE</span>\n</button>\n\n<button id=\"disagree\"\n  [ngClass]=\"surveyResponse.answer == 'Disagree'?'btn-secondary agree-disagree-btn btn-focused-state':'btn-secondary agree-disagree-btn'\"\n  (click)=\"onSubmit('Disagree')\"><span [ngClass]=\"surveyResponse.answer == 'Disagree'?'crossmark crossmark-checked':'crossmark'\"></span><span>DISAGREE</span>\n</button>\n\n<div style=\"margin-top: 2%;\" class=\"skip-this-question\" *ngIf=\"!agreeDisagree.attributes.required\">\n  <span (click)=\"onSubmit(undefined)\" >Skip</span>\n</div>\n</div>\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    AgreeDisagreeComponent.ctorParameters = function () { return [
        { type: PagesService }
    ]; };
    AgreeDisagreeComponent.propDecorators = {
        agreeDisagree: [{ type: Input }],
        surveyResponse: [{ type: Input }],
        submitEvent: [{ type: Output }]
    };
    return AgreeDisagreeComponent;
}());
export { AgreeDisagreeComponent };
if (false) {
    /** @type {?} */
    AgreeDisagreeComponent.prototype.agreeDisagree;
    /** @type {?} */
    AgreeDisagreeComponent.prototype.surveyResponse;
    /** @type {?} */
    AgreeDisagreeComponent.prototype.submitEvent;
    /**
     * @type {?}
     * @private
     */
    AgreeDisagreeComponent.prototype.pageService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWdyZWUtZGlzYWdyZWUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vc3VydmV5LWxpYi8iLCJzb3VyY2VzIjpbImxpYi9wYWdlcy9xdWVzdGlvbm5haXJlL2FncmVlLWRpc2FncmVlL2FncmVlLWRpc2FncmVlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBcUIsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3hGLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUUzQyxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sOENBQThDLENBQUM7QUFDMUUsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLDZCQUE2QixDQUFDO0FBRzVEO0lBZUUsZ0NBQW9CLFdBQXlCO1FBQXpCLGdCQUFXLEdBQVgsV0FBVyxDQUFjO1FBSG5DLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUkzQyxDQUFDOzs7O0lBRUQseUNBQVE7OztJQUFSO1FBQ0UsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssSUFBSSxZQUFZLEVBQUU7WUFDMUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLFNBQVMsR0FBRyxZQUFZLENBQUM7WUFDNUUsUUFBUSxDQUFDLGNBQWMsQ0FBQywrQkFBK0IsQ0FBQyxDQUFDLFNBQVMsR0FBRyxrQkFBa0IsQ0FBQztTQUN6RjthQUFNLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLElBQUksZ0JBQWdCLEVBQUU7WUFDckQsUUFBUSxDQUFDLGNBQWMsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLFNBQVMsR0FBRyxzQkFBc0IsQ0FBQztZQUN0RixRQUFRLENBQUMsY0FBYyxDQUFDLCtCQUErQixDQUFDLENBQUMsU0FBUyxHQUFHLGdCQUFnQixDQUFDO1NBRXZGO0lBQ0gsQ0FBQzs7Ozs7SUFFRCx5Q0FBUTs7OztJQUFSLFVBQVMsTUFBYztRQUF2QixpQkFnQkM7UUFmQyxJQUFJLE1BQU0sSUFBSSxTQUFTLEVBQUU7WUFDdkIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUM7WUFDL0QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7WUFDM0QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUM7WUFDbkUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUM7WUFDL0QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1lBQ3BDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUNwRCxNQUFNLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQy9GLE1BQU0sSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDckcsVUFBVTs7O1lBQUM7Z0JBQ1QsS0FBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUMxQixDQUFDLEdBQUUsR0FBRyxDQUFDLENBQUM7U0FDVDthQUFNO1lBQ0wsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUN6QjtJQUNILENBQUM7Ozs7SUFFRCw0Q0FBVzs7O0lBQVg7SUFDQSxDQUFDOztnQkFoREYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxvQkFBb0I7b0JBQzlCLGtzQ0FBOEM7O2lCQUUvQzs7OztnQkFSTyxZQUFZOzs7Z0NBV2pCLEtBQUs7aUNBRUwsS0FBSzs4QkFHTCxNQUFNOztJQXFDVCw2QkFBQztDQUFBLEFBakRELElBaURDO1NBNUNZLHNCQUFzQjs7O0lBRWpDLCtDQUFpQzs7SUFFakMsZ0RBQ3VDOztJQUV2Qyw2Q0FBMkM7Ozs7O0lBRy9CLDZDQUFpQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdCwgT3V0cHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7UXVlc3Rpb259IGZyb20gJy4uLy4uL3BhZ2VzLm1vZGVsJztcbmltcG9ydCAqIGFzIHN1cnZleUFjdGlvbnMgZnJvbSAnLi4vLi4vc3RvcmUvc3VydmV5LWFjdGlvbnMnO1xuaW1wb3J0IHtQYWdlc1NlcnZpY2V9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9wYWdlcy1zZXJ2aWNlcy9wYWdlcy5zZXJ2aWNlJztcbmltcG9ydCB7U3VydmV5UmVzcG9uc2VzfSBmcm9tICcuLi8uLi9zdXJ2ZXktcmVzcG9uc2UubW9kZWwnO1xuXG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FwcC1hZ3JlZS1kaXNhZ3JlZScsXG4gIHRlbXBsYXRlVXJsOiAnLi9hZ3JlZS1kaXNhZ3JlZS5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2FncmVlLWRpc2FncmVlLmNvbXBvbmVudC5jc3MnXSxcbn0pXG5leHBvcnQgY2xhc3MgQWdyZWVEaXNhZ3JlZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcblxuICBASW5wdXQoKSBhZ3JlZURpc2FncmVlOiBRdWVzdGlvbjtcblxuICBASW5wdXQoKVxuICBwdWJsaWMgc3VydmV5UmVzcG9uc2U6IFN1cnZleVJlc3BvbnNlcztcblxuICBAT3V0cHV0KCkgc3VibWl0RXZlbnQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBhZ2VTZXJ2aWNlOiBQYWdlc1NlcnZpY2UpIHtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIGlmICh0aGlzLnBhZ2VTZXJ2aWNlLnN0YWdlID09ICdlbnRyeS1uZXh0Jykge1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FncmVlLWRpc2FncmVlLXF1ZXN0aW9uJykuY2xhc3NOYW1lID0gJ2VudHJ5LW5leHQnO1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FncmVlLWRpc2FncmVlLXF1ZXN0aW9uLWRlbGF5JykuY2xhc3NOYW1lID0gJ2VudHJ5LW5leHQtZGVsYXknO1xuICAgIH0gZWxzZSBpZiAodGhpcy5wYWdlU2VydmljZS5zdGFnZSA9PSAnZW50cnktcHJldmlvdXMnKSB7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYWdyZWUtZGlzYWdyZWUtcXVlc3Rpb24nKS5jbGFzc05hbWUgPSAnZW50cnktcHJldmlvdXMtZGVsYXknO1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FncmVlLWRpc2FncmVlLXF1ZXN0aW9uLWRlbGF5JykuY2xhc3NOYW1lID0gJ2VudHJ5LXByZXZpb3VzJztcblxuICAgIH1cbiAgfVxuXG4gIG9uU3VibWl0KGFuc3dlcjogc3RyaW5nKSB7XG4gICAgaWYgKGFuc3dlciAhPSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuc3VydmV5UmVzcG9uc2UucXVlc3Rpb25JZCA9IHRoaXMuYWdyZWVEaXNhZ3JlZS5xdWVzdGlvbklkO1xuICAgICAgdGhpcy5zdXJ2ZXlSZXNwb25zZS5xdWVzdGlvbiA9IHRoaXMuYWdyZWVEaXNhZ3JlZS5xdWVzdGlvbjtcbiAgICAgIHRoaXMuc3VydmV5UmVzcG9uc2UucXVlc3Rpb25UeXBlID0gdGhpcy5hZ3JlZURpc2FncmVlLnF1ZXN0aW9uVHlwZTtcbiAgICAgIHRoaXMuc3VydmV5UmVzcG9uc2UuaWRlbnRpZmllciA9IHRoaXMuYWdyZWVEaXNhZ3JlZS5pZGVudGlmaWVyO1xuICAgICAgdGhpcy5zdXJ2ZXlSZXNwb25zZS5hbnN3ZXIgPSBhbnN3ZXI7XG4gICAgICB0aGlzLnBhZ2VTZXJ2aWNlLnBlcnNpc3RTdXJ2ZXkodGhpcy5zdXJ2ZXlSZXNwb25zZSk7XG4gICAgICBhbnN3ZXIgPT0gJ0FncmVlJyA/IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhZ3JlZScpLmNsYXNzTGlzdC5hZGQoJ2JsaW5rLWJ0bi1hbmltYXRpb24nKSA6ICcnO1xuICAgICAgYW5zd2VyID09ICdEaXNhZ3JlZScgPyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGlzYWdyZWUnKS5jbGFzc0xpc3QuYWRkKCdibGluay1idG4tYW5pbWF0aW9uJykgOiAnJztcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLnN1Ym1pdEV2ZW50LmVtaXQoKTtcbiAgICAgIH0sIDM1MCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3VibWl0RXZlbnQuZW1pdCgpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICB9XG59XG4iXX0=