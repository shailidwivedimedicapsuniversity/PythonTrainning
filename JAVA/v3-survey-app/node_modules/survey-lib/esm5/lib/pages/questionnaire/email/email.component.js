/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/questionnaire/email/email.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { Question } from '../../pages.model';
import { SurveyResponses } from '../../survey-response.model';
import { PagesService } from '../../../shared/pages-services/pages.service';
var EmailComponent = /** @class */ (function () {
    function EmailComponent(pageService) {
        this.pageService = pageService;
        this.EMAIL_REGEXP = new RegExp('^(([^<>()\\[\\]\\\\.,;:\\s@"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@"]+)*)|(".+"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$');
        this.submitEvent = new EventEmitter();
        this.isValidEmail = true;
    }
    /**
     * @return {?}
     */
    EmailComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.pageService.stage == 'entry-next') {
            document.getElementById('email-question').className = 'entry-next';
            document.getElementById('email-question-delay').className = 'entry-next-delay';
        }
        else if (this.pageService.stage == 'entry-previous') {
            document.getElementById('email-question').className = 'entry-previous-delay';
            document.getElementById('email-question-delay').className = 'entry-previous';
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    EmailComponent.prototype.onSubmit = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        console.log(value);
        if (value != undefined) {
            this.isValidEmail = this.isValidEmailId(value);
            console.log('Is valid email: ' + this.isValidEmail);
            if (this.isValidEmail) {
                this.surveyResponse.questionId = this.email.questionId;
                this.surveyResponse.question = this.email.question;
                this.surveyResponse.questionType = this.email.questionType;
                this.surveyResponse.identifier = this.email.identifier;
                this.surveyResponse.answer = value;
                this.pageService.persistSurvey(this.surveyResponse);
                document.getElementById('btn-primary').classList.add('blink-btn-animation');
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.submitEvent.emit();
                }), 350);
            }
        }
        else {
            this.submitEvent.emit();
        }
    };
    /**
     * @return {?}
     */
    EmailComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @private
     * @param {?} email
     * @return {?}
     */
    EmailComponent.prototype.isValidEmailId = /**
     * @private
     * @param {?} email
     * @return {?}
     */
    function (email) {
        return this.EMAIL_REGEXP.test(email);
    };
    EmailComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-email',
                    template: "<div id=\"email-question\">\n<div class=\"survey-statement\">\n    <span *ngIf=\"email.attributes.required\" class=\"isRequired\">*</span>{{ email.question }}\n</div>\n<p class=\"question-description\">\n    {{email.attributes.description}}\n  </p>\n\n</div>\n\n\n<div id=\"email-question-delay\">\n<input class=\"survey-input-text-box\"\n  #emailInput\n  type=\"email\"\n  name=\"email\"\n  onfocus=\"this.placeholder=''\"\n  placeholder=\"Enter valid email ID\"\n  [(ngModel)]=\"surveyResponse.answer\">\n  <div *ngIf=\"!isValidEmail\" class=\"validation-error-msg\">Please enter valid email</div>\n<button class=\"btn-primary\" id=\"btn-primary\"  (click)=\"onSubmit(emailInput.value)\">{{isLastQuestion?'Submit': 'Done'}}</button>\n<span (click)=\"onSubmit(undefined)\"\n  *ngIf=\"!email.attributes.required\" class=\"skip-this-question skip-this-question-marginLeft\">Skip</span>\n</div>\n",
                    styles: [".email-text-box{position:absolute;left:0;margin-left:1%}"]
                }] }
    ];
    /** @nocollapse */
    EmailComponent.ctorParameters = function () { return [
        { type: PagesService }
    ]; };
    EmailComponent.propDecorators = {
        email: [{ type: Input }],
        submitEvent: [{ type: Output }],
        surveyResponse: [{ type: Input }],
        isLastQuestion: [{ type: Input }]
    };
    return EmailComponent;
}());
export { EmailComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    EmailComponent.prototype.EMAIL_REGEXP;
    /** @type {?} */
    EmailComponent.prototype.email;
    /** @type {?} */
    EmailComponent.prototype.submitEvent;
    /** @type {?} */
    EmailComponent.prototype.surveyResponse;
    /** @type {?} */
    EmailComponent.prototype.isLastQuestion;
    /** @type {?} */
    EmailComponent.prototype.isValidEmail;
    /**
     * @type {?}
     * @private
     */
    EmailComponent.prototype.pageService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1haWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vc3VydmV5LWxpYi8iLCJzb3VyY2VzIjpbImxpYi9wYWdlcy9xdWVzdGlvbm5haXJlL2VtYWlsL2VtYWlsLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBcUIsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3hGLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUUzQyxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFDNUQsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLDhDQUE4QyxDQUFDO0FBRzFFO0lBc0JFLHdCQUFvQixXQUF5QjtRQUF6QixnQkFBVyxHQUFYLFdBQVcsQ0FBYztRQWhCNUIsaUJBQVksR0FBRSxJQUFJLE1BQU0sQ0FBQywyS0FBMkssQ0FBQyxDQUFDO1FBS3ZOLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQVFqQyxpQkFBWSxHQUFhLElBQUksQ0FBQztJQUk5QixDQUFDOzs7O0lBRUQsaUNBQVE7OztJQUFSO1FBQ0UsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssSUFBSSxZQUFZLEVBQUU7WUFDMUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLFNBQVMsR0FBRyxZQUFZLENBQUM7WUFDbkUsUUFBUSxDQUFDLGNBQWMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLFNBQVMsR0FBRyxrQkFBa0IsQ0FBQztTQUNoRjthQUFLLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLElBQUksZ0JBQWdCLEVBQUU7WUFDcEQsUUFBUSxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLFNBQVMsR0FBRyxzQkFBc0IsQ0FBQztZQUM3RSxRQUFRLENBQUMsY0FBYyxDQUFDLHNCQUFzQixDQUFDLENBQUMsU0FBUyxHQUFHLGdCQUFnQixDQUFDO1NBQzlFO0lBQ0gsQ0FBQzs7Ozs7SUFFRCxpQ0FBUTs7OztJQUFSLFVBQVMsS0FBYTtRQUF0QixpQkFvQkM7UUFuQkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuQixJQUFJLEtBQUssSUFBSSxTQUFTLEVBQUM7WUFDckIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQy9DLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEdBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ2xELElBQUksSUFBSSxDQUFDLFlBQVksRUFBQztnQkFDcEIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUM7Z0JBQ3ZELElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDO2dCQUNuRCxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQztnQkFDM0QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUM7Z0JBQ3ZELElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztnQkFDbkMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO2dCQUNwRCxRQUFRLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQztnQkFDNUUsVUFBVTs7O2dCQUFDO29CQUNULEtBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQzFCLENBQUMsR0FBQyxHQUFHLENBQUMsQ0FBQzthQUNSO1NBQ0Y7YUFBSTtZQUNILElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDekI7SUFDSCxDQUFDOzs7O0lBRUQsb0NBQVc7OztJQUFYO0lBQ0EsQ0FBQzs7Ozs7O0lBRU8sdUNBQWM7Ozs7O0lBQXRCLFVBQXVCLEtBQWE7UUFDbEMsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2QyxDQUFDOztnQkE5REYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxXQUFXO29CQUNyQiwwNEJBQXFDOztpQkFFdEM7Ozs7Z0JBUE8sWUFBWTs7O3dCQVdqQixLQUFLOzhCQUVMLE1BQU07aUNBR04sS0FBSztpQ0FHTCxLQUFLOztJQStDUixxQkFBQztDQUFBLEFBL0RELElBK0RDO1NBMURZLGNBQWM7Ozs7OztJQUN6QixzQ0FBdU47O0lBRXZOLCtCQUF5Qjs7SUFFekIscUNBQ2lDOztJQUVqQyx3Q0FDdUM7O0lBRXZDLHdDQUMrQjs7SUFFL0Isc0NBQThCOzs7OztJQUdsQixxQ0FBaUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25EZXN0cm95LCBPbkluaXQsIE91dHB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1F1ZXN0aW9ufSBmcm9tICcuLi8uLi9wYWdlcy5tb2RlbCc7XG5pbXBvcnQgKiBhcyBzdXJ2ZXlBY3Rpb25zIGZyb20gJy4uLy4uL3N0b3JlL3N1cnZleS1hY3Rpb25zJztcbmltcG9ydCB7U3VydmV5UmVzcG9uc2VzfSBmcm9tICcuLi8uLi9zdXJ2ZXktcmVzcG9uc2UubW9kZWwnO1xuaW1wb3J0IHtQYWdlc1NlcnZpY2V9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9wYWdlcy1zZXJ2aWNlcy9wYWdlcy5zZXJ2aWNlJztcblxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhcHAtZW1haWwnLFxuICB0ZW1wbGF0ZVVybDogJy4vZW1haWwuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9lbWFpbC5jb21wb25lbnQuY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgRW1haWxDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsT25EZXN0cm95IHtcbiAgcHJpdmF0ZSByZWFkb25seSBFTUFJTF9SRUdFWFAgPW5ldyBSZWdFeHAoJ14oKFtePD4oKVxcXFxbXFxcXF1cXFxcXFxcXC4sOzpcXFxcc0BcIl0rKFxcXFwuW148PigpXFxcXFtcXFxcXVxcXFxcXFxcLiw7OlxcXFxzQFwiXSspKil8KFwiLitcIikpQCgoXFxcXFtbMC05XXsxLDN9XFxcXC5bMC05XXsxLDN9XFxcXC5bMC05XXsxLDN9XFxcXC5bMC05XXsxLDN9XFxcXF0pfCgoW2EtekEtWlxcXFwtMC05XStcXFxcLikrW2EtekEtWl17Mix9KSkkJyk7XG5cbiAgQElucHV0KCkgZW1haWw6IFF1ZXN0aW9uO1xuXG4gIEBPdXRwdXQoKVxuICBzdWJtaXRFdmVudCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBASW5wdXQoKVxuICBwdWJsaWMgc3VydmV5UmVzcG9uc2U6IFN1cnZleVJlc3BvbnNlcztcblxuICBASW5wdXQoKVxuICBwdWJsaWMgaXNMYXN0UXVlc3Rpb246IGJvb2xlYW47XG5cbiAgaXNWYWxpZEVtYWlsIDogYm9vbGVhbiA9IHRydWU7XG5cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBhZ2VTZXJ2aWNlOiBQYWdlc1NlcnZpY2UpIHtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIGlmICh0aGlzLnBhZ2VTZXJ2aWNlLnN0YWdlID09ICdlbnRyeS1uZXh0Jykge1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2VtYWlsLXF1ZXN0aW9uJykuY2xhc3NOYW1lID0gJ2VudHJ5LW5leHQnO1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2VtYWlsLXF1ZXN0aW9uLWRlbGF5JykuY2xhc3NOYW1lID0gJ2VudHJ5LW5leHQtZGVsYXknO1xuICAgIH1lbHNlIGlmICh0aGlzLnBhZ2VTZXJ2aWNlLnN0YWdlID09ICdlbnRyeS1wcmV2aW91cycpIHtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlbWFpbC1xdWVzdGlvbicpLmNsYXNzTmFtZSA9ICdlbnRyeS1wcmV2aW91cy1kZWxheSc7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZW1haWwtcXVlc3Rpb24tZGVsYXknKS5jbGFzc05hbWUgPSAnZW50cnktcHJldmlvdXMnO1xuICAgIH1cbiAgfVxuXG4gIG9uU3VibWl0KHZhbHVlOiBzdHJpbmcpe1xuICAgIGNvbnNvbGUubG9nKHZhbHVlKTtcbiAgICBpZiAodmFsdWUgIT0gdW5kZWZpbmVkKXtcbiAgICAgIHRoaXMuaXNWYWxpZEVtYWlsID0gdGhpcy5pc1ZhbGlkRW1haWxJZCh2YWx1ZSk7XG4gICAgICBjb25zb2xlLmxvZygnSXMgdmFsaWQgZW1haWw6ICcrdGhpcy5pc1ZhbGlkRW1haWwpO1xuICAgICAgaWYgKHRoaXMuaXNWYWxpZEVtYWlsKXtcbiAgICAgICAgdGhpcy5zdXJ2ZXlSZXNwb25zZS5xdWVzdGlvbklkID0gdGhpcy5lbWFpbC5xdWVzdGlvbklkO1xuICAgICAgICB0aGlzLnN1cnZleVJlc3BvbnNlLnF1ZXN0aW9uID0gdGhpcy5lbWFpbC5xdWVzdGlvbjtcbiAgICAgICAgdGhpcy5zdXJ2ZXlSZXNwb25zZS5xdWVzdGlvblR5cGUgPSB0aGlzLmVtYWlsLnF1ZXN0aW9uVHlwZTtcbiAgICAgICAgdGhpcy5zdXJ2ZXlSZXNwb25zZS5pZGVudGlmaWVyID0gdGhpcy5lbWFpbC5pZGVudGlmaWVyO1xuICAgICAgICB0aGlzLnN1cnZleVJlc3BvbnNlLmFuc3dlciA9IHZhbHVlO1xuICAgICAgICB0aGlzLnBhZ2VTZXJ2aWNlLnBlcnNpc3RTdXJ2ZXkodGhpcy5zdXJ2ZXlSZXNwb25zZSk7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidG4tcHJpbWFyeScpLmNsYXNzTGlzdC5hZGQoJ2JsaW5rLWJ0bi1hbmltYXRpb24nKTtcbiAgICAgICAgc2V0VGltZW91dCgoKT0+e1xuICAgICAgICAgIHRoaXMuc3VibWl0RXZlbnQuZW1pdCgpO1xuICAgICAgICB9LDM1MCk7XG4gICAgICB9XG4gICAgfWVsc2V7XG4gICAgICB0aGlzLnN1Ym1pdEV2ZW50LmVtaXQoKTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgfVxuXG4gIHByaXZhdGUgaXNWYWxpZEVtYWlsSWQoZW1haWw6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLkVNQUlMX1JFR0VYUC50ZXN0KGVtYWlsKTtcbiAgfVxufVxuIl19