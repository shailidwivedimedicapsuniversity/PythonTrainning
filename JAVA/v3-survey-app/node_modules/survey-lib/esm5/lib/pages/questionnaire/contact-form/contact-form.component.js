/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/questionnaire/contact-form/contact-form.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input } from '@angular/core';
import { Question } from '../../pages.model';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { PagesService } from '../../../shared/pages-services/pages.service';
var ContactFormComponent = /** @class */ (function () {
    function ContactFormComponent(pagesService) {
        this.pagesService = pagesService;
    }
    /**
     * @return {?}
     */
    ContactFormComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.createForm();
    };
    /**
     * @return {?}
     */
    ContactFormComponent.prototype.createForm = /**
     * @return {?}
     */
    function () {
        var e_1, _a;
        /** @type {?} */
        var formGroup = {};
        try {
            for (var _b = tslib_1.__values(Object.keys(this.contactForm.contactForm)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var prop = _c.value;
                formGroup[prop] = new FormControl(this.contactForm.contactForm[prop].value || '', ContactFormComponent.mapValidators(this.contactForm.contactForm[prop].validation));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.form = new FormGroup(formGroup);
    };
    /**
     * @private
     * @param {?} validators
     * @return {?}
     */
    ContactFormComponent.mapValidators = /**
     * @private
     * @param {?} validators
     * @return {?}
     */
    function (validators) {
        var e_2, _a;
        /** @type {?} */
        var formValidators = [];
        if (validators) {
            try {
                for (var _b = tslib_1.__values(Object.keys(validators)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var validation = _c.value;
                    if (validation === 'required') {
                        formValidators.push(Validators.required);
                    }
                    else if (validation === 'min') {
                        formValidators.push(Validators.min(validators[validation]));
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        return formValidators;
    };
    /**
     * @return {?}
     */
    ContactFormComponent.prototype.onSubmit = /**
     * @return {?}
     */
    function () {
        this.response.contactInfo = this.objectProps;
        this.response.questionId = this.contactForm.questionId;
        this.pagesService.persistSurvey(this.response);
        //console.log(this.dataObject);
        /*  for (let controlsKey in this.form.controls) {
            this.dataObject[controlsKey].value = form[controlsKey];
          }
          console.log(this.dataObject);
          this.response.questionId = this.contactForm.questionId;*/
        //this.response.contactInfo
    };
    ContactFormComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-contact-form',
                    template: "\n<div>\n\n  <form novalidate (ngSubmit)=\"onSubmit()\" [formGroup]=\"form\">\n    <div *ngFor=\"let prop of objectProps\">\n      <label [attr.for]=\"prop\">{{prop.label}}</label>\n\n      <div [ngSwitch]=\"prop.type\">\n        <input *ngSwitchCase=\"'text'\"\n               [formControlName]=\"prop.key\"\n               [id]=\"prop.key\" [type]=\"prop.type\"\n               [(ngModel)] = \"prop.value\">\n\n      </div>\n<!--\n      <div class=\"error\" *ngIf=\"form.get(prop.key).invalid && (form.get(prop.key).dirty || form.get(prop.key).touched)\">\n        <div *ngIf=\"form.get(prop.key).errors.required\">\n          <h6>{{ prop.label }} is required.</h6>\n        </div>\n      </div>-->\n\n\n    </div>\n    <p>\n      <button type=\"submit\">Done</button>\n    </p>\n  </form>\n\n</div>\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ContactFormComponent.ctorParameters = function () { return [
        { type: PagesService }
    ]; };
    ContactFormComponent.propDecorators = {
        contactForm: [{ type: Input }]
    };
    return ContactFormComponent;
}());
export { ContactFormComponent };
if (false) {
    /** @type {?} */
    ContactFormComponent.prototype.contactForm;
    /** @type {?} */
    ContactFormComponent.prototype.form;
    /** @type {?} */
    ContactFormComponent.prototype.objectProps;
    /**
     * @type {?}
     * @private
     */
    ContactFormComponent.prototype.response;
    /**
     * @type {?}
     * @private
     */
    ContactFormComponent.prototype.surveyState;
    /**
     * @type {?}
     * @private
     */
    ContactFormComponent.prototype.pagesService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGFjdC1mb3JtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3N1cnZleS1saWIvIiwic291cmNlcyI6WyJsaWIvcGFnZXMvcXVlc3Rpb25uYWlyZS9jb250YWN0LWZvcm0vY29udGFjdC1mb3JtLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLEtBQUssRUFBUyxNQUFNLGVBQWUsQ0FBQztBQUN2RCxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFDM0MsT0FBTyxFQUFDLFdBQVcsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFLbEUsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLDhDQUE4QyxDQUFDO0FBRTFFO0lBZUUsOEJBQW9CLFlBQTBCO1FBQTFCLGlCQUFZLEdBQVosWUFBWSxDQUFjO0lBQzlDLENBQUM7Ozs7SUFHRCx1Q0FBUTs7O0lBQVI7UUFDRSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFHcEIsQ0FBQzs7OztJQUVELHlDQUFVOzs7SUFBVjs7O1lBRVEsU0FBUyxHQUFHLEVBQUU7O1lBQ3BCLEtBQWdCLElBQUEsS0FBQSxpQkFBQSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUEsZ0JBQUEsNEJBQUU7Z0JBQXZELElBQUksSUFBSSxXQUFBO2dCQUNWLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLElBQUksRUFBRSxFQUFFLG9CQUFvQixDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO2FBQ3RLOzs7Ozs7Ozs7UUFDRCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7Ozs7OztJQUVjLGtDQUFhOzs7OztJQUE1QixVQUE2QixVQUFVOzs7WUFDL0IsY0FBYyxHQUFHLEVBQUU7UUFFekIsSUFBRyxVQUFVLEVBQUU7O2dCQUNiLEtBQXdCLElBQUEsS0FBQSxpQkFBQSxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFBLGdCQUFBLDRCQUFFO29CQUE3QyxJQUFNLFVBQVUsV0FBQTtvQkFDbEIsSUFBRyxVQUFVLEtBQUssVUFBVSxFQUFFO3dCQUM1QixjQUFjLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztxQkFDMUM7eUJBQU0sSUFBRyxVQUFVLEtBQUssS0FBSyxFQUFFO3dCQUM5QixjQUFjLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztxQkFDN0Q7aUJBQ0Y7Ozs7Ozs7OztTQUNGO1FBRUQsT0FBTyxjQUFjLENBQUM7SUFDeEIsQ0FBQzs7OztJQUVELHVDQUFROzs7SUFBUjtRQUNFLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDN0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUM7UUFDdkQsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRy9DLCtCQUErQjtRQUNqQzs7OzttRUFJMkQ7UUFDekQsMkJBQTJCO0lBQzdCLENBQUM7O2dCQS9ERixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjtvQkFDNUIsK3lCQUE0Qzs7aUJBRTdDOzs7O2dCQU5PLFlBQVk7Ozs4QkFTakIsS0FBSzs7SUF5RFIsMkJBQUM7Q0FBQSxBQWhFRCxJQWdFQztTQTNEWSxvQkFBb0I7OztJQUUvQiwyQ0FBK0I7O0lBRS9CLG9DQUFnQjs7SUFDaEIsMkNBQVk7Ozs7O0lBRVosd0NBQWtDOzs7OztJQUNsQywyQ0FBK0Q7Ozs7O0lBRW5ELDRDQUFrQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBJbnB1dCwgT25Jbml0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7UXVlc3Rpb259IGZyb20gJy4uLy4uL3BhZ2VzLm1vZGVsJztcbmltcG9ydCB7Rm9ybUNvbnRyb2wsIEZvcm1Hcm91cCwgVmFsaWRhdG9yc30gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7U3VydmV5UmVzcG9uc2VzfSBmcm9tICcuLi8uLi9zdXJ2ZXktcmVzcG9uc2UubW9kZWwnO1xuaW1wb3J0IHtTdG9yZX0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0ICogYXMgc3VydmV5QWN0aW9ucyBmcm9tICcuLi8uLi9zdG9yZS9zdXJ2ZXktYWN0aW9ucyc7XG5pbXBvcnQge1BhZ2VzU2VydmljZX0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL3BhZ2VzLXNlcnZpY2VzL3BhZ2VzLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhcHAtY29udGFjdC1mb3JtJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2NvbnRhY3QtZm9ybS5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2NvbnRhY3QtZm9ybS5jb21wb25lbnQuY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgQ29udGFjdEZvcm1Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIEBJbnB1dCgpIGNvbnRhY3RGb3JtOiBRdWVzdGlvbjtcblxuICBmb3JtOiBGb3JtR3JvdXA7XG4gIG9iamVjdFByb3BzO1xuXG4gIHByaXZhdGUgcmVzcG9uc2U6IFN1cnZleVJlc3BvbnNlcztcbiAgcHJpdmF0ZSBzdXJ2ZXlTdGF0ZTogT2JzZXJ2YWJsZTx7cmVzcG9uc2U6IFN1cnZleVJlc3BvbnNlc1tdfT47XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBwYWdlc1NlcnZpY2U6IFBhZ2VzU2VydmljZSkge1xuICB9XG5cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmNyZWF0ZUZvcm0oKTtcblxuXG4gIH1cblxuICBjcmVhdGVGb3JtKCl7XG5cbiAgICBjb25zdCBmb3JtR3JvdXAgPSB7fTtcbiAgICBmb3IobGV0IHByb3Agb2YgT2JqZWN0LmtleXModGhpcy5jb250YWN0Rm9ybS5jb250YWN0Rm9ybSkpIHtcbiAgICAgIGZvcm1Hcm91cFtwcm9wXSA9IG5ldyBGb3JtQ29udHJvbCh0aGlzLmNvbnRhY3RGb3JtLmNvbnRhY3RGb3JtW3Byb3BdLnZhbHVlIHx8ICcnLCBDb250YWN0Rm9ybUNvbXBvbmVudC5tYXBWYWxpZGF0b3JzKHRoaXMuY29udGFjdEZvcm0uY29udGFjdEZvcm1bcHJvcF0udmFsaWRhdGlvbikpO1xuICAgIH1cbiAgICB0aGlzLmZvcm0gPSBuZXcgRm9ybUdyb3VwKGZvcm1Hcm91cCk7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBtYXBWYWxpZGF0b3JzKHZhbGlkYXRvcnMpIHtcbiAgICBjb25zdCBmb3JtVmFsaWRhdG9ycyA9IFtdO1xuXG4gICAgaWYodmFsaWRhdG9ycykge1xuICAgICAgZm9yKGNvbnN0IHZhbGlkYXRpb24gb2YgT2JqZWN0LmtleXModmFsaWRhdG9ycykpIHtcbiAgICAgICAgaWYodmFsaWRhdGlvbiA9PT0gJ3JlcXVpcmVkJykge1xuICAgICAgICAgIGZvcm1WYWxpZGF0b3JzLnB1c2goVmFsaWRhdG9ycy5yZXF1aXJlZCk7XG4gICAgICAgIH0gZWxzZSBpZih2YWxpZGF0aW9uID09PSAnbWluJykge1xuICAgICAgICAgIGZvcm1WYWxpZGF0b3JzLnB1c2goVmFsaWRhdG9ycy5taW4odmFsaWRhdG9yc1t2YWxpZGF0aW9uXSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZvcm1WYWxpZGF0b3JzO1xuICB9XG5cbiAgb25TdWJtaXQoKSB7XG4gICAgdGhpcy5yZXNwb25zZS5jb250YWN0SW5mbyA9IHRoaXMub2JqZWN0UHJvcHM7XG4gICAgdGhpcy5yZXNwb25zZS5xdWVzdGlvbklkID0gdGhpcy5jb250YWN0Rm9ybS5xdWVzdGlvbklkO1xuICAgIHRoaXMucGFnZXNTZXJ2aWNlLnBlcnNpc3RTdXJ2ZXkodGhpcy5yZXNwb25zZSk7XG5cblxuICAgIC8vY29uc29sZS5sb2codGhpcy5kYXRhT2JqZWN0KTtcbiAgLyogIGZvciAobGV0IGNvbnRyb2xzS2V5IGluIHRoaXMuZm9ybS5jb250cm9scykge1xuICAgICAgdGhpcy5kYXRhT2JqZWN0W2NvbnRyb2xzS2V5XS52YWx1ZSA9IGZvcm1bY29udHJvbHNLZXldO1xuICAgIH1cbiAgICBjb25zb2xlLmxvZyh0aGlzLmRhdGFPYmplY3QpO1xuICAgIHRoaXMucmVzcG9uc2UucXVlc3Rpb25JZCA9IHRoaXMuY29udGFjdEZvcm0ucXVlc3Rpb25JZDsqL1xuICAgIC8vdGhpcy5yZXNwb25zZS5jb250YWN0SW5mb1xuICB9XG59XG4iXX0=