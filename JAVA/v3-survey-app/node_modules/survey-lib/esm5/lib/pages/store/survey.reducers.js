/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/store/survey.reducers.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import * as SurveyActions from './survey-actions';
/** @type {?} */
var surveyResponseInitialState = [];
/** @type {?} */
var INITIAL_STATE = {
    response: surveyResponseInitialState
};
/**
 * @param {?=} state
 * @param {?=} action
 * @return {?}
 */
export function surveyReducers(state, action) {
    if (state === void 0) { state = INITIAL_STATE; }
    console.log(state);
    switch (action.type) {
        case SurveyActions.SAVE_CHOICE:
            return tslib_1.__assign({}, state, { response: getResponse(state.response, action.payload) });
        case SurveyActions.SAVE_NPS:
            return tslib_1.__assign({}, state, { response: getResponse(state.response, action.payload) });
        case SurveyActions.SAVE_YES_NO:
            return tslib_1.__assign({}, state, { response: getResponse(state.response, action.payload) });
        case SurveyActions.SAVE_RATING:
            return tslib_1.__assign({}, state, { response: getResponse(state.response, action.payload) });
        case SurveyActions.SAVE_DATE:
            return tslib_1.__assign({}, state, { response: getResponse(state.response, action.payload) });
        case SurveyActions.SAVE_EMAIL:
            return tslib_1.__assign({}, state, { response: getResponse(state.response, action.payload) });
        case SurveyActions.SAVE_PHONE:
            return tslib_1.__assign({}, state, { response: getResponse(state.response, action.payload) });
        case SurveyActions.SAVE_AGREE_DISAGREE:
            return tslib_1.__assign({}, state, { response: getResponse(state.response, action.payload) });
        case SurveyActions.SAVE_LONG_TEXT:
            return tslib_1.__assign({}, state, { response: getResponse(state.response, action.payload) });
        case SurveyActions.SAVE_SHORT_TEXT:
            return tslib_1.__assign({}, state, { response: getResponse(state.response, action.payload) });
        case SurveyActions.SAVE_ADDRESS:
            return tslib_1.__assign({}, state, { response: getResponse(state.response, action.payload) });
        case SurveyActions.REMOVE_RESPONSES:
            return tslib_1.__assign({}, state, { response: removeResponse(state.response, action.payload) });
        case SurveyActions.REMOVE_RESPONSES_OF_EXCLUDED_QUESTION_IDS:
            return tslib_1.__assign({}, state, { response: removeResponsesOfExcludedQuestionIds(state.response, action.payload) });
        case SurveyActions.RESET_RESPONSE:
            return INITIAL_STATE;
        default:
            console.log(JSON.stringify(state));
            return state;
    }
}
/**
 * @param {?} responses
 * @param {?} payload
 * @return {?}
 */
function removeResponse(responses, payload) {
    responses.splice(responses.findIndex((/**
     * @param {?} response
     * @return {?}
     */
    function (response) { return response.questionId == payload; })), 1);
    return responses;
}
/**
 * @param {?} response
 * @param {?} payload
 * @return {?}
 */
function getResponse(response, payload) {
    /** @type {?} */
    var index = response.findIndex((/**
     * @param {?} question
     * @return {?}
     */
    function (question) { return question.identifier == payload.identifier; }));
    if (index == undefined || index < 0) {
        return tslib_1.__spread(response, [payload]);
    }
    else {
        response[index] = payload;
        return response;
    }
}
/**
 * @param {?} responses
 * @param {?} payload
 * @return {?}
 */
function removeResponsesOfExcludedQuestionIds(responses, payload) {
    return responses.filter((/**
     * @param {?} response
     * @return {?}
     */
    function (response) { return payload.find((/**
     * @param {?} questionId
     * @return {?}
     */
    function (questionId) { return questionId == response.questionId; })); }));
}
//# sourceMappingURL=data:application/json;base64,