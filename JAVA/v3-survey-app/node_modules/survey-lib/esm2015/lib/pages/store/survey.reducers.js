/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/store/survey.reducers.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as SurveyActions from './survey-actions';
/** @type {?} */
let surveyResponseInitialState = [];
/** @type {?} */
const INITIAL_STATE = {
    response: surveyResponseInitialState
};
/**
 * @param {?=} state
 * @param {?=} action
 * @return {?}
 */
export function surveyReducers(state = INITIAL_STATE, action) {
    console.log(state);
    switch (action.type) {
        case SurveyActions.SAVE_CHOICE:
            return Object.assign({}, state, { response: getResponse(state.response, action.payload) });
        case SurveyActions.SAVE_NPS:
            return Object.assign({}, state, { response: getResponse(state.response, action.payload) });
        case SurveyActions.SAVE_YES_NO:
            return Object.assign({}, state, { response: getResponse(state.response, action.payload) });
        case SurveyActions.SAVE_RATING:
            return Object.assign({}, state, { response: getResponse(state.response, action.payload) });
        case SurveyActions.SAVE_DATE:
            return Object.assign({}, state, { response: getResponse(state.response, action.payload) });
        case SurveyActions.SAVE_EMAIL:
            return Object.assign({}, state, { response: getResponse(state.response, action.payload) });
        case SurveyActions.SAVE_PHONE:
            return Object.assign({}, state, { response: getResponse(state.response, action.payload) });
        case SurveyActions.SAVE_AGREE_DISAGREE:
            return Object.assign({}, state, { response: getResponse(state.response, action.payload) });
        case SurveyActions.SAVE_LONG_TEXT:
            return Object.assign({}, state, { response: getResponse(state.response, action.payload) });
        case SurveyActions.SAVE_SHORT_TEXT:
            return Object.assign({}, state, { response: getResponse(state.response, action.payload) });
        case SurveyActions.SAVE_ADDRESS:
            return Object.assign({}, state, { response: getResponse(state.response, action.payload) });
        case SurveyActions.REMOVE_RESPONSES:
            return Object.assign({}, state, { response: removeResponse(state.response, action.payload) });
        case SurveyActions.REMOVE_RESPONSES_OF_EXCLUDED_QUESTION_IDS:
            return Object.assign({}, state, { response: removeResponsesOfExcludedQuestionIds(state.response, action.payload) });
        case SurveyActions.RESET_RESPONSE:
            return INITIAL_STATE;
        default:
            console.log(JSON.stringify(state));
            return state;
    }
}
/**
 * @param {?} responses
 * @param {?} payload
 * @return {?}
 */
function removeResponse(responses, payload) {
    responses.splice(responses.findIndex((/**
     * @param {?} response
     * @return {?}
     */
    response => response.questionId == payload)), 1);
    return responses;
}
/**
 * @param {?} response
 * @param {?} payload
 * @return {?}
 */
function getResponse(response, payload) {
    /** @type {?} */
    let index = response.findIndex((/**
     * @param {?} question
     * @return {?}
     */
    question => question.identifier == payload.identifier));
    if (index == undefined || index < 0) {
        return [...response, payload];
    }
    else {
        response[index] = payload;
        return response;
    }
}
/**
 * @param {?} responses
 * @param {?} payload
 * @return {?}
 */
function removeResponsesOfExcludedQuestionIds(responses, payload) {
    return responses.filter((/**
     * @param {?} response
     * @return {?}
     */
    response => payload.find((/**
     * @param {?} questionId
     * @return {?}
     */
    questionId => questionId == response.questionId))));
}
//# sourceMappingURL=data:application/json;base64,