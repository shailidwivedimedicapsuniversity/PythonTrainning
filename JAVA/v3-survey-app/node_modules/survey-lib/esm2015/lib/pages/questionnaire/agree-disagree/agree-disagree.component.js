/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/questionnaire/agree-disagree/agree-disagree.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { Question } from '../../pages.model';
import { PagesService } from '../../../shared/pages-services/pages.service';
import { SurveyResponses } from '../../survey-response.model';
export class AgreeDisagreeComponent {
    /**
     * @param {?} pageService
     */
    constructor(pageService) {
        this.pageService = pageService;
        this.submitEvent = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.pageService.stage == 'entry-next') {
            document.getElementById('agree-disagree-question').className = 'entry-next';
            document.getElementById('agree-disagree-question-delay').className = 'entry-next-delay';
        }
        else if (this.pageService.stage == 'entry-previous') {
            document.getElementById('agree-disagree-question').className = 'entry-previous-delay';
            document.getElementById('agree-disagree-question-delay').className = 'entry-previous';
        }
    }
    /**
     * @param {?} answer
     * @return {?}
     */
    onSubmit(answer) {
        if (answer != undefined) {
            this.surveyResponse.questionId = this.agreeDisagree.questionId;
            this.surveyResponse.question = this.agreeDisagree.question;
            this.surveyResponse.questionType = this.agreeDisagree.questionType;
            this.surveyResponse.identifier = this.agreeDisagree.identifier;
            this.surveyResponse.answer = answer;
            this.pageService.persistSurvey(this.surveyResponse);
            answer == 'Agree' ? document.getElementById('agree').classList.add('blink-btn-animation') : '';
            answer == 'Disagree' ? document.getElementById('disagree').classList.add('blink-btn-animation') : '';
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.submitEvent.emit();
            }), 350);
        }
        else {
            this.submitEvent.emit();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
}
AgreeDisagreeComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-agree-disagree',
                template: "<div id=\"agree-disagree-question\">\n<div class=\"survey-statement\">\n  <span *ngIf=\"agreeDisagree.attributes.required\" class=\"isRequired\">*</span>{{agreeDisagree.question}}\n</div>\n<p class=\"question-description\">\n  {{agreeDisagree.attributes.description}}\n</p>\n</div>\n\n\n<div id=\"agree-disagree-question-delay\">\n<button id=\"agree\"\n  [ngClass]=\"surveyResponse.answer == 'Agree'?'btn-secondary agree-disagree-btn btn-focused-state':'btn-secondary agree-disagree-btn'\"\n  (click)=\"onSubmit('Agree')\"><span [ngClass]=\"surveyResponse.answer == 'Agree'?'checkmark checkmark-checked':'checkmark'\"></span><span style=\"margin-left: 10px;\">AGREE</span>\n</button>\n\n<button id=\"disagree\"\n  [ngClass]=\"surveyResponse.answer == 'Disagree'?'btn-secondary agree-disagree-btn btn-focused-state':'btn-secondary agree-disagree-btn'\"\n  (click)=\"onSubmit('Disagree')\"><span [ngClass]=\"surveyResponse.answer == 'Disagree'?'crossmark crossmark-checked':'crossmark'\"></span><span>DISAGREE</span>\n</button>\n\n<div style=\"margin-top: 2%;\" class=\"skip-this-question\" *ngIf=\"!agreeDisagree.attributes.required\">\n  <span (click)=\"onSubmit(undefined)\" >Skip</span>\n</div>\n</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
AgreeDisagreeComponent.ctorParameters = () => [
    { type: PagesService }
];
AgreeDisagreeComponent.propDecorators = {
    agreeDisagree: [{ type: Input }],
    surveyResponse: [{ type: Input }],
    submitEvent: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    AgreeDisagreeComponent.prototype.agreeDisagree;
    /** @type {?} */
    AgreeDisagreeComponent.prototype.surveyResponse;
    /** @type {?} */
    AgreeDisagreeComponent.prototype.submitEvent;
    /**
     * @type {?}
     * @private
     */
    AgreeDisagreeComponent.prototype.pageService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWdyZWUtZGlzYWdyZWUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vc3VydmV5LWxpYi8iLCJzb3VyY2VzIjpbImxpYi9wYWdlcy9xdWVzdGlvbm5haXJlL2FncmVlLWRpc2FncmVlL2FncmVlLWRpc2FncmVlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBcUIsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3hGLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUUzQyxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sOENBQThDLENBQUM7QUFDMUUsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLDZCQUE2QixDQUFDO0FBUTVELE1BQU0sT0FBTyxzQkFBc0I7Ozs7SUFVakMsWUFBb0IsV0FBeUI7UUFBekIsZ0JBQVcsR0FBWCxXQUFXLENBQWM7UUFIbkMsZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBSTNDLENBQUM7Ozs7SUFFRCxRQUFRO1FBQ04sSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssSUFBSSxZQUFZLEVBQUU7WUFDMUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLFNBQVMsR0FBRyxZQUFZLENBQUM7WUFDNUUsUUFBUSxDQUFDLGNBQWMsQ0FBQywrQkFBK0IsQ0FBQyxDQUFDLFNBQVMsR0FBRyxrQkFBa0IsQ0FBQztTQUN6RjthQUFNLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLElBQUksZ0JBQWdCLEVBQUU7WUFDckQsUUFBUSxDQUFDLGNBQWMsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLFNBQVMsR0FBRyxzQkFBc0IsQ0FBQztZQUN0RixRQUFRLENBQUMsY0FBYyxDQUFDLCtCQUErQixDQUFDLENBQUMsU0FBUyxHQUFHLGdCQUFnQixDQUFDO1NBRXZGO0lBQ0gsQ0FBQzs7Ozs7SUFFRCxRQUFRLENBQUMsTUFBYztRQUNyQixJQUFJLE1BQU0sSUFBSSxTQUFTLEVBQUU7WUFDdkIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUM7WUFDL0QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7WUFDM0QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUM7WUFDbkUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUM7WUFDL0QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1lBQ3BDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUNwRCxNQUFNLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQy9GLE1BQU0sSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDckcsVUFBVTs7O1lBQUMsR0FBRyxFQUFFO2dCQUNkLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDMUIsQ0FBQyxHQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQ1Q7YUFBTTtZQUNMLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDekI7SUFDSCxDQUFDOzs7O0lBRUQsV0FBVztJQUNYLENBQUM7OztZQWhERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG9CQUFvQjtnQkFDOUIsa3NDQUE4Qzs7YUFFL0M7Ozs7WUFSTyxZQUFZOzs7NEJBV2pCLEtBQUs7NkJBRUwsS0FBSzswQkFHTCxNQUFNOzs7O0lBTFAsK0NBQWlDOztJQUVqQyxnREFDdUM7O0lBRXZDLDZDQUEyQzs7Ozs7SUFHL0IsNkNBQWlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uRGVzdHJveSwgT25Jbml0LCBPdXRwdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtRdWVzdGlvbn0gZnJvbSAnLi4vLi4vcGFnZXMubW9kZWwnO1xuaW1wb3J0ICogYXMgc3VydmV5QWN0aW9ucyBmcm9tICcuLi8uLi9zdG9yZS9zdXJ2ZXktYWN0aW9ucyc7XG5pbXBvcnQge1BhZ2VzU2VydmljZX0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL3BhZ2VzLXNlcnZpY2VzL3BhZ2VzLnNlcnZpY2UnO1xuaW1wb3J0IHtTdXJ2ZXlSZXNwb25zZXN9IGZyb20gJy4uLy4uL3N1cnZleS1yZXNwb25zZS5tb2RlbCc7XG5cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYXBwLWFncmVlLWRpc2FncmVlJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2FncmVlLWRpc2FncmVlLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vYWdyZWUtZGlzYWdyZWUuY29tcG9uZW50LmNzcyddLFxufSlcbmV4cG9ydCBjbGFzcyBBZ3JlZURpc2FncmVlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuXG4gIEBJbnB1dCgpIGFncmVlRGlzYWdyZWU6IFF1ZXN0aW9uO1xuXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBzdXJ2ZXlSZXNwb25zZTogU3VydmV5UmVzcG9uc2VzO1xuXG4gIEBPdXRwdXQoKSBzdWJtaXRFdmVudCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcGFnZVNlcnZpY2U6IFBhZ2VzU2VydmljZSkge1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgaWYgKHRoaXMucGFnZVNlcnZpY2Uuc3RhZ2UgPT0gJ2VudHJ5LW5leHQnKSB7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYWdyZWUtZGlzYWdyZWUtcXVlc3Rpb24nKS5jbGFzc05hbWUgPSAnZW50cnktbmV4dCc7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYWdyZWUtZGlzYWdyZWUtcXVlc3Rpb24tZGVsYXknKS5jbGFzc05hbWUgPSAnZW50cnktbmV4dC1kZWxheSc7XG4gICAgfSBlbHNlIGlmICh0aGlzLnBhZ2VTZXJ2aWNlLnN0YWdlID09ICdlbnRyeS1wcmV2aW91cycpIHtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhZ3JlZS1kaXNhZ3JlZS1xdWVzdGlvbicpLmNsYXNzTmFtZSA9ICdlbnRyeS1wcmV2aW91cy1kZWxheSc7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYWdyZWUtZGlzYWdyZWUtcXVlc3Rpb24tZGVsYXknKS5jbGFzc05hbWUgPSAnZW50cnktcHJldmlvdXMnO1xuXG4gICAgfVxuICB9XG5cbiAgb25TdWJtaXQoYW5zd2VyOiBzdHJpbmcpIHtcbiAgICBpZiAoYW5zd2VyICE9IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5zdXJ2ZXlSZXNwb25zZS5xdWVzdGlvbklkID0gdGhpcy5hZ3JlZURpc2FncmVlLnF1ZXN0aW9uSWQ7XG4gICAgICB0aGlzLnN1cnZleVJlc3BvbnNlLnF1ZXN0aW9uID0gdGhpcy5hZ3JlZURpc2FncmVlLnF1ZXN0aW9uO1xuICAgICAgdGhpcy5zdXJ2ZXlSZXNwb25zZS5xdWVzdGlvblR5cGUgPSB0aGlzLmFncmVlRGlzYWdyZWUucXVlc3Rpb25UeXBlO1xuICAgICAgdGhpcy5zdXJ2ZXlSZXNwb25zZS5pZGVudGlmaWVyID0gdGhpcy5hZ3JlZURpc2FncmVlLmlkZW50aWZpZXI7XG4gICAgICB0aGlzLnN1cnZleVJlc3BvbnNlLmFuc3dlciA9IGFuc3dlcjtcbiAgICAgIHRoaXMucGFnZVNlcnZpY2UucGVyc2lzdFN1cnZleSh0aGlzLnN1cnZleVJlc3BvbnNlKTtcbiAgICAgIGFuc3dlciA9PSAnQWdyZWUnID8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FncmVlJykuY2xhc3NMaXN0LmFkZCgnYmxpbmstYnRuLWFuaW1hdGlvbicpIDogJyc7XG4gICAgICBhbnN3ZXIgPT0gJ0Rpc2FncmVlJyA/IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkaXNhZ3JlZScpLmNsYXNzTGlzdC5hZGQoJ2JsaW5rLWJ0bi1hbmltYXRpb24nKSA6ICcnO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuc3VibWl0RXZlbnQuZW1pdCgpO1xuICAgICAgfSwgMzUwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdWJtaXRFdmVudC5lbWl0KCk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gIH1cbn1cbiJdfQ==