/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/questionnaire/expression-builder.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
export class ExpressionBuilder {
    constructor() {
        this.IS_EQUALS_TO = 'Is equals to';
        this.IS_NOT_EQUALS_TO = 'Is not equals to';
        this.IS_LESS_THAN = 'Is less than';
        this.IS_GREATER_THAN = 'Is greater than';
        this.IS_LESS_THAN_OR_EQUALS_TO = 'Is less than or equals to';
        this.IS_GREATER_THAN_OR_EQUALS_TO = 'Is grater than or equals to';
        this.IS = 'Is';
        this.IS_NOT = 'Is not';
        this.IS_ON = "Is on";
        this.IS_NOT_ON = "Is not on";
        this.IS_BEFORE = "Is before";
        this.IS_AFTER = "Is after";
        this.IS_BEFORE_OR_ON = "Is before or on";
        this.IS_AFTER_OR_ON = "Is after or on";
        this.IS_BETWEEN = "Is between";
        this.IS_BEGINS_WITH = "Is begins with";
        this.IS_ENDS_WITH = "Is ends with";
        this.CONTAINS = "Contains";
        this.DOES_NOT_CONTAINS = "Does not contains";
    }
    /**
     * @param {?} conditions
     * @param {?} responses
     * @param {?} questionType
     * @return {?}
     */
    build(conditions, responses, questionType) {
        /** @type {?} */
        let expression = '';
        switch (questionType) {
            case 'Drop down':
            case 'Choice':
                for (let condition of conditions) {
                    /** @type {?} */
                    let result = this.evaluateChoiceConditions(condition, responses[responses.findIndex((/**
                     * @param {?} res
                     * @return {?}
                     */
                    res => res.questionId == condition._if))]);
                    if (condition.relationWithNextCondition != undefined)
                        expression += result + ' ' + condition.relationWithNextCondition + ' ';
                    else
                        expression += result + ' ';
                }
                break;
            case 'Yes No':
                for (let condition of conditions) {
                    /** @type {?} */
                    let result = this.evaluateYesNoConditions(condition, responses[responses.findIndex((/**
                     * @param {?} res
                     * @return {?}
                     */
                    res => res.questionId == condition._if))]);
                    if (condition.relationWithNextCondition != undefined)
                        expression += result + ' ' + condition.relationWithNextCondition + ' ';
                    else
                        expression += result + ' ';
                }
                break;
            case 'Rating':
                for (let i = 0; i < conditions.length; i++) {
                    /** @type {?} */
                    let result = this.evaluateRatingConditions(conditions[i], responses[responses.findIndex((/**
                     * @param {?} res
                     * @return {?}
                     */
                    res => res.questionId == conditions[i]._if))]);
                    console.warn(result);
                    if ((i + 1) < conditions.length) {
                        expression += result + ' ' + conditions[i].relationWithNextCondition + ' ';
                    }
                    else {
                        expression += result + ' ';
                    }
                }
                break;
            case 'Nps':
                for (let i = 0; i < conditions.length; i++) {
                    /** @type {?} */
                    let result = this.evaluateNPSConditions(conditions[i], responses[responses.findIndex((/**
                     * @param {?} res
                     * @return {?}
                     */
                    res => res.questionId == conditions[i]._if))]);
                    console.warn(result);
                    if ((i + 1) < conditions.length) {
                        expression += result + ' ' + conditions[i].relationWithNextCondition + ' ';
                    }
                    else {
                        expression += result + ' ';
                    }
                }
                break;
            case 'Date':
                for (let condition of conditions) {
                    /** @type {?} */
                    let result = this.evaluateDateConditions(condition, responses[responses.findIndex((/**
                     * @param {?} res
                     * @return {?}
                     */
                    res => res.questionId == condition._if))]);
                    if (condition.relationWithNextCondition != undefined) {
                        expression += result + ' ' + condition.relationWithNextCondition + ' ';
                    }
                    else {
                        expression += result + ' ';
                    }
                }
                break;
            case 'Short text':
                for (let condition of conditions) {
                    /** @type {?} */
                    let result = this.evaluateTextConditions(condition, responses[responses.findIndex((/**
                     * @param {?} res
                     * @return {?}
                     */
                    res => res.questionId == condition._if))]);
                    if (condition.relationWithNextCondition != undefined) {
                        expression += result + ' ' + condition.relationWithNextCondition + ' ';
                    }
                    else {
                        expression += result + ' ';
                    }
                }
                break;
            default:
                break;
        }
        return expression;
    }
    /**
     * @private
     * @param {?} condition
     * @param {?} currentResponse
     * @return {?}
     */
    evaluateChoiceConditions(condition, currentResponse) {
        return condition.condition == this.IS ?
            currentResponse.choices.some((/**
             * @param {?} choice
             * @return {?}
             */
            choice => choice.choiceId == condition._this)) :
            !currentResponse.choices.some((/**
             * @param {?} choice
             * @return {?}
             */
            choice => choice.choiceId == condition._this));
    }
    /**
     * @private
     * @param {?} condition
     * @param {?} response
     * @return {?}
     */
    evaluateRatingConditions(condition, response) {
        console.warn(response);
        switch (condition.condition) {
            case this.IS_EQUALS_TO:
                return (response.rating == condition._this);
            case this.IS_NOT_EQUALS_TO:
                return (response.rating != condition._this);
            case this.IS_LESS_THAN:
                return (response.rating < condition._this);
            case this.IS_GREATER_THAN:
                return (response.rating > condition._this);
            case this.IS_LESS_THAN_OR_EQUALS_TO:
                return (response.rating <= condition._this);
            case this.IS_GREATER_THAN_OR_EQUALS_TO:
                return (response.rating >= condition._this);
            default:
                return false;
        }
    }
    /**
     * @private
     * @param {?} condition
     * @param {?} response
     * @return {?}
     */
    evaluateNPSConditions(condition, response) {
        console.warn(response);
        switch (condition.condition) {
            case this.IS:
                return RegExp(condition._this).test(response.rating + '');
            case this.IS_NOT:
                return !RegExp(condition._this).test(response.rating + '');
            default:
                return false;
        }
    }
    /**
     * @private
     * @param {?} condition
     * @param {?} currentResponse
     * @return {?}
     */
    evaluateYesNoConditions(condition, currentResponse) {
        return condition.condition == this.IS ?
            currentResponse.answer == condition._this :
            !currentResponse.answer == condition._this;
    }
    /**
     * @private
     * @param {?} condition
     * @param {?} currentResponse
     * @return {?}
     */
    evaluateDateConditions(condition, currentResponse) {
        /** @type {?} */
        let thisDate = new Date(condition._this);
        /** @type {?} */
        let responseDate = new Date(currentResponse.answer);
        switch (condition.condition) {
            case this.IS_ON:
                return responseDate == thisDate;
            case this.IS_NOT_ON:
                return responseDate != thisDate;
            case this.IS_BEFORE:
                return responseDate < thisDate;
            case this.IS_AFTER:
                return responseDate > thisDate;
            case this.IS_BEFORE_OR_ON:
                return responseDate <= thisDate;
            case this.IS_AFTER_OR_ON:
                return responseDate >= thisDate;
            //todo Expression for date between range.
            case this.IS_BETWEEN:
                return true;
            default:
                return false;
        }
    }
    /**
     * @private
     * @param {?} condition
     * @param {?} currentResponse
     * @return {?}
     */
    evaluateTextConditions(condition, currentResponse) {
        switch (condition.condition) {
            case this.IS_EQUALS_TO:
                return currentResponse.answer == condition._this;
            case this.IS_BEGINS_WITH:
                return currentResponse.answer.startsWith(condition._this);
            case this.IS_ENDS_WITH:
                return currentResponse.answer.endsWith(condition._this);
            case this.CONTAINS:
                return currentResponse.answer.includes(condition._this);
            case this.DOES_NOT_CONTAINS:
                return !currentResponse.answer.includes(condition._this);
            default:
                return false;
        }
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    ExpressionBuilder.prototype.IS_EQUALS_TO;
    /**
     * @type {?}
     * @private
     */
    ExpressionBuilder.prototype.IS_NOT_EQUALS_TO;
    /**
     * @type {?}
     * @private
     */
    ExpressionBuilder.prototype.IS_LESS_THAN;
    /**
     * @type {?}
     * @private
     */
    ExpressionBuilder.prototype.IS_GREATER_THAN;
    /**
     * @type {?}
     * @private
     */
    ExpressionBuilder.prototype.IS_LESS_THAN_OR_EQUALS_TO;
    /**
     * @type {?}
     * @private
     */
    ExpressionBuilder.prototype.IS_GREATER_THAN_OR_EQUALS_TO;
    /**
     * @type {?}
     * @private
     */
    ExpressionBuilder.prototype.IS;
    /**
     * @type {?}
     * @private
     */
    ExpressionBuilder.prototype.IS_NOT;
    /**
     * @type {?}
     * @private
     */
    ExpressionBuilder.prototype.IS_ON;
    /**
     * @type {?}
     * @private
     */
    ExpressionBuilder.prototype.IS_NOT_ON;
    /**
     * @type {?}
     * @private
     */
    ExpressionBuilder.prototype.IS_BEFORE;
    /**
     * @type {?}
     * @private
     */
    ExpressionBuilder.prototype.IS_AFTER;
    /**
     * @type {?}
     * @private
     */
    ExpressionBuilder.prototype.IS_BEFORE_OR_ON;
    /**
     * @type {?}
     * @private
     */
    ExpressionBuilder.prototype.IS_AFTER_OR_ON;
    /**
     * @type {?}
     * @private
     */
    ExpressionBuilder.prototype.IS_BETWEEN;
    /**
     * @type {?}
     * @private
     */
    ExpressionBuilder.prototype.IS_BEGINS_WITH;
    /**
     * @type {?}
     * @private
     */
    ExpressionBuilder.prototype.IS_ENDS_WITH;
    /**
     * @type {?}
     * @private
     */
    ExpressionBuilder.prototype.CONTAINS;
    /**
     * @type {?}
     * @private
     */
    ExpressionBuilder.prototype.DOES_NOT_CONTAINS;
}
//# sourceMappingURL=data:application/json;base64,