/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/questionnaire/website/website.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { Question } from '../../pages.model';
import { SurveyResponses } from '../../survey-response.model';
import { PagesService } from '../../../shared/pages-services/pages.service';
export class WebsiteComponent {
    /**
     * @param {?} pageService
     */
    constructor(pageService) {
        this.pageService = pageService;
        this.URL_REGEXP = new RegExp('^[A-Za-z][A-Za-z\\d.+-]*:\\/*(?:\\w+(?::\\w+)?@)?[^\\s/]+(?::\\d+)?(?:\\/[\\w#!:.?+=&%@\\-/]*)?$');
        this.submitEvent = new EventEmitter();
        this.isValidUrl = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.pageService.stage == 'entry-next') {
            document.getElementById('website-question').className = 'entry-next';
            document.getElementById('website-question-delay').className = 'entry-next-delay';
        }
        else if (this.pageService.stage == 'entry-previous') {
            document.getElementById('website-question').className = 'entry-previous-delay';
            document.getElementById('website-question-delay').className = 'entry-previous';
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onSubmit(value) {
        console.log(value);
        if (value != undefined) {
            this.isValidUrl = this.test(value);
            if (this.isValidUrl) {
                this.surveyResponse.questionId = this.website.questionId;
                this.surveyResponse.question = this.website.question;
                this.surveyResponse.questionType = this.website.questionType;
                this.surveyResponse.identifier = this.website.identifier;
                this.surveyResponse.answer = value;
                this.pageService.persistSurvey(this.surveyResponse);
                document.getElementById('btn-primary').classList.add('blink-btn-animation');
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.submitEvent.emit();
                }), 350);
            }
        }
        else {
            this.submitEvent.emit();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    test(url) {
        return this.URL_REGEXP.test(url);
    }
}
WebsiteComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-website',
                template: "<div id=\"website-question\">\n<div class=\"survey-statement\">\n    <span *ngIf=\"website.attributes.required\" class=\"isRequired\">*</span>{{website.question}}\n</div>\n<p class=\"question-description\">\n    {{website.attributes.description}}\n  </p>\n</div>\n\n<div id=\"website-question-delay\">\n<input class=\"survey-input-text-box\" #websiteInput\n       type=\"url\"\n       name=\"name\"\n       [(ngModel)]=\"surveyResponse.answer\"\n       placeholder=\"Enter website url\">\n  <div *ngIf=\"!isValidUrl\" class=\"validation-error-msg\">Please enter valid URL</div>\n<button class=\"btn-primary\" id=\"btn-primary\" type=\"submit\" name=\"name\" (click)=\"onSubmit(websiteInput.value)\">{{isLastQuestion?'Submit': 'Done'}}</button>\n\n<span\n  (click)=\"onSubmit(undefined)\"\n  *ngIf=\"!website.attributes.required\" class=\"skip-this-question skip-this-question-marginLeft\">Skip</span>\n</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
WebsiteComponent.ctorParameters = () => [
    { type: PagesService }
];
WebsiteComponent.propDecorators = {
    website: [{ type: Input }],
    surveyResponse: [{ type: Input }],
    submitEvent: [{ type: Output }],
    isLastQuestion: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    WebsiteComponent.prototype.URL_REGEXP;
    /** @type {?} */
    WebsiteComponent.prototype.website;
    /** @type {?} */
    WebsiteComponent.prototype.surveyResponse;
    /** @type {?} */
    WebsiteComponent.prototype.submitEvent;
    /** @type {?} */
    WebsiteComponent.prototype.isValidUrl;
    /** @type {?} */
    WebsiteComponent.prototype.isLastQuestion;
    /**
     * @type {?}
     * @private
     */
    WebsiteComponent.prototype.pageService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vic2l0ZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9zdXJ2ZXktbGliLyIsInNvdXJjZXMiOlsibGliL3BhZ2VzL3F1ZXN0aW9ubmFpcmUvd2Vic2l0ZS93ZWJzaXRlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBcUIsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3hGLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUMzQyxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFFNUQsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLDhDQUE4QyxDQUFDO0FBUzFFLE1BQU0sT0FBTyxnQkFBZ0I7Ozs7SUFrQjNCLFlBQW9CLFdBQXlCO1FBQXpCLGdCQUFXLEdBQVgsV0FBVyxDQUFjO1FBaEI1QixlQUFVLEdBQUUsSUFBSSxNQUFNLENBQUMsa0dBQWtHLENBQUMsQ0FBQztRQVE1SSxnQkFBVyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFFakMsZUFBVSxHQUFhLElBQUksQ0FBQztJQU81QixDQUFDOzs7O0lBRUQsUUFBUTtRQUNOLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLElBQUksWUFBWSxFQUFFO1lBQzFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxTQUFTLEdBQUcsWUFBWSxDQUFDO1lBQ3JFLFFBQVEsQ0FBQyxjQUFjLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxTQUFTLEdBQUcsa0JBQWtCLENBQUM7U0FDbEY7YUFBSyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxJQUFJLGdCQUFnQixFQUFFO1lBQ3BELFFBQVEsQ0FBQyxjQUFjLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxTQUFTLEdBQUcsc0JBQXNCLENBQUM7WUFDL0UsUUFBUSxDQUFDLGNBQWMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLFNBQVMsR0FBRyxnQkFBZ0IsQ0FBQztTQUNoRjtJQUNILENBQUM7Ozs7O0lBRUQsUUFBUSxDQUFDLEtBQWE7UUFDcEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuQixJQUFJLEtBQUssSUFBSSxTQUFTLEVBQUM7WUFDckIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ25DLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBQztnQkFDbEIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUM7Z0JBQ3pELElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDO2dCQUNyRCxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQztnQkFDN0QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUM7Z0JBQ3pELElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztnQkFDbkMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO2dCQUNwRCxRQUFRLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQztnQkFDNUUsVUFBVTs7O2dCQUFDLEdBQUcsRUFBRTtvQkFDZCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUMxQixDQUFDLEdBQUMsR0FBRyxDQUFDLENBQUM7YUFDUjtTQUNGO2FBQUk7WUFDSCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ3pCO0lBQ0gsQ0FBQzs7OztJQUVELFdBQVc7SUFDWCxDQUFDOzs7Ozs7SUFJTyxJQUFJLENBQUMsR0FBVztRQUN0QixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ25DLENBQUM7OztZQWhFRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGFBQWE7Z0JBQ3ZCLDA1QkFBdUM7O2FBRXhDOzs7O1lBUk8sWUFBWTs7O3NCQWFqQixLQUFLOzZCQUVMLEtBQUs7MEJBR0wsTUFBTTs2QkFLTixLQUFLOzs7Ozs7O0lBWk4sc0NBQTRJOztJQUU1SSxtQ0FBMkI7O0lBRTNCLDBDQUNnQzs7SUFFaEMsdUNBQ2lDOztJQUVqQyxzQ0FBNEI7O0lBRTVCLDBDQUMrQjs7Ozs7SUFHbkIsdUNBQWlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uRGVzdHJveSwgT25Jbml0LCBPdXRwdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtRdWVzdGlvbn0gZnJvbSAnLi4vLi4vcGFnZXMubW9kZWwnO1xuaW1wb3J0IHtTdXJ2ZXlSZXNwb25zZXN9IGZyb20gJy4uLy4uL3N1cnZleS1yZXNwb25zZS5tb2RlbCc7XG5pbXBvcnQgKiBhcyBzdXJ2ZXlBY3Rpb25zIGZyb20gJy4uLy4uL3N0b3JlL3N1cnZleS1hY3Rpb25zJztcbmltcG9ydCB7UGFnZXNTZXJ2aWNlfSBmcm9tICcuLi8uLi8uLi9zaGFyZWQvcGFnZXMtc2VydmljZXMvcGFnZXMuc2VydmljZSc7XG5pbXBvcnQge0NvbW1vblV0aWxzfSBmcm9tICcuLi8uLi8uLi9zaGFyZWQvY29tbW9uLnV0aWxzJztcblxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhcHAtd2Vic2l0ZScsXG4gIHRlbXBsYXRlVXJsOiAnLi93ZWJzaXRlLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vd2Vic2l0ZS5jb21wb25lbnQuY3NzJ10sXG59KVxuZXhwb3J0IGNsYXNzIFdlYnNpdGVDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsT25EZXN0cm95IHtcblxuICBwcml2YXRlIHJlYWRvbmx5IFVSTF9SRUdFWFAgPW5ldyBSZWdFeHAoJ15bQS1aYS16XVtBLVphLXpcXFxcZC4rLV0qOlxcXFwvKig/OlxcXFx3Kyg/OjpcXFxcdyspP0ApP1teXFxcXHMvXSsoPzo6XFxcXGQrKT8oPzpcXFxcL1tcXFxcdyMhOi4/Kz0mJUBcXFxcLS9dKik/JCcpO1xuXG4gIEBJbnB1dCgpIHdlYnNpdGU6IFF1ZXN0aW9uO1xuXG4gIEBJbnB1dCgpXG4gIHN1cnZleVJlc3BvbnNlOiBTdXJ2ZXlSZXNwb25zZXM7XG5cbiAgQE91dHB1dCgpXG4gIHN1Ym1pdEV2ZW50ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIGlzVmFsaWRVcmwgOiBib29sZWFuID0gdHJ1ZTtcblxuICBASW5wdXQoKVxuICBwdWJsaWMgaXNMYXN0UXVlc3Rpb246IGJvb2xlYW47XG5cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBhZ2VTZXJ2aWNlOiBQYWdlc1NlcnZpY2UpIHtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIGlmICh0aGlzLnBhZ2VTZXJ2aWNlLnN0YWdlID09ICdlbnRyeS1uZXh0Jykge1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3dlYnNpdGUtcXVlc3Rpb24nKS5jbGFzc05hbWUgPSAnZW50cnktbmV4dCc7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd2Vic2l0ZS1xdWVzdGlvbi1kZWxheScpLmNsYXNzTmFtZSA9ICdlbnRyeS1uZXh0LWRlbGF5JztcbiAgICB9ZWxzZSBpZiAodGhpcy5wYWdlU2VydmljZS5zdGFnZSA9PSAnZW50cnktcHJldmlvdXMnKSB7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd2Vic2l0ZS1xdWVzdGlvbicpLmNsYXNzTmFtZSA9ICdlbnRyeS1wcmV2aW91cy1kZWxheSc7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd2Vic2l0ZS1xdWVzdGlvbi1kZWxheScpLmNsYXNzTmFtZSA9ICdlbnRyeS1wcmV2aW91cyc7XG4gICAgfVxuICB9XG5cbiAgb25TdWJtaXQodmFsdWU6IHN0cmluZyl7XG4gICAgY29uc29sZS5sb2codmFsdWUpO1xuICAgIGlmICh2YWx1ZSAhPSB1bmRlZmluZWQpe1xuICAgICAgdGhpcy5pc1ZhbGlkVXJsID0gdGhpcy50ZXN0KHZhbHVlKTtcbiAgICAgIGlmICh0aGlzLmlzVmFsaWRVcmwpe1xuICAgICAgICB0aGlzLnN1cnZleVJlc3BvbnNlLnF1ZXN0aW9uSWQgPSB0aGlzLndlYnNpdGUucXVlc3Rpb25JZDtcbiAgICAgICAgdGhpcy5zdXJ2ZXlSZXNwb25zZS5xdWVzdGlvbiA9IHRoaXMud2Vic2l0ZS5xdWVzdGlvbjtcbiAgICAgICAgdGhpcy5zdXJ2ZXlSZXNwb25zZS5xdWVzdGlvblR5cGUgPSB0aGlzLndlYnNpdGUucXVlc3Rpb25UeXBlO1xuICAgICAgICB0aGlzLnN1cnZleVJlc3BvbnNlLmlkZW50aWZpZXIgPSB0aGlzLndlYnNpdGUuaWRlbnRpZmllcjtcbiAgICAgICAgdGhpcy5zdXJ2ZXlSZXNwb25zZS5hbnN3ZXIgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5wYWdlU2VydmljZS5wZXJzaXN0U3VydmV5KHRoaXMuc3VydmV5UmVzcG9uc2UpO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnRuLXByaW1hcnknKS5jbGFzc0xpc3QuYWRkKCdibGluay1idG4tYW5pbWF0aW9uJyk7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRoaXMuc3VibWl0RXZlbnQuZW1pdCgpO1xuICAgICAgICB9LDM1MCk7XG4gICAgICB9XG4gICAgfWVsc2V7XG4gICAgICB0aGlzLnN1Ym1pdEV2ZW50LmVtaXQoKTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgfVxuXG5cblxuICBwcml2YXRlIHRlc3QodXJsOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5VUkxfUkVHRVhQLnRlc3QodXJsKTtcbiAgfVxufVxuIl19