/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/questionnaire/mandatory-question-validation.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
export class MandatoryQuestionValidation {
    constructor() {
    }
    /**
     * @param {?} questionType
     * @param {?} response
     * @return {?}
     */
    isQuestionAnswered(questionType, response) {
        console.log('Inside isQuestionAnswered!');
        console.log('Question type: ' + questionType);
        if (response == undefined)
            return false;
        switch (questionType) {
            case 'Address':
                return this.isAddressFormAnswered(response);
            case 'Choice':
                return this.isChoiceQuestionAnswered(response);
            case 'Contact form':
                return this.isContactFormAnswered(response);
            case 'Date':
                return this.isDateQuestionAnswered(response);
            case 'Drop Down':
                return this.isDropDownQuestionAnswered(response);
            case 'Email':
                return this.isEmailQuestionAnswered(response);
            case 'Short text':
            case 'Long text':
                return this.isTextQuestionAnswered(response);
            case 'Nps':
            case 'Rating':
                return this.isRatingQuestionAnswered(response);
            case 'Statement':
                return this.isStatementQuestionAnswered(response);
            case 'Yes No':
            case 'Legal':
                return this.isYesNoQuestionAnswered(response);
            default: return false;
        }
    }
    /**
     * @private
     * @param {?} response
     * @return {?}
     */
    isAddressFormAnswered(response) {
        return false;
    }
    /**
     * @private
     * @param {?} response
     * @return {?}
     */
    isContactFormAnswered(response) {
        return false;
    }
    /**
     * @private
     * @param {?} response
     * @return {?}
     */
    isChoiceQuestionAnswered(response) {
        return response.choices != undefined && response.choices.length > 0;
    }
    /**
     * @private
     * @param {?} response
     * @return {?}
     */
    isDateQuestionAnswered(response) {
        return response.answer != undefined && response.answer.length > 0;
    }
    /**
     * @private
     * @param {?} response
     * @return {?}
     */
    isDropDownQuestionAnswered(response) {
        return response.answerId != undefined;
    }
    /**
     * @private
     * @param {?} response
     * @return {?}
     */
    isEmailQuestionAnswered(response) {
        return response.answer != undefined && response.answer.length > 0;
    }
    /**
     * @private
     * @param {?} response
     * @return {?}
     */
    isTextQuestionAnswered(response) {
        return response.answer != undefined && response.answer.length > 0;
    }
    /**
     * @private
     * @param {?} response
     * @return {?}
     */
    isRatingQuestionAnswered(response) {
        return response.rating != undefined && response.rating > -1;
    }
    /**
     * @private
     * @param {?} response
     * @return {?}
     */
    isStatementQuestionAnswered(response) {
        return false;
    }
    /**
     * @private
     * @param {?} response
     * @return {?}
     */
    isYesNoQuestionAnswered(response) {
        return response.answer != undefined && response.answer.length > 0;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFuZGF0b3J5LXF1ZXN0aW9uLXZhbGlkYXRpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9zdXJ2ZXktbGliLyIsInNvdXJjZXMiOlsibGliL3BhZ2VzL3F1ZXN0aW9ubmFpcmUvbWFuZGF0b3J5LXF1ZXN0aW9uLXZhbGlkYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQSxNQUFNLE9BQU8sMkJBQTJCO0lBR3RDO0lBQ0EsQ0FBQzs7Ozs7O0lBRU0sa0JBQWtCLENBQUMsWUFBb0IsRUFDcEIsUUFBeUI7UUFDakQsT0FBTyxDQUFDLEdBQUcsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO1FBQzFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEdBQUMsWUFBWSxDQUFDLENBQUM7UUFFNUMsSUFBSSxRQUFRLElBQUksU0FBUztZQUN2QixPQUFPLEtBQUssQ0FBQztRQUVmLFFBQVEsWUFBWSxFQUFFO1lBRXBCLEtBQUssU0FBUztnQkFDWixPQUFPLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUU5QyxLQUFLLFFBQVE7Z0JBQ1gsT0FBTyxJQUFJLENBQUMsd0JBQXdCLENBQUMsUUFBUSxDQUFDLENBQUM7WUFFakQsS0FBSyxjQUFjO2dCQUNqQixPQUFPLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUU5QyxLQUFLLE1BQU07Z0JBQ1QsT0FBTyxJQUFJLENBQUMsc0JBQXNCLENBQUMsUUFBUSxDQUFDLENBQUM7WUFFL0MsS0FBSyxXQUFXO2dCQUNkLE9BQU8sSUFBSSxDQUFDLDBCQUEwQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBRW5ELEtBQUssT0FBTztnQkFDVixPQUFPLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUVoRCxLQUFLLFlBQVksQ0FBQztZQUNsQixLQUFLLFdBQVc7Z0JBQ2QsT0FBTyxJQUFJLENBQUMsc0JBQXNCLENBQUMsUUFBUSxDQUFDLENBQUM7WUFFL0MsS0FBSyxLQUFLLENBQUM7WUFDWCxLQUFLLFFBQVE7Z0JBQ1gsT0FBTyxJQUFJLENBQUMsd0JBQXdCLENBQUMsUUFBUSxDQUFDLENBQUM7WUFFakQsS0FBSyxXQUFXO2dCQUNkLE9BQU8sSUFBSSxDQUFDLDJCQUEyQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBRXBELEtBQUssUUFBUSxDQUFDO1lBQ2QsS0FBSyxPQUFPO2dCQUNWLE9BQU8sSUFBSSxDQUFDLHVCQUF1QixDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBRWhELE9BQU8sQ0FBQyxDQUFDLE9BQU8sS0FBSyxDQUFDO1NBQ3ZCO0lBQ0gsQ0FBQzs7Ozs7O0lBRU8scUJBQXFCLENBQUMsUUFBeUI7UUFDckQsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDOzs7Ozs7SUFFTyxxQkFBcUIsQ0FBQyxRQUF5QjtRQUNyRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7Ozs7OztJQUVPLHdCQUF3QixDQUFDLFFBQXlCO1FBQ3hELE9BQU8sUUFBUSxDQUFDLE9BQU8sSUFBSSxTQUFTLElBQUksUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7Ozs7OztJQUdPLHNCQUFzQixDQUFDLFFBQXlCO1FBQ3RELE9BQU8sUUFBUSxDQUFDLE1BQU0sSUFBSSxTQUFTLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ3BFLENBQUM7Ozs7OztJQUVPLDBCQUEwQixDQUFDLFFBQXlCO1FBQzFELE9BQU8sUUFBUSxDQUFDLFFBQVEsSUFBSSxTQUFTLENBQUM7SUFDeEMsQ0FBQzs7Ozs7O0lBRU8sdUJBQXVCLENBQUMsUUFBeUI7UUFDdkQsT0FBTyxRQUFRLENBQUMsTUFBTSxJQUFJLFNBQVMsSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDcEUsQ0FBQzs7Ozs7O0lBRU8sc0JBQXNCLENBQUMsUUFBeUI7UUFDdEQsT0FBTyxRQUFRLENBQUMsTUFBTSxJQUFJLFNBQVMsSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDcEUsQ0FBQzs7Ozs7O0lBRU8sd0JBQXdCLENBQUMsUUFBeUI7UUFDeEQsT0FBTyxRQUFRLENBQUMsTUFBTSxJQUFJLFNBQVMsSUFBSSxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzlELENBQUM7Ozs7OztJQUVPLDJCQUEyQixDQUFDLFFBQXlCO1FBQzNELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQzs7Ozs7O0lBRU8sdUJBQXVCLENBQUMsUUFBeUI7UUFDdkQsT0FBTyxRQUFRLENBQUMsTUFBTSxJQUFJLFNBQVMsSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDcEUsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTdXJ2ZXlSZXNwb25zZXN9IGZyb20gJy4uL3N1cnZleS1yZXNwb25zZS5tb2RlbCc7XG5cbmV4cG9ydCBjbGFzcyBNYW5kYXRvcnlRdWVzdGlvblZhbGlkYXRpb24ge1xuXG5cbiAgY29uc3RydWN0b3IoKSB7XG4gIH1cblxuICBwdWJsaWMgaXNRdWVzdGlvbkFuc3dlcmVkKHF1ZXN0aW9uVHlwZTogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlOiBTdXJ2ZXlSZXNwb25zZXMpOiBib29sZWFue1xuICAgIGNvbnNvbGUubG9nKCdJbnNpZGUgaXNRdWVzdGlvbkFuc3dlcmVkIScpO1xuICAgIGNvbnNvbGUubG9nKCdRdWVzdGlvbiB0eXBlOiAnK3F1ZXN0aW9uVHlwZSk7XG5cbiAgICBpZiAocmVzcG9uc2UgPT0gdW5kZWZpbmVkKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgc3dpdGNoIChxdWVzdGlvblR5cGUpIHtcblxuICAgICAgY2FzZSAnQWRkcmVzcyc6XG4gICAgICAgIHJldHVybiB0aGlzLmlzQWRkcmVzc0Zvcm1BbnN3ZXJlZChyZXNwb25zZSk7XG5cbiAgICAgIGNhc2UgJ0Nob2ljZSc6XG4gICAgICAgIHJldHVybiB0aGlzLmlzQ2hvaWNlUXVlc3Rpb25BbnN3ZXJlZChyZXNwb25zZSk7XG5cbiAgICAgIGNhc2UgJ0NvbnRhY3QgZm9ybSc6XG4gICAgICAgIHJldHVybiB0aGlzLmlzQ29udGFjdEZvcm1BbnN3ZXJlZChyZXNwb25zZSk7XG5cbiAgICAgIGNhc2UgJ0RhdGUnOlxuICAgICAgICByZXR1cm4gdGhpcy5pc0RhdGVRdWVzdGlvbkFuc3dlcmVkKHJlc3BvbnNlKTtcblxuICAgICAgY2FzZSAnRHJvcCBEb3duJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNEcm9wRG93blF1ZXN0aW9uQW5zd2VyZWQocmVzcG9uc2UpO1xuXG4gICAgICBjYXNlICdFbWFpbCc6XG4gICAgICAgIHJldHVybiB0aGlzLmlzRW1haWxRdWVzdGlvbkFuc3dlcmVkKHJlc3BvbnNlKTtcblxuICAgICAgY2FzZSAnU2hvcnQgdGV4dCc6XG4gICAgICBjYXNlICdMb25nIHRleHQnOlxuICAgICAgICByZXR1cm4gdGhpcy5pc1RleHRRdWVzdGlvbkFuc3dlcmVkKHJlc3BvbnNlKTtcblxuICAgICAgY2FzZSAnTnBzJzpcbiAgICAgIGNhc2UgJ1JhdGluZyc6XG4gICAgICAgIHJldHVybiB0aGlzLmlzUmF0aW5nUXVlc3Rpb25BbnN3ZXJlZChyZXNwb25zZSk7XG5cbiAgICAgIGNhc2UgJ1N0YXRlbWVudCc6XG4gICAgICAgIHJldHVybiB0aGlzLmlzU3RhdGVtZW50UXVlc3Rpb25BbnN3ZXJlZChyZXNwb25zZSk7XG5cbiAgICAgIGNhc2UgJ1llcyBObyc6XG4gICAgICBjYXNlICdMZWdhbCc6XG4gICAgICAgIHJldHVybiB0aGlzLmlzWWVzTm9RdWVzdGlvbkFuc3dlcmVkKHJlc3BvbnNlKTtcblxuICAgICAgZGVmYXVsdDogcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgaXNBZGRyZXNzRm9ybUFuc3dlcmVkKHJlc3BvbnNlOiBTdXJ2ZXlSZXNwb25zZXMpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBwcml2YXRlIGlzQ29udGFjdEZvcm1BbnN3ZXJlZChyZXNwb25zZTogU3VydmV5UmVzcG9uc2VzKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcHJpdmF0ZSBpc0Nob2ljZVF1ZXN0aW9uQW5zd2VyZWQocmVzcG9uc2U6IFN1cnZleVJlc3BvbnNlcykge1xuICAgIHJldHVybiByZXNwb25zZS5jaG9pY2VzICE9IHVuZGVmaW5lZCAmJiByZXNwb25zZS5jaG9pY2VzLmxlbmd0aCA+IDA7XG4gIH1cblxuXG4gIHByaXZhdGUgaXNEYXRlUXVlc3Rpb25BbnN3ZXJlZChyZXNwb25zZTogU3VydmV5UmVzcG9uc2VzKSB7XG4gICAgcmV0dXJuIHJlc3BvbnNlLmFuc3dlciAhPSB1bmRlZmluZWQgJiYgcmVzcG9uc2UuYW5zd2VyLmxlbmd0aCA+IDA7XG4gIH1cblxuICBwcml2YXRlIGlzRHJvcERvd25RdWVzdGlvbkFuc3dlcmVkKHJlc3BvbnNlOiBTdXJ2ZXlSZXNwb25zZXMpIHtcbiAgICByZXR1cm4gcmVzcG9uc2UuYW5zd2VySWQgIT0gdW5kZWZpbmVkO1xuICB9XG5cbiAgcHJpdmF0ZSBpc0VtYWlsUXVlc3Rpb25BbnN3ZXJlZChyZXNwb25zZTogU3VydmV5UmVzcG9uc2VzKSB7XG4gICAgcmV0dXJuIHJlc3BvbnNlLmFuc3dlciAhPSB1bmRlZmluZWQgJiYgcmVzcG9uc2UuYW5zd2VyLmxlbmd0aCA+IDA7XG4gIH1cblxuICBwcml2YXRlIGlzVGV4dFF1ZXN0aW9uQW5zd2VyZWQocmVzcG9uc2U6IFN1cnZleVJlc3BvbnNlcykge1xuICAgIHJldHVybiByZXNwb25zZS5hbnN3ZXIgIT0gdW5kZWZpbmVkICYmIHJlc3BvbnNlLmFuc3dlci5sZW5ndGggPiAwO1xuICB9XG5cbiAgcHJpdmF0ZSBpc1JhdGluZ1F1ZXN0aW9uQW5zd2VyZWQocmVzcG9uc2U6IFN1cnZleVJlc3BvbnNlcykge1xuICAgIHJldHVybiByZXNwb25zZS5yYXRpbmcgIT0gdW5kZWZpbmVkICYmIHJlc3BvbnNlLnJhdGluZyA+IC0xO1xuICB9XG5cbiAgcHJpdmF0ZSBpc1N0YXRlbWVudFF1ZXN0aW9uQW5zd2VyZWQocmVzcG9uc2U6IFN1cnZleVJlc3BvbnNlcykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHByaXZhdGUgaXNZZXNOb1F1ZXN0aW9uQW5zd2VyZWQocmVzcG9uc2U6IFN1cnZleVJlc3BvbnNlcykge1xuICAgIHJldHVybiByZXNwb25zZS5hbnN3ZXIgIT0gdW5kZWZpbmVkICYmIHJlc3BvbnNlLmFuc3dlci5sZW5ndGggPiAwO1xuICB9XG59XG4iXX0=