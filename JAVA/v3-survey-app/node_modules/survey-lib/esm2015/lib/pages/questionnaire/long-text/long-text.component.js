/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/questionnaire/long-text/long-text.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { Question } from '../../pages.model';
import { SurveyResponses } from '../../survey-response.model';
import { PagesService } from '../../../shared/pages-services/pages.service';
import { SurveyLibService } from '../../../survey-lib.service';
export class LongTextComponent {
    /**
     * @param {?} pageService
     * @param {?} surveyLibServices
     */
    constructor(pageService, surveyLibServices) {
        this.pageService = pageService;
        this.surveyLibServices = surveyLibServices;
        this.submitEvent = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.pageService.stage == 'entry-next') {
            document.getElementById('long-question').className = 'entry-next';
            document.getElementById('long-question-delay').className = 'entry-next-delay';
        }
        else if (this.pageService.stage == 'entry-previous') {
            document.getElementById('long-question').className = 'entry-previous-delay';
            document.getElementById('long-question-delay').className = 'entry-previous';
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onInputValue(value) {
        if (value != undefined) {
            this.surveyResponse.questionId = this.longText.questionId;
            this.surveyResponse.question = this.longText.question;
            this.surveyResponse.questionType = this.longText.questionType;
            this.surveyResponse.answer = value;
            this.surveyResponse.identifier = this.longText.identifier;
            this.pageService.persistSurvey(this.surveyResponse);
            document.getElementById('btn-primary').classList.add('blink-btn-animation');
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.submitEvent.emit();
            }), 350);
        }
        else {
            this.submitEvent.emit();
        }
    }
    /**
     * @return {?}
     */
    skipQuestion() {
        this.submitEvent.emit();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
}
LongTextComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-long-text',
                template: "<div id=\"long-question\">\n\n<div class=\"survey-statement\">\n  <span *ngIf=\"longText.attributes.required\" class=\"isRequired\">*</span>{{ longText.question }}</div>\n  <p class=\"question-description\">\n  {{longText.attributes.description}}\n</p>\n\n</div>\n\n<div id=\"long-question-delay\">\n<textarea class=\"survey-input-textarea\" #longTextInput onfocus=\"this.placeholder=''\" name=\"message\"\n          placeholder=\"Add comment here\"\n          [maxLength]=\"longText.attributes.maxCharacterCount\"\n          [(ngModel)]=\"surveyResponse.answer\">\n  </textarea>\n<button class=\"btn-primary\"  id=\"btn-primary\" (click)=\"onInputValue(longTextInput.value)\">{{isLastQuestion?'Submit': 'Done'}}</button>\n<span *ngIf=\"!longText.attributes.required\"\n     (click)=\"onInputValue(undefined)\"\n     class=\"skip-this-question skip-this-question-marginLeft\">Skip</span>\n<!--<div class=\"row\">\n<button id=\"skip-button\"\n        (click)=\"skipQuestion()\">Skip</button>\n<button id=\"done-button\"\n        (click)=\"onInputValue()\">Done</button>\n</div>-->\n</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
LongTextComponent.ctorParameters = () => [
    { type: PagesService },
    { type: SurveyLibService }
];
LongTextComponent.propDecorators = {
    longText: [{ type: Input }],
    surveyResponse: [{ type: Input }],
    submitEvent: [{ type: Output }],
    isLastQuestion: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    LongTextComponent.prototype.longText;
    /** @type {?} */
    LongTextComponent.prototype.surveyResponse;
    /** @type {?} */
    LongTextComponent.prototype.submitEvent;
    /** @type {?} */
    LongTextComponent.prototype.isLastQuestion;
    /**
     * @type {?}
     * @private
     */
    LongTextComponent.prototype.pageService;
    /** @type {?} */
    LongTextComponent.prototype.surveyLibServices;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9uZy10ZXh0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3N1cnZleS1saWIvIiwic291cmNlcyI6WyJsaWIvcGFnZXMvcXVlc3Rpb25uYWlyZS9sb25nLXRleHQvbG9uZy10ZXh0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBcUIsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3hGLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUMzQyxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFFNUQsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLDhDQUE4QyxDQUFDO0FBQzFFLE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLDZCQUE2QixDQUFDO0FBTzdELE1BQU0sT0FBTyxpQkFBaUI7Ozs7O0lBYzVCLFlBQW9CLFdBQXlCLEVBQVEsaUJBQW1DO1FBQXBFLGdCQUFXLEdBQVgsV0FBVyxDQUFjO1FBQVEsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFrQjtRQUx4RixnQkFBVyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUFNakMsQ0FBQzs7OztJQUVELFFBQVE7UUFDTixJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxJQUFJLFlBQVksRUFBRTtZQUMxQyxRQUFRLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxDQUFDLFNBQVMsR0FBRyxZQUFZLENBQUM7WUFDbEUsUUFBUSxDQUFDLGNBQWMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLFNBQVMsR0FBRyxrQkFBa0IsQ0FBQztTQUMvRTthQUFLLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLElBQUksZ0JBQWdCLEVBQUU7WUFDcEQsUUFBUSxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxTQUFTLEdBQUcsc0JBQXNCLENBQUE7WUFDM0UsUUFBUSxDQUFDLGNBQWMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLFNBQVMsR0FBRyxnQkFBZ0IsQ0FBQztTQUM3RTtJQUNILENBQUM7Ozs7O0lBRUQsWUFBWSxDQUFDLEtBQWE7UUFDeEIsSUFBSSxLQUFLLElBQUksU0FBUyxFQUFFO1lBQ3RCLElBQUksQ0FBQyxjQUFjLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDO1lBQzFELElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDO1lBQ3RELElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDO1lBQzlELElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztZQUNuQyxJQUFJLENBQUMsY0FBYyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQztZQUMxRCxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDcEQsUUFBUSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLENBQUM7WUFDNUUsVUFBVTs7O1lBQUMsR0FBRSxFQUFFO2dCQUNiLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDMUIsQ0FBQyxHQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ1I7YUFBTTtZQUNMLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDekI7SUFFSCxDQUFDOzs7O0lBRUQsWUFBWTtRQUNWLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDMUIsQ0FBQzs7OztJQUVELFdBQVc7SUFDWCxDQUFDOzs7WUF2REYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxlQUFlO2dCQUN6Qiw2a0NBQXlDOzthQUUxQzs7OztZQVBPLFlBQVk7WUFDWixnQkFBZ0I7Ozt1QkFVckIsS0FBSzs2QkFFTCxLQUFLOzBCQUdMLE1BQU07NkJBR04sS0FBSzs7OztJQVJOLHFDQUE0Qjs7SUFFNUIsMkNBQ2dDOztJQUVoQyx3Q0FDaUM7O0lBRWpDLDJDQUMrQjs7Ozs7SUFFbkIsd0NBQWlDOztJQUFDLDhDQUEwQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdCwgT3V0cHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7UXVlc3Rpb259IGZyb20gJy4uLy4uL3BhZ2VzLm1vZGVsJztcbmltcG9ydCB7U3VydmV5UmVzcG9uc2VzfSBmcm9tICcuLi8uLi9zdXJ2ZXktcmVzcG9uc2UubW9kZWwnO1xuaW1wb3J0ICogYXMgc3VydmV5QWN0aW9ucyBmcm9tICcuLi8uLi9zdG9yZS9zdXJ2ZXktYWN0aW9ucyc7XG5pbXBvcnQge1BhZ2VzU2VydmljZX0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL3BhZ2VzLXNlcnZpY2VzL3BhZ2VzLnNlcnZpY2UnO1xuaW1wb3J0IHtTdXJ2ZXlMaWJTZXJ2aWNlfSBmcm9tICcuLi8uLi8uLi9zdXJ2ZXktbGliLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhcHAtbG9uZy10ZXh0JyxcbiAgdGVtcGxhdGVVcmw6ICcuL2xvbmctdGV4dC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2xvbmctdGV4dC5jb21wb25lbnQuY3NzJ10sXG59KVxuZXhwb3J0IGNsYXNzIExvbmdUZXh0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LE9uRGVzdHJveSB7XG5cblxuICBASW5wdXQoKSBsb25nVGV4dDogUXVlc3Rpb247XG5cbiAgQElucHV0KClcbiAgc3VydmV5UmVzcG9uc2U6IFN1cnZleVJlc3BvbnNlcztcblxuICBAT3V0cHV0KClcbiAgc3VibWl0RXZlbnQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgQElucHV0KClcbiAgcHVibGljIGlzTGFzdFF1ZXN0aW9uOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcGFnZVNlcnZpY2U6IFBhZ2VzU2VydmljZSxwdWJsaWMgc3VydmV5TGliU2VydmljZXM6IFN1cnZleUxpYlNlcnZpY2UpIHtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIGlmICh0aGlzLnBhZ2VTZXJ2aWNlLnN0YWdlID09ICdlbnRyeS1uZXh0Jykge1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xvbmctcXVlc3Rpb24nKS5jbGFzc05hbWUgPSAnZW50cnktbmV4dCc7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbG9uZy1xdWVzdGlvbi1kZWxheScpLmNsYXNzTmFtZSA9ICdlbnRyeS1uZXh0LWRlbGF5JztcbiAgICB9ZWxzZSBpZiAodGhpcy5wYWdlU2VydmljZS5zdGFnZSA9PSAnZW50cnktcHJldmlvdXMnKSB7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbG9uZy1xdWVzdGlvbicpLmNsYXNzTmFtZSA9ICdlbnRyeS1wcmV2aW91cy1kZWxheSdcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsb25nLXF1ZXN0aW9uLWRlbGF5JykuY2xhc3NOYW1lID0gJ2VudHJ5LXByZXZpb3VzJztcbiAgICB9XG4gIH1cblxuICBvbklucHV0VmFsdWUodmFsdWU6IHN0cmluZyl7XG4gICAgaWYgKHZhbHVlICE9IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5zdXJ2ZXlSZXNwb25zZS5xdWVzdGlvbklkID0gdGhpcy5sb25nVGV4dC5xdWVzdGlvbklkO1xuICAgICAgdGhpcy5zdXJ2ZXlSZXNwb25zZS5xdWVzdGlvbiA9IHRoaXMubG9uZ1RleHQucXVlc3Rpb247XG4gICAgICB0aGlzLnN1cnZleVJlc3BvbnNlLnF1ZXN0aW9uVHlwZSA9IHRoaXMubG9uZ1RleHQucXVlc3Rpb25UeXBlO1xuICAgICAgdGhpcy5zdXJ2ZXlSZXNwb25zZS5hbnN3ZXIgPSB2YWx1ZTtcbiAgICAgIHRoaXMuc3VydmV5UmVzcG9uc2UuaWRlbnRpZmllciA9IHRoaXMubG9uZ1RleHQuaWRlbnRpZmllcjtcbiAgICAgIHRoaXMucGFnZVNlcnZpY2UucGVyc2lzdFN1cnZleSh0aGlzLnN1cnZleVJlc3BvbnNlKTtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdidG4tcHJpbWFyeScpLmNsYXNzTGlzdC5hZGQoJ2JsaW5rLWJ0bi1hbmltYXRpb24nKTtcbiAgICAgIHNldFRpbWVvdXQoKCk9PntcbiAgICAgICAgdGhpcy5zdWJtaXRFdmVudC5lbWl0KCk7XG4gICAgICB9LDM1MCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3VibWl0RXZlbnQuZW1pdCgpO1xuICAgIH1cblxuICB9XG5cbiAgc2tpcFF1ZXN0aW9uKCl7XG4gICAgdGhpcy5zdWJtaXRFdmVudC5lbWl0KCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgfVxuXG59XG4iXX0=