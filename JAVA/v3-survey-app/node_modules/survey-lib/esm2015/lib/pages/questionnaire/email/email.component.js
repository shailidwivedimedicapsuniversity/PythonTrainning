/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/questionnaire/email/email.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { Question } from '../../pages.model';
import { SurveyResponses } from '../../survey-response.model';
import { PagesService } from '../../../shared/pages-services/pages.service';
export class EmailComponent {
    /**
     * @param {?} pageService
     */
    constructor(pageService) {
        this.pageService = pageService;
        this.EMAIL_REGEXP = new RegExp('^(([^<>()\\[\\]\\\\.,;:\\s@"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@"]+)*)|(".+"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$');
        this.submitEvent = new EventEmitter();
        this.isValidEmail = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.pageService.stage == 'entry-next') {
            document.getElementById('email-question').className = 'entry-next';
            document.getElementById('email-question-delay').className = 'entry-next-delay';
        }
        else if (this.pageService.stage == 'entry-previous') {
            document.getElementById('email-question').className = 'entry-previous-delay';
            document.getElementById('email-question-delay').className = 'entry-previous';
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onSubmit(value) {
        console.log(value);
        if (value != undefined) {
            this.isValidEmail = this.isValidEmailId(value);
            console.log('Is valid email: ' + this.isValidEmail);
            if (this.isValidEmail) {
                this.surveyResponse.questionId = this.email.questionId;
                this.surveyResponse.question = this.email.question;
                this.surveyResponse.questionType = this.email.questionType;
                this.surveyResponse.identifier = this.email.identifier;
                this.surveyResponse.answer = value;
                this.pageService.persistSurvey(this.surveyResponse);
                document.getElementById('btn-primary').classList.add('blink-btn-animation');
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.submitEvent.emit();
                }), 350);
            }
        }
        else {
            this.submitEvent.emit();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
    /**
     * @private
     * @param {?} email
     * @return {?}
     */
    isValidEmailId(email) {
        return this.EMAIL_REGEXP.test(email);
    }
}
EmailComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-email',
                template: "<div id=\"email-question\">\n<div class=\"survey-statement\">\n    <span *ngIf=\"email.attributes.required\" class=\"isRequired\">*</span>{{ email.question }}\n</div>\n<p class=\"question-description\">\n    {{email.attributes.description}}\n  </p>\n\n</div>\n\n\n<div id=\"email-question-delay\">\n<input class=\"survey-input-text-box\"\n  #emailInput\n  type=\"email\"\n  name=\"email\"\n  onfocus=\"this.placeholder=''\"\n  placeholder=\"Enter valid email ID\"\n  [(ngModel)]=\"surveyResponse.answer\">\n  <div *ngIf=\"!isValidEmail\" class=\"validation-error-msg\">Please enter valid email</div>\n<button class=\"btn-primary\" id=\"btn-primary\"  (click)=\"onSubmit(emailInput.value)\">{{isLastQuestion?'Submit': 'Done'}}</button>\n<span (click)=\"onSubmit(undefined)\"\n  *ngIf=\"!email.attributes.required\" class=\"skip-this-question skip-this-question-marginLeft\">Skip</span>\n</div>\n",
                styles: [".email-text-box{position:absolute;left:0;margin-left:1%}"]
            }] }
];
/** @nocollapse */
EmailComponent.ctorParameters = () => [
    { type: PagesService }
];
EmailComponent.propDecorators = {
    email: [{ type: Input }],
    submitEvent: [{ type: Output }],
    surveyResponse: [{ type: Input }],
    isLastQuestion: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    EmailComponent.prototype.EMAIL_REGEXP;
    /** @type {?} */
    EmailComponent.prototype.email;
    /** @type {?} */
    EmailComponent.prototype.submitEvent;
    /** @type {?} */
    EmailComponent.prototype.surveyResponse;
    /** @type {?} */
    EmailComponent.prototype.isLastQuestion;
    /** @type {?} */
    EmailComponent.prototype.isValidEmail;
    /**
     * @type {?}
     * @private
     */
    EmailComponent.prototype.pageService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1haWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vc3VydmV5LWxpYi8iLCJzb3VyY2VzIjpbImxpYi9wYWdlcy9xdWVzdGlvbm5haXJlL2VtYWlsL2VtYWlsLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBcUIsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3hGLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUUzQyxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFDNUQsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLDhDQUE4QyxDQUFDO0FBUTFFLE1BQU0sT0FBTyxjQUFjOzs7O0lBaUJ6QixZQUFvQixXQUF5QjtRQUF6QixnQkFBVyxHQUFYLFdBQVcsQ0FBYztRQWhCNUIsaUJBQVksR0FBRSxJQUFJLE1BQU0sQ0FBQywyS0FBMkssQ0FBQyxDQUFDO1FBS3ZOLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQVFqQyxpQkFBWSxHQUFhLElBQUksQ0FBQztJQUk5QixDQUFDOzs7O0lBRUQsUUFBUTtRQUNOLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLElBQUksWUFBWSxFQUFFO1lBQzFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxTQUFTLEdBQUcsWUFBWSxDQUFDO1lBQ25FLFFBQVEsQ0FBQyxjQUFjLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxTQUFTLEdBQUcsa0JBQWtCLENBQUM7U0FDaEY7YUFBSyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxJQUFJLGdCQUFnQixFQUFFO1lBQ3BELFFBQVEsQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxTQUFTLEdBQUcsc0JBQXNCLENBQUM7WUFDN0UsUUFBUSxDQUFDLGNBQWMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLFNBQVMsR0FBRyxnQkFBZ0IsQ0FBQztTQUM5RTtJQUNILENBQUM7Ozs7O0lBRUQsUUFBUSxDQUFDLEtBQWE7UUFDcEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuQixJQUFJLEtBQUssSUFBSSxTQUFTLEVBQUM7WUFDckIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQy9DLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEdBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ2xELElBQUksSUFBSSxDQUFDLFlBQVksRUFBQztnQkFDcEIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUM7Z0JBQ3ZELElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDO2dCQUNuRCxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQztnQkFDM0QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUM7Z0JBQ3ZELElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztnQkFDbkMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO2dCQUNwRCxRQUFRLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQztnQkFDNUUsVUFBVTs7O2dCQUFDLEdBQUUsRUFBRTtvQkFDYixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUMxQixDQUFDLEdBQUMsR0FBRyxDQUFDLENBQUM7YUFDUjtTQUNGO2FBQUk7WUFDSCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ3pCO0lBQ0gsQ0FBQzs7OztJQUVELFdBQVc7SUFDWCxDQUFDOzs7Ozs7SUFFTyxjQUFjLENBQUMsS0FBYTtRQUNsQyxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7OztZQTlERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFdBQVc7Z0JBQ3JCLDA0QkFBcUM7O2FBRXRDOzs7O1lBUE8sWUFBWTs7O29CQVdqQixLQUFLOzBCQUVMLE1BQU07NkJBR04sS0FBSzs2QkFHTCxLQUFLOzs7Ozs7O0lBVk4sc0NBQXVOOztJQUV2TiwrQkFBeUI7O0lBRXpCLHFDQUNpQzs7SUFFakMsd0NBQ3VDOztJQUV2Qyx3Q0FDK0I7O0lBRS9CLHNDQUE4Qjs7Ozs7SUFHbEIscUNBQWlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uRGVzdHJveSwgT25Jbml0LCBPdXRwdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtRdWVzdGlvbn0gZnJvbSAnLi4vLi4vcGFnZXMubW9kZWwnO1xuaW1wb3J0ICogYXMgc3VydmV5QWN0aW9ucyBmcm9tICcuLi8uLi9zdG9yZS9zdXJ2ZXktYWN0aW9ucyc7XG5pbXBvcnQge1N1cnZleVJlc3BvbnNlc30gZnJvbSAnLi4vLi4vc3VydmV5LXJlc3BvbnNlLm1vZGVsJztcbmltcG9ydCB7UGFnZXNTZXJ2aWNlfSBmcm9tICcuLi8uLi8uLi9zaGFyZWQvcGFnZXMtc2VydmljZXMvcGFnZXMuc2VydmljZSc7XG5cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYXBwLWVtYWlsJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2VtYWlsLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vZW1haWwuY29tcG9uZW50LmNzcyddXG59KVxuZXhwb3J0IGNsYXNzIEVtYWlsQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LE9uRGVzdHJveSB7XG4gIHByaXZhdGUgcmVhZG9ubHkgRU1BSUxfUkVHRVhQID1uZXcgUmVnRXhwKCdeKChbXjw+KClcXFxcW1xcXFxdXFxcXFxcXFwuLDs6XFxcXHNAXCJdKyhcXFxcLltePD4oKVxcXFxbXFxcXF1cXFxcXFxcXC4sOzpcXFxcc0BcIl0rKSopfChcIi4rXCIpKUAoKFxcXFxbWzAtOV17MSwzfVxcXFwuWzAtOV17MSwzfVxcXFwuWzAtOV17MSwzfVxcXFwuWzAtOV17MSwzfVxcXFxdKXwoKFthLXpBLVpcXFxcLTAtOV0rXFxcXC4pK1thLXpBLVpdezIsfSkpJCcpO1xuXG4gIEBJbnB1dCgpIGVtYWlsOiBRdWVzdGlvbjtcblxuICBAT3V0cHV0KClcbiAgc3VibWl0RXZlbnQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgQElucHV0KClcbiAgcHVibGljIHN1cnZleVJlc3BvbnNlOiBTdXJ2ZXlSZXNwb25zZXM7XG5cbiAgQElucHV0KClcbiAgcHVibGljIGlzTGFzdFF1ZXN0aW9uOiBib29sZWFuO1xuXG4gIGlzVmFsaWRFbWFpbCA6IGJvb2xlYW4gPSB0cnVlO1xuXG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBwYWdlU2VydmljZTogUGFnZXNTZXJ2aWNlKSB7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAodGhpcy5wYWdlU2VydmljZS5zdGFnZSA9PSAnZW50cnktbmV4dCcpIHtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlbWFpbC1xdWVzdGlvbicpLmNsYXNzTmFtZSA9ICdlbnRyeS1uZXh0JztcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlbWFpbC1xdWVzdGlvbi1kZWxheScpLmNsYXNzTmFtZSA9ICdlbnRyeS1uZXh0LWRlbGF5JztcbiAgICB9ZWxzZSBpZiAodGhpcy5wYWdlU2VydmljZS5zdGFnZSA9PSAnZW50cnktcHJldmlvdXMnKSB7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZW1haWwtcXVlc3Rpb24nKS5jbGFzc05hbWUgPSAnZW50cnktcHJldmlvdXMtZGVsYXknO1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2VtYWlsLXF1ZXN0aW9uLWRlbGF5JykuY2xhc3NOYW1lID0gJ2VudHJ5LXByZXZpb3VzJztcbiAgICB9XG4gIH1cblxuICBvblN1Ym1pdCh2YWx1ZTogc3RyaW5nKXtcbiAgICBjb25zb2xlLmxvZyh2YWx1ZSk7XG4gICAgaWYgKHZhbHVlICE9IHVuZGVmaW5lZCl7XG4gICAgICB0aGlzLmlzVmFsaWRFbWFpbCA9IHRoaXMuaXNWYWxpZEVtYWlsSWQodmFsdWUpO1xuICAgICAgY29uc29sZS5sb2coJ0lzIHZhbGlkIGVtYWlsOiAnK3RoaXMuaXNWYWxpZEVtYWlsKTtcbiAgICAgIGlmICh0aGlzLmlzVmFsaWRFbWFpbCl7XG4gICAgICAgIHRoaXMuc3VydmV5UmVzcG9uc2UucXVlc3Rpb25JZCA9IHRoaXMuZW1haWwucXVlc3Rpb25JZDtcbiAgICAgICAgdGhpcy5zdXJ2ZXlSZXNwb25zZS5xdWVzdGlvbiA9IHRoaXMuZW1haWwucXVlc3Rpb247XG4gICAgICAgIHRoaXMuc3VydmV5UmVzcG9uc2UucXVlc3Rpb25UeXBlID0gdGhpcy5lbWFpbC5xdWVzdGlvblR5cGU7XG4gICAgICAgIHRoaXMuc3VydmV5UmVzcG9uc2UuaWRlbnRpZmllciA9IHRoaXMuZW1haWwuaWRlbnRpZmllcjtcbiAgICAgICAgdGhpcy5zdXJ2ZXlSZXNwb25zZS5hbnN3ZXIgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5wYWdlU2VydmljZS5wZXJzaXN0U3VydmV5KHRoaXMuc3VydmV5UmVzcG9uc2UpO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnRuLXByaW1hcnknKS5jbGFzc0xpc3QuYWRkKCdibGluay1idG4tYW5pbWF0aW9uJyk7XG4gICAgICAgIHNldFRpbWVvdXQoKCk9PntcbiAgICAgICAgICB0aGlzLnN1Ym1pdEV2ZW50LmVtaXQoKTtcbiAgICAgICAgfSwzNTApO1xuICAgICAgfVxuICAgIH1lbHNle1xuICAgICAgdGhpcy5zdWJtaXRFdmVudC5lbWl0KCk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gIH1cblxuICBwcml2YXRlIGlzVmFsaWRFbWFpbElkKGVtYWlsOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5FTUFJTF9SRUdFWFAudGVzdChlbWFpbCk7XG4gIH1cbn1cbiJdfQ==