/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/questionnaire/yes-no/yes-no.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { Question } from '../../pages.model';
import { SurveyResponses } from '../../survey-response.model';
import { PagesService } from '../../../shared/pages-services/pages.service';
export class YesNoComponent {
    /**
     * @param {?} pageService
     */
    constructor(pageService) {
        this.pageService = pageService;
        this.isActive = false;
        this.submitEvent = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.pageService.stage == 'entry-next') {
            document.getElementById('yes-no-question').className = 'entry-next';
            document.getElementById('yes-no-question-delay').className = 'entry-next-delay';
        }
        else if (this.pageService.stage == 'entry-previous') {
            document.getElementById('yes-no-question').className = 'entry-previous-delay';
            document.getElementById('yes-no-question-delay').className = 'entry-previous';
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onSelect(value) {
        if (value != undefined) {
            this.isActive = true;
            this.surveyResponse.question = this.yesNoQuestion.question;
            this.surveyResponse.questionType = this.yesNoQuestion.questionType;
            this.surveyResponse.questionId = this.yesNoQuestion.questionId;
            this.surveyResponse.identifier = this.yesNoQuestion.identifier;
            this.surveyResponse.answer = value;
            this.pageService.persistSurvey(this.surveyResponse);
            value == 'Yes' ? document.getElementById('yes-btn').classList.add('blink-btn-animation') : '';
            value == 'No' ? document.getElementById('no-btn').classList.add('blink-btn-animation') : '';
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.submitEvent.emit();
            }), 350);
        }
        else {
            this.submitEvent.emit();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
}
YesNoComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-yes-no',
                template: "<div id=\"yes-no-question\">\n<div class=\"survey-statement\">\n  <span *ngIf=\"yesNoQuestion.attributes.required\" style=\"color:red;margin-right: 0.5%\">*</span>{{ yesNoQuestion.question }} </div>\n  <p class=\"question-description\">\n  {{yesNoQuestion.attributes.description}}\n</p>\n\n</div>\n\n\n\n<div id=\"yes-no-question-delay\">\n<button\n    name=\"yes-no\" value=\"yes\" id=\"yes-btn\"\n    [ngClass]=\"surveyResponse.answer == 'Yes'?'btn-secondary yes-no-btn btn-focused-state':'btn-secondary yes-no-btn'\"\n    (click)=\"onSelect('Yes')\"><span [ngClass]=\"surveyResponse.answer == 'Yes'? 'checkmark checkmark-checked':'checkmark'\"></span><span style=\"margin-left: 10px\">YES</span>\n</button>\n\n\n\n<button\n    name=\"yes-no\" value=\"no\" id=\"no-btn\"\n    [ngClass]=\"surveyResponse.answer == 'No'?'btn-secondary yes-no-btn btn-focused-state':'btn-secondary yes-no-btn'\"\n    (click)=\"onSelect('No')\"><span [ngClass]=\"surveyResponse.answer == 'No'? 'crossmark crossmark-checked':'crossmark'\"></span><span>NO</span>\n</button>\n\n\n<div style=\"margin-top:2%\" *ngIf=\"!yesNoQuestion.attributes.required\" class=\"skip-this-question\">\n  <span (click)=\"onSelect(undefined)\">Skip</span>\n</div>\n\n</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
YesNoComponent.ctorParameters = () => [
    { type: PagesService }
];
YesNoComponent.propDecorators = {
    yesNoQuestion: [{ type: Input }],
    surveyResponse: [{ type: Input }],
    submitEvent: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    YesNoComponent.prototype.isActive;
    /** @type {?} */
    YesNoComponent.prototype.yesNoQuestion;
    /** @type {?} */
    YesNoComponent.prototype.surveyResponse;
    /**
     * @type {?}
     * @private
     */
    YesNoComponent.prototype.submitEvent;
    /**
     * @type {?}
     * @private
     */
    YesNoComponent.prototype.pageService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieWVzLW5vLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3N1cnZleS1saWIvIiwic291cmNlcyI6WyJsaWIvcGFnZXMvcXVlc3Rpb25uYWlyZS95ZXMtbm8veWVzLW5vLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBcUIsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3hGLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUMzQyxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFFNUQsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLDhDQUE4QyxDQUFDO0FBUTFFLE1BQU0sT0FBTyxjQUFjOzs7O0lBWXpCLFlBQW9CLFdBQXlCO1FBQXpCLGdCQUFXLEdBQVgsV0FBVyxDQUFjO1FBWDdDLGFBQVEsR0FBWSxLQUFLLENBQUM7UUFRbEIsZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBS3pDLENBQUM7Ozs7SUFFRCxRQUFRO1FBQ04sSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssSUFBSSxZQUFZLEVBQUU7WUFDMUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLFNBQVMsR0FBRyxZQUFZLENBQUM7WUFDcEUsUUFBUSxDQUFDLGNBQWMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLFNBQVMsR0FBRyxrQkFBa0IsQ0FBQztTQUNqRjthQUFNLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLElBQUksZ0JBQWdCLEVBQUU7WUFDckQsUUFBUSxDQUFDLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLFNBQVMsR0FBRyxzQkFBc0IsQ0FBQztZQUM5RSxRQUFRLENBQUMsY0FBYyxDQUFDLHVCQUF1QixDQUFDLENBQUMsU0FBUyxHQUFHLGdCQUFnQixDQUFDO1NBQy9FO0lBQ0gsQ0FBQzs7Ozs7SUFFRCxRQUFRLENBQUMsS0FBYTtRQUNwQixJQUFJLEtBQUssSUFBSSxTQUFTLEVBQUU7WUFDdEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7WUFDckIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7WUFDM0QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUM7WUFDbkUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUM7WUFDL0QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUM7WUFDL0QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1lBQ25DLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUNwRCxLQUFLLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQzlGLEtBQUssSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDNUYsVUFBVTs7O1lBQUMsR0FBRyxFQUFFO2dCQUNkLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDMUIsQ0FBQyxHQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQ1Q7YUFBTTtZQUNMLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDekI7SUFFSCxDQUFDOzs7O0lBRUQsV0FBVztJQUVYLENBQUM7OztZQXJERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFlBQVk7Z0JBQ3RCLDh0Q0FBc0M7O2FBRXZDOzs7O1lBUE8sWUFBWTs7OzRCQVVqQixLQUFLOzZCQUdMLEtBQUs7MEJBR0wsTUFBTTs7OztJQVBQLGtDQUEwQjs7SUFDMUIsdUNBQ3dCOztJQUV4Qix3Q0FDZ0M7Ozs7O0lBRWhDLHFDQUN5Qzs7Ozs7SUFHN0IscUNBQWlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uRGVzdHJveSwgT25Jbml0LCBPdXRwdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtRdWVzdGlvbn0gZnJvbSAnLi4vLi4vcGFnZXMubW9kZWwnO1xuaW1wb3J0IHtTdXJ2ZXlSZXNwb25zZXN9IGZyb20gJy4uLy4uL3N1cnZleS1yZXNwb25zZS5tb2RlbCc7XG5pbXBvcnQge1llc05vfSBmcm9tICcuLi8uLi9zdG9yZS9zdXJ2ZXktYWN0aW9ucyc7XG5pbXBvcnQge1BhZ2VzU2VydmljZX0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL3BhZ2VzLXNlcnZpY2VzL3BhZ2VzLnNlcnZpY2UnO1xuXG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FwcC15ZXMtbm8nLFxuICB0ZW1wbGF0ZVVybDogJy4veWVzLW5vLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4veWVzLW5vLmNvbXBvbmVudC5jc3MnXSxcbn0pXG5leHBvcnQgY2xhc3MgWWVzTm9Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIGlzQWN0aXZlOiBib29sZWFuID0gZmFsc2U7XG4gIEBJbnB1dCgpXG4gIHllc05vUXVlc3Rpb246IFF1ZXN0aW9uO1xuXG4gIEBJbnB1dCgpXG4gIHN1cnZleVJlc3BvbnNlOiBTdXJ2ZXlSZXNwb25zZXM7XG5cbiAgQE91dHB1dCgpXG4gIHByaXZhdGUgc3VibWl0RXZlbnQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBhZ2VTZXJ2aWNlOiBQYWdlc1NlcnZpY2UpIHtcblxuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgaWYgKHRoaXMucGFnZVNlcnZpY2Uuc3RhZ2UgPT0gJ2VudHJ5LW5leHQnKSB7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgneWVzLW5vLXF1ZXN0aW9uJykuY2xhc3NOYW1lID0gJ2VudHJ5LW5leHQnO1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3llcy1uby1xdWVzdGlvbi1kZWxheScpLmNsYXNzTmFtZSA9ICdlbnRyeS1uZXh0LWRlbGF5JztcbiAgICB9IGVsc2UgaWYgKHRoaXMucGFnZVNlcnZpY2Uuc3RhZ2UgPT0gJ2VudHJ5LXByZXZpb3VzJykge1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3llcy1uby1xdWVzdGlvbicpLmNsYXNzTmFtZSA9ICdlbnRyeS1wcmV2aW91cy1kZWxheSc7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgneWVzLW5vLXF1ZXN0aW9uLWRlbGF5JykuY2xhc3NOYW1lID0gJ2VudHJ5LXByZXZpb3VzJztcbiAgICB9XG4gIH1cblxuICBvblNlbGVjdCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgaWYgKHZhbHVlICE9IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5pc0FjdGl2ZSA9IHRydWU7XG4gICAgICB0aGlzLnN1cnZleVJlc3BvbnNlLnF1ZXN0aW9uID0gdGhpcy55ZXNOb1F1ZXN0aW9uLnF1ZXN0aW9uO1xuICAgICAgdGhpcy5zdXJ2ZXlSZXNwb25zZS5xdWVzdGlvblR5cGUgPSB0aGlzLnllc05vUXVlc3Rpb24ucXVlc3Rpb25UeXBlO1xuICAgICAgdGhpcy5zdXJ2ZXlSZXNwb25zZS5xdWVzdGlvbklkID0gdGhpcy55ZXNOb1F1ZXN0aW9uLnF1ZXN0aW9uSWQ7XG4gICAgICB0aGlzLnN1cnZleVJlc3BvbnNlLmlkZW50aWZpZXIgPSB0aGlzLnllc05vUXVlc3Rpb24uaWRlbnRpZmllcjtcbiAgICAgIHRoaXMuc3VydmV5UmVzcG9uc2UuYW5zd2VyID0gdmFsdWU7XG4gICAgICB0aGlzLnBhZ2VTZXJ2aWNlLnBlcnNpc3RTdXJ2ZXkodGhpcy5zdXJ2ZXlSZXNwb25zZSk7XG4gICAgICB2YWx1ZSA9PSAnWWVzJyA/IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd5ZXMtYnRuJykuY2xhc3NMaXN0LmFkZCgnYmxpbmstYnRuLWFuaW1hdGlvbicpIDogJyc7XG4gICAgICB2YWx1ZSA9PSAnTm8nID8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25vLWJ0bicpLmNsYXNzTGlzdC5hZGQoJ2JsaW5rLWJ0bi1hbmltYXRpb24nKSA6ICcnO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuc3VibWl0RXZlbnQuZW1pdCgpO1xuICAgICAgfSwgMzUwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdWJtaXRFdmVudC5lbWl0KCk7XG4gICAgfVxuXG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcblxuICB9XG59XG4iXX0=