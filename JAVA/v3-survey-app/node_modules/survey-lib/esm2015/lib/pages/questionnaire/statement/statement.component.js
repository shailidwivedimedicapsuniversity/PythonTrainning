/**
 * @fileoverview added by tsickle
 * Generated from: lib/pages/questionnaire/statement/statement.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { Question } from '../../pages.model';
import { SurveyResponses } from '../../survey-response.model';
import { PagesService } from '../../../shared/pages-services/pages.service';
export class StatementComponent {
    /**
     * @param {?} pageService
     */
    constructor(pageService) {
        this.pageService = pageService;
        this.submitEvent = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.pageService.stage == 'entry-next') {
            document.getElementById('statement-question').className = 'entry-next';
            document.getElementById('statement-question-delay').className = 'entry-next-delay';
        }
        else if (this.pageService.stage == 'entry-previous') {
            document.getElementById('statement-question').className = 'entry-previous-delay';
            document.getElementById('statement-question-delay').className = 'entry-previous';
        }
    }
    /**
     * @return {?}
     */
    onSubmit() {
        this.surveyResponse.answer = 'Ok';
        this.surveyResponse.identifier = this.statement.identifier;
        this.surveyResponse.questionId = this.statement.questionId;
        this.surveyResponse.questionType = this.statement.questionType;
        this.pageService.persistSurvey(this.surveyResponse);
        document.getElementById('btn-primary').classList.add('blink-btn-animation');
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.submitEvent.emit();
        }), 350);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.submitEvent.unsubscribe();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onSkip(value) {
        if (value != undefined) {
            this.surveyResponse.answer = value;
            this.surveyResponse.identifier = this.statement.identifier;
            this.surveyResponse.questionId = this.statement.questionId;
            this.surveyResponse.questionType = this.statement.questionType;
            this.pageService.persistSurvey(this.surveyResponse);
        }
        this.submitEvent.emit();
    }
}
StatementComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-statement',
                template: "<div id=\"statement-question\">\n<div class=\"survey-statement\"> <span *ngIf=\"statement.attributes.required\" class=\"isRequired\">*</span>{{ statement.question }} </div>\n<p class=\"question-description\">\n  {{statement.attributes.description}}\n</p>\n\n</div>\n\n\n\n<div id=\"statement-question-delay\">\n<button class=\"btn-primary\"\n        id=\"btn-primary\"\n        type=\"submit\"\n        *ngIf=\"surveyResponse.answer != 'Ok'\"\n        name=\"name\"\n        (click)=\"onSubmit()\">Done</button>\n<button class=\"btn-primary\"\n        type=\"submit\"\n        id=\"btn-primary\"\n        name=\"name\"\n        appAutofocus\n        *ngIf=\"surveyResponse.answer == 'Ok'\"\n        (click)=\"onSubmit()\">Done</button>\n<span\n  (click)=\"onSkip(undefined)\"\n  *ngIf=\"!statement.attributes.required\" class=\"skip-this-question skip-this-question-marginLeft\">Skip</span>\n</div>\n",
                styles: [".statement-button{position:absolute;left:0;margin-left:1%}"]
            }] }
];
/** @nocollapse */
StatementComponent.ctorParameters = () => [
    { type: PagesService }
];
StatementComponent.propDecorators = {
    statement: [{ type: Input }],
    surveyResponse: [{ type: Input }],
    submitEvent: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    StatementComponent.prototype.statement;
    /** @type {?} */
    StatementComponent.prototype.surveyResponse;
    /** @type {?} */
    StatementComponent.prototype.submitEvent;
    /**
     * @type {?}
     * @private
     */
    StatementComponent.prototype.pageService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGVtZW50LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3N1cnZleS1saWIvIiwic291cmNlcyI6WyJsaWIvcGFnZXMvcXVlc3Rpb25uYWlyZS9zdGF0ZW1lbnQvc3RhdGVtZW50LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBcUIsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3hGLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUMzQyxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFFNUQsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLDhDQUE4QyxDQUFDO0FBUTFFLE1BQU0sT0FBTyxrQkFBa0I7Ozs7SUFVN0IsWUFBb0IsV0FBeUI7UUFBekIsZ0JBQVcsR0FBWCxXQUFXLENBQWM7UUFGN0MsZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBRWdCLENBQUM7Ozs7SUFFbEQsUUFBUTtRQUNOLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLElBQUksWUFBWSxFQUFFO1lBQzFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxTQUFTLEdBQUcsWUFBWSxDQUFDO1lBQ3ZFLFFBQVEsQ0FBQyxjQUFjLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxTQUFTLEdBQUcsa0JBQWtCLENBQUM7U0FDcEY7YUFBSyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxJQUFJLGdCQUFnQixFQUFFO1lBQ3BELFFBQVEsQ0FBQyxjQUFjLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxTQUFTLEdBQUcsc0JBQXNCLENBQUM7WUFDakYsUUFBUSxDQUFDLGNBQWMsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLFNBQVMsR0FBRyxnQkFBZ0IsQ0FBQztTQUNsRjtJQUNILENBQUM7Ozs7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1FBQ2xDLElBQUksQ0FBQyxjQUFjLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDO1FBQzNELElBQUksQ0FBQyxjQUFjLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDO1FBQzNELElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDO1FBQy9ELElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNwRCxRQUFRLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUM1RSxVQUFVOzs7UUFBQyxHQUFFLEVBQUU7WUFDYixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzFCLENBQUMsR0FBQyxHQUFHLENBQUMsQ0FBQztJQUNULENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNqQyxDQUFDOzs7OztJQUVELE1BQU0sQ0FBQyxLQUFVO1FBQ2YsSUFBSSxLQUFLLElBQUksU0FBUyxFQUFFO1lBQ3RCLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztZQUNuQyxJQUFJLENBQUMsY0FBYyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQztZQUMzRCxJQUFJLENBQUMsY0FBYyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQztZQUMzRCxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQztZQUMvRCxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7U0FDckQ7UUFDRCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzFCLENBQUM7OztZQXBERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGVBQWU7Z0JBQ3pCLGc1QkFBeUM7O2FBRTFDOzs7O1lBUE8sWUFBWTs7O3dCQVVqQixLQUFLOzZCQUVMLEtBQUs7MEJBR0wsTUFBTTs7OztJQUxQLHVDQUE2Qjs7SUFFN0IsNENBQ2dDOztJQUVoQyx5Q0FDaUM7Ozs7O0lBRXJCLHlDQUFpQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdCwgT3V0cHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7UXVlc3Rpb259IGZyb20gJy4uLy4uL3BhZ2VzLm1vZGVsJztcbmltcG9ydCB7U3VydmV5UmVzcG9uc2VzfSBmcm9tICcuLi8uLi9zdXJ2ZXktcmVzcG9uc2UubW9kZWwnO1xuaW1wb3J0ICogYXMgc3VydmV5QWN0aW9ucyBmcm9tICcuLi8uLi9zdG9yZS9zdXJ2ZXktYWN0aW9ucyc7XG5pbXBvcnQge1BhZ2VzU2VydmljZX0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL3BhZ2VzLXNlcnZpY2VzL3BhZ2VzLnNlcnZpY2UnO1xuXG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FwcC1zdGF0ZW1lbnQnLFxuICB0ZW1wbGF0ZVVybDogJy4vc3RhdGVtZW50LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vc3RhdGVtZW50LmNvbXBvbmVudC5jc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBTdGF0ZW1lbnRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsT25EZXN0cm95IHtcblxuICBASW5wdXQoKSBzdGF0ZW1lbnQ6IFF1ZXN0aW9uO1xuXG4gIEBJbnB1dCgpXG4gIHN1cnZleVJlc3BvbnNlOiBTdXJ2ZXlSZXNwb25zZXM7XG5cbiAgQE91dHB1dCgpXG4gIHN1Ym1pdEV2ZW50ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcGFnZVNlcnZpY2U6IFBhZ2VzU2VydmljZSkgeyB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgaWYgKHRoaXMucGFnZVNlcnZpY2Uuc3RhZ2UgPT0gJ2VudHJ5LW5leHQnKSB7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhdGVtZW50LXF1ZXN0aW9uJykuY2xhc3NOYW1lID0gJ2VudHJ5LW5leHQnO1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0YXRlbWVudC1xdWVzdGlvbi1kZWxheScpLmNsYXNzTmFtZSA9ICdlbnRyeS1uZXh0LWRlbGF5JztcbiAgICB9ZWxzZSBpZiAodGhpcy5wYWdlU2VydmljZS5zdGFnZSA9PSAnZW50cnktcHJldmlvdXMnKSB7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhdGVtZW50LXF1ZXN0aW9uJykuY2xhc3NOYW1lID0gJ2VudHJ5LXByZXZpb3VzLWRlbGF5JztcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdGF0ZW1lbnQtcXVlc3Rpb24tZGVsYXknKS5jbGFzc05hbWUgPSAnZW50cnktcHJldmlvdXMnO1xuICAgIH1cbiAgfVxuXG4gIG9uU3VibWl0KCl7XG4gICAgdGhpcy5zdXJ2ZXlSZXNwb25zZS5hbnN3ZXIgPSAnT2snO1xuICAgIHRoaXMuc3VydmV5UmVzcG9uc2UuaWRlbnRpZmllciA9IHRoaXMuc3RhdGVtZW50LmlkZW50aWZpZXI7XG4gICAgdGhpcy5zdXJ2ZXlSZXNwb25zZS5xdWVzdGlvbklkID0gdGhpcy5zdGF0ZW1lbnQucXVlc3Rpb25JZDtcbiAgICB0aGlzLnN1cnZleVJlc3BvbnNlLnF1ZXN0aW9uVHlwZSA9IHRoaXMuc3RhdGVtZW50LnF1ZXN0aW9uVHlwZTtcbiAgICB0aGlzLnBhZ2VTZXJ2aWNlLnBlcnNpc3RTdXJ2ZXkodGhpcy5zdXJ2ZXlSZXNwb25zZSk7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J0bi1wcmltYXJ5JykuY2xhc3NMaXN0LmFkZCgnYmxpbmstYnRuLWFuaW1hdGlvbicpO1xuICAgIHNldFRpbWVvdXQoKCk9PntcbiAgICAgIHRoaXMuc3VibWl0RXZlbnQuZW1pdCgpO1xuICAgIH0sMzUwKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuc3VibWl0RXZlbnQudW5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIG9uU2tpcCh2YWx1ZTogYW55KXtcbiAgICBpZiAodmFsdWUgIT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLnN1cnZleVJlc3BvbnNlLmFuc3dlciA9IHZhbHVlO1xuICAgICAgdGhpcy5zdXJ2ZXlSZXNwb25zZS5pZGVudGlmaWVyID0gdGhpcy5zdGF0ZW1lbnQuaWRlbnRpZmllcjtcbiAgICAgIHRoaXMuc3VydmV5UmVzcG9uc2UucXVlc3Rpb25JZCA9IHRoaXMuc3RhdGVtZW50LnF1ZXN0aW9uSWQ7XG4gICAgICB0aGlzLnN1cnZleVJlc3BvbnNlLnF1ZXN0aW9uVHlwZSA9IHRoaXMuc3RhdGVtZW50LnF1ZXN0aW9uVHlwZTtcbiAgICAgIHRoaXMucGFnZVNlcnZpY2UucGVyc2lzdFN1cnZleSh0aGlzLnN1cnZleVJlc3BvbnNlKTtcbiAgICB9XG4gICAgdGhpcy5zdWJtaXRFdmVudC5lbWl0KCk7XG4gIH1cblxufVxuIl19