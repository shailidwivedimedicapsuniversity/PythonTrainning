/**
 * @fileoverview added by tsickle
 * Generated from: lib/shared/pages-services/pages.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Injectable } from '@angular/core';
import { SurveyResponses } from '../../pages/survey-response.model';
export class PagesService {
    constructor() {
        this.previousQuestion = new EventEmitter();
        this.nextQuestion = new EventEmitter();
        this.nextPageEvent = new EventEmitter();
        this.surveyResponses = [];
        this.sequenceOfQuestionTraversed = [];
    }
    /**
     * @param {?} response
     * @return {?}
     */
    persistSurvey(response) {
        /** @type {?} */
        let index = this.surveyResponses.findIndex((/**
         * @param {?} surveyResponse
         * @return {?}
         */
        surveyResponse => surveyResponse.identifier === response.identifier));
        if (index !== -1) {
            this.surveyResponses[index] = response;
        }
        else {
            this.surveyResponses.push(response);
        }
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    removeResponsesOfExcludedQuestionIds(payload) {
        return this.surveyResponses.filter((/**
         * @param {?} response
         * @return {?}
         */
        response => payload.find((/**
         * @param {?} questionId
         * @return {?}
         */
        questionId => questionId == response.questionId))));
    }
    /**
     * @param {?} identifier
     * @return {?}
     */
    getResponse(identifier) {
        console.log(this.surveyResponses);
        /** @type {?} */
        let index = this.surveyResponses.findIndex((/**
         * @param {?} res
         * @return {?}
         */
        res => res.identifier == identifier));
        if (index > -1) {
            return this.surveyResponses[index];
        }
        else {
            return new SurveyResponses();
        }
    }
}
PagesService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PagesService.ctorParameters = () => [];
if (false) {
    /**
     * @type {?}
     * @private
     */
    PagesService.prototype.surveyUrl;
    /**
     * @type {?}
     * @private
     */
    PagesService.prototype.submitResponseUrl;
    /** @type {?} */
    PagesService.prototype.previousQuestion;
    /** @type {?} */
    PagesService.prototype.nextQuestion;
    /** @type {?} */
    PagesService.prototype.nextPageEvent;
    /** @type {?} */
    PagesService.prototype.surveyResponses;
    /** @type {?} */
    PagesService.prototype.sequenceOfQuestionTraversed;
    /** @type {?} */
    PagesService.prototype.stage;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZXMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3N1cnZleS1saWIvIiwic291cmNlcyI6WyJsaWIvc2hhcmVkL3BhZ2VzLXNlcnZpY2VzL3BhZ2VzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsWUFBWSxFQUFFLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUV2RCxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sbUNBQW1DLENBQUM7QUFLbEUsTUFBTSxPQUFPLFlBQVk7SUFZdkI7UUFSTyxxQkFBZ0IsR0FBeUIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUM1RCxpQkFBWSxHQUF5QixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ3hELGtCQUFhLEdBQXlCLElBQUksWUFBWSxFQUFFLENBQUM7UUFDekQsb0JBQWUsR0FBc0IsRUFBRSxDQUFDO1FBQ3hDLGdDQUEyQixHQUFhLEVBQUUsQ0FBQztJQU1sRCxDQUFDOzs7OztJQUVNLGFBQWEsQ0FBQyxRQUEwQjs7WUFDekMsS0FBSyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUzs7OztRQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsY0FBYyxDQUFDLFVBQVUsS0FBSyxRQUFRLENBQUMsVUFBVSxFQUFDO1FBQy9HLElBQUksS0FBSyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLEdBQUcsUUFBUSxDQUFDO1NBQ3hDO2FBQUs7WUFDSixJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNyQztJQUNILENBQUM7Ozs7O0lBRU0sb0NBQW9DLENBQUMsT0FBYztRQUN4RCxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTTs7OztRQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUk7Ozs7UUFBQyxVQUFVLENBQUMsRUFBRSxDQUFDLFVBQVUsSUFBSSxRQUFRLENBQUMsVUFBVSxFQUFDLEVBQUMsQ0FBQztJQUNoSCxDQUFDOzs7OztJQUdNLFdBQVcsQ0FBQyxVQUFrQjtRQUNuQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQzs7WUFFOUIsS0FBSyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUzs7OztRQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFVBQVUsSUFBSSxVQUFVLEVBQUM7UUFDL0UsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDZCxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDcEM7YUFBSztZQUNKLE9BQU8sSUFBSSxlQUFlLEVBQUUsQ0FBQztTQUM5QjtJQUNILENBQUM7OztZQXhDRixVQUFVOzs7Ozs7Ozs7SUFHVCxpQ0FBbUM7Ozs7O0lBQ25DLHlDQUEyQzs7SUFDM0Msd0NBQW1FOztJQUNuRSxvQ0FBK0Q7O0lBQy9ELHFDQUFnRTs7SUFDaEUsdUNBQStDOztJQUMvQyxtREFBa0Q7O0lBRWxELDZCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RXZlbnRFbWl0dGVyLCBJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1N1cnZleVJlc3BvbnNlc30gZnJvbSAnLi4vLi4vcGFnZXMvc3VydmV5LXJlc3BvbnNlLm1vZGVsJztcbmltcG9ydCB7U3RvcmV9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCAqIGFzIHN1cnZleUFjdGlvbnMgZnJvbSAnLi4vLi4vcGFnZXMvc3RvcmUvc3VydmV5LWFjdGlvbnMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUGFnZXNTZXJ2aWNle1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgc3VydmV5VXJsOiBzdHJpbmc7XG4gIHByaXZhdGUgcmVhZG9ubHkgc3VibWl0UmVzcG9uc2VVcmw6IHN0cmluZztcbiAgcHVibGljIHByZXZpb3VzUXVlc3Rpb246IEV2ZW50RW1pdHRlcjxudW1iZXI+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBwdWJsaWMgbmV4dFF1ZXN0aW9uOiBFdmVudEVtaXR0ZXI8bnVtYmVyPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgcHVibGljIG5leHRQYWdlRXZlbnQ6IEV2ZW50RW1pdHRlcjxzdHJpbmc+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBwdWJsaWMgc3VydmV5UmVzcG9uc2VzOiBTdXJ2ZXlSZXNwb25zZXNbXSA9IFtdO1xuICBwdWJsaWMgc2VxdWVuY2VPZlF1ZXN0aW9uVHJhdmVyc2VkOiBudW1iZXJbXSA9IFtdO1xuXG4gIHB1YmxpYyBzdGFnZTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuXG4gIH1cblxuICBwdWJsaWMgcGVyc2lzdFN1cnZleShyZXNwb25zZSA6IFN1cnZleVJlc3BvbnNlcyl7XG4gICAgbGV0IGluZGV4ID0gdGhpcy5zdXJ2ZXlSZXNwb25zZXMuZmluZEluZGV4KHN1cnZleVJlc3BvbnNlID0+IHN1cnZleVJlc3BvbnNlLmlkZW50aWZpZXIgPT09IHJlc3BvbnNlLmlkZW50aWZpZXIpO1xuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHRoaXMuc3VydmV5UmVzcG9uc2VzW2luZGV4XSA9IHJlc3BvbnNlO1xuICAgIH1lbHNlIHtcbiAgICAgIHRoaXMuc3VydmV5UmVzcG9uc2VzLnB1c2gocmVzcG9uc2UpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyByZW1vdmVSZXNwb25zZXNPZkV4Y2x1ZGVkUXVlc3Rpb25JZHMocGF5bG9hZDogYW55W10pIHtcbiAgICByZXR1cm4gdGhpcy5zdXJ2ZXlSZXNwb25zZXMuZmlsdGVyKHJlc3BvbnNlID0+IHBheWxvYWQuZmluZChxdWVzdGlvbklkID0+IHF1ZXN0aW9uSWQgPT0gcmVzcG9uc2UucXVlc3Rpb25JZCkpO1xuICB9XG5cblxuICBwdWJsaWMgZ2V0UmVzcG9uc2UoaWRlbnRpZmllcjogc3RyaW5nKXtcbiAgICBjb25zb2xlLmxvZyh0aGlzLnN1cnZleVJlc3BvbnNlcyk7XG5cbiAgICBsZXQgaW5kZXggPSB0aGlzLnN1cnZleVJlc3BvbnNlcy5maW5kSW5kZXgocmVzID0+IHJlcy5pZGVudGlmaWVyID09IGlkZW50aWZpZXIpO1xuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdXJ2ZXlSZXNwb25zZXNbaW5kZXhdO1xuICAgIH1lbHNlIHtcbiAgICAgIHJldHVybiBuZXcgU3VydmV5UmVzcG9uc2VzKCk7XG4gICAgfVxuICB9XG5cblxufVxuIl19