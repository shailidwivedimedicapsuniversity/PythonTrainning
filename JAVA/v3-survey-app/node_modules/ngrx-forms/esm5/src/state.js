import * as tslib_1 from "tslib";
import { isBoxed } from './boxing';
import { deepEquals, isEmpty } from './util';
/**
 * This function determines if a value is a form state.
 */
export function isFormState(state) {
    return !!state && state.hasOwnProperty('id') && state.hasOwnProperty('value') && state.hasOwnProperty('errors');
}
/**
 * This function determines if a value is an array state.
 */
export function isArrayState(state) {
    return isFormState(state) && state.hasOwnProperty('controls') && Array.isArray(state.controls);
}
/**
 * This function determines if a value is a group state.
 */
export function isGroupState(state) {
    return isFormState(state) && state.hasOwnProperty('controls') && !Array.isArray(state.controls) && typeof state.controls !== 'function';
}
export function createChildState(id, childValue) {
    if (isBoxed(childValue)) {
        return createFormControlState(id, childValue);
    }
    if (childValue !== null && Array.isArray(childValue)) {
        return createFormArrayState(id, childValue);
    }
    if (childValue !== null && typeof childValue === 'object') {
        return createFormGroupState(id, childValue);
    }
    return createFormControlState(id, childValue);
}
export function verifyFormControlValueIsValid(value) {
    if (value === null || ['string', 'number', 'boolean', 'undefined'].indexOf(typeof value) >= 0) {
        return value;
    }
    if (!isBoxed(value)) {
        var errorMsg = 'Form control states only support undefined, null, string, number, and boolean values as well as boxed values';
        throw new Error(errorMsg + "; got " + JSON.stringify(value) + " of type " + typeof value); // `;
    }
    if (value.value === null || ['string', 'number', 'boolean', 'undefined'].indexOf(typeof value.value) >= 0) {
        return value;
    }
    var serialized = JSON.stringify(value);
    var deserialized = JSON.parse(serialized);
    if (deepEquals(value, deserialized)) {
        return value;
    }
    throw new Error("A form control value must be serializable (i.e. value === JSON.parse(JSON.stringify(value))), got: " + JSON.stringify(value));
}
/**
 * This function creates a form control state with an ID and a value.
 */
export function createFormControlState(id, value) {
    return {
        id: id,
        value: verifyFormControlValueIsValid(value),
        errors: {},
        pendingValidations: [],
        isValidationPending: false,
        isValid: true,
        isInvalid: false,
        isEnabled: true,
        isDisabled: false,
        isDirty: false,
        isPristine: true,
        isTouched: false,
        isUntouched: true,
        isSubmitted: false,
        isUnsubmitted: true,
        isFocused: false,
        isUnfocused: true,
        userDefinedProperties: {},
    };
}
export function getFormGroupValue(controls, originalValue) {
    var hasChanged = Object.keys(originalValue).length !== Object.keys(controls).length;
    var newValue = Object.keys(controls).reduce(function (res, key) {
        hasChanged = hasChanged || originalValue[key] !== controls[key].value;
        res[key] = controls[key].value;
        return res;
    }, {});
    return hasChanged ? newValue : originalValue;
}
export function getFormGroupErrors(controls, originalErrors) {
    var hasChanged = false;
    var groupErrors = Object.keys(originalErrors)
        .filter(function (key) { return !key.startsWith('_'); })
        .reduce(function (res, key) {
        var _a;
        return Object.assign(res, (_a = {}, _a[key] = originalErrors[key], _a));
    }, {});
    var newErrors = Object.keys(controls).reduce(function (res, key) {
        var _a;
        var controlErrors = controls[key].errors;
        if (!isEmpty(controlErrors)) {
            hasChanged = hasChanged || originalErrors["_" + key] !== controlErrors;
            Object.assign(res, (_a = {}, _a["_" + key] = controls[key].errors, _a));
        }
        else {
            hasChanged = hasChanged || originalErrors.hasOwnProperty("_" + key);
        }
        return res;
    }, groupErrors);
    hasChanged = hasChanged || Object.keys(originalErrors).length !== Object.keys(newErrors).length;
    return hasChanged ? newErrors : originalErrors;
}
export function computeGroupState(id, controls, value, errors, pendingValidations, userDefinedProperties, flags) {
    value = getFormGroupValue(controls, value);
    errors = getFormGroupErrors(controls, errors);
    var isValid = isEmpty(errors);
    var isDirty = flags.wasOrShouldBeDirty || Object.keys(controls).some(function (key) { return controls[key].isDirty; });
    var isEnabled = flags.wasOrShouldBeEnabled || Object.keys(controls).some(function (key) { return controls[key].isEnabled; });
    var isTouched = flags.wasOrShouldBeTouched || Object.keys(controls).some(function (key) { return controls[key].isTouched; });
    var isSubmitted = flags.wasOrShouldBeSubmitted || Object.keys(controls).some(function (key) { return controls[key].isSubmitted; });
    var isValidationPending = pendingValidations.length > 0 || Object.keys(controls).some(function (key) { return controls[key].isValidationPending; });
    return {
        id: id,
        value: value,
        errors: errors,
        pendingValidations: pendingValidations,
        isValidationPending: isValidationPending,
        isValid: isValid,
        isInvalid: !isValid,
        isEnabled: isEnabled,
        isDisabled: !isEnabled,
        isDirty: isDirty,
        isPristine: !isDirty,
        isTouched: isTouched,
        isUntouched: !isTouched,
        isSubmitted: isSubmitted,
        isUnsubmitted: !isSubmitted,
        userDefinedProperties: userDefinedProperties,
        controls: controls,
    };
}
/**
 * This function creates a form group state with an ID and a value.
 * From the value the shape of the group state is inferred, i.e.
 * object properties are inferred as form groups, array properties
 * are inferred as form arrays, and primitive properties are inferred
 * as form controls.
 */
export function createFormGroupState(id, initialValue) {
    var controls = Object.keys(initialValue)
        .map(function (key) { return [key, createChildState(id + "." + key, initialValue[key])]; })
        .reduce(function (res, _a) {
        var _b;
        var _c = tslib_1.__read(_a, 2), controlId = _c[0], state = _c[1];
        return Object.assign(res, (_b = {}, _b[controlId] = state, _b));
    }, {});
    return computeGroupState(id, controls, initialValue, {}, [], {}, { wasOrShouldBeEnabled: true });
}
function getFormArrayValue(controls, originalValue) {
    var hasChanged = Object.keys(originalValue).length !== Object.keys(controls).length;
    var newValue = controls.map(function (state, i) {
        hasChanged = hasChanged || originalValue[i] !== state.value;
        return state.value;
    });
    return hasChanged ? newValue : originalValue;
}
function getFormArrayErrors(controls, originalErrors) {
    var hasChanged = false;
    var groupErrors = Object.keys(originalErrors)
        .filter(function (key) { return !key.startsWith('_'); })
        .reduce(function (res, key) {
        var _a;
        return Object.assign(res, (_a = {}, _a[key] = originalErrors[key], _a));
    }, {});
    var newErrors = controls.reduce(function (res, state, i) {
        var _a;
        var controlErrors = state.errors;
        if (!isEmpty(controlErrors)) {
            hasChanged = hasChanged || originalErrors["_" + i] !== controlErrors;
            Object.assign(res, (_a = {}, _a["_" + i] = controlErrors, _a));
        }
        else {
            hasChanged = hasChanged || originalErrors.hasOwnProperty("_" + i);
        }
        return res;
    }, groupErrors);
    hasChanged = hasChanged || Object.keys(originalErrors).length !== Object.keys(newErrors).length;
    return hasChanged ? newErrors : originalErrors;
}
export function computeArrayState(id, inferredControls, value, errors, pendingValidations, userDefinedProperties, flags) {
    var controls = inferredControls;
    value = getFormArrayValue(controls, value);
    errors = getFormArrayErrors(controls, errors);
    var isValid = isEmpty(errors);
    var isDirty = flags.wasOrShouldBeDirty || controls.some(function (state) { return state.isDirty; });
    var isEnabled = flags.wasOrShouldBeEnabled || controls.some(function (state) { return state.isEnabled; });
    var isTouched = flags.wasOrShouldBeTouched || controls.some(function (state) { return state.isTouched; });
    var isSubmitted = flags.wasOrShouldBeSubmitted || controls.some(function (state) { return state.isSubmitted; });
    var isValidationPending = pendingValidations.length > 0 || controls.some(function (state) { return state.isValidationPending; });
    return {
        id: id,
        value: value,
        errors: errors,
        pendingValidations: pendingValidations,
        isValidationPending: isValidationPending,
        isValid: isValid,
        isInvalid: !isValid,
        isEnabled: isEnabled,
        isDisabled: !isEnabled,
        isDirty: isDirty,
        isPristine: !isDirty,
        isTouched: isTouched,
        isUntouched: !isTouched,
        isSubmitted: isSubmitted,
        isUnsubmitted: !isSubmitted,
        userDefinedProperties: userDefinedProperties,
        controls: inferredControls,
    };
}
/**
 * This function creates a form array state with an ID and a value.
 * From the value the shape of the array state is inferred, i.e.
 * object values are inferred as form groups, array values
 * are inferred as form arrays, and primitive values are inferred
 * as form controls.
 */
export function createFormArrayState(id, initialValue) {
    var controls = initialValue
        .map(function (value, i) { return createChildState(id + "." + i, value); });
    return computeArrayState(id, controls, initialValue, {}, [], {}, { wasOrShouldBeEnabled: true });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3J4LWZvcm1zLyIsInNvdXJjZXMiOlsic3JjL3N0YXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQVMsT0FBTyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQzFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBNmtCN0M7O0dBRUc7QUFDSCxNQUFNLFVBQVUsV0FBVyxDQUFlLEtBQVU7SUFDbEQsT0FBTyxDQUFDLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ2xILENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sVUFBVSxZQUFZLENBQWUsS0FBVTtJQUNuRCxPQUFPLFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUUsS0FBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzFHLENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sVUFBVSxZQUFZLENBQWUsS0FBVTtJQUNuRCxPQUFPLFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBRSxLQUFhLENBQUMsUUFBUSxDQUFDLElBQUksT0FBUSxLQUFhLENBQUMsUUFBUSxLQUFLLFVBQVUsQ0FBQztBQUM1SixDQUFDO0FBRUQsTUFBTSxVQUFVLGdCQUFnQixDQUFTLEVBQVUsRUFBRSxVQUFrQjtJQUNyRSxJQUFJLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRTtRQUN2QixPQUFPLHNCQUFzQixDQUFNLEVBQUUsRUFBRSxVQUFVLENBQXNCLENBQUM7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Ym94aW5nJztcclxuaW1wb3J0IHsgZGVlcEVxdWFscywgaXNFbXB0eSB9IGZyb20gJy4vdXRpbCc7XHJcblxyXG5leHBvcnQgdHlwZSBGb3JtQ29udHJvbFZhbHVlVHlwZXMgPSBCb3hlZDxhbnk+IHwgc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWQ7XHJcbmV4cG9ydCB0eXBlIE5ncnhGb3JtQ29udHJvbElkID0gc3RyaW5nO1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgdHlwZSByZXByZXNlbnRzIGEgY29sbGVjdGlvbiBvZiBuYW1lZCBlcnJvcnMuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFZhbGlkYXRpb25FcnJvcnMgeyByZWFkb25seSBba2V5OiBzdHJpbmddOiBhbnk7IH1cclxuZXhwb3J0IGludGVyZmFjZSBLZXlWYWx1ZSB7IFtrZXk6IHN0cmluZ106IGFueTsgfVxyXG5cclxuLyoqXHJcbiAqIEJhc2UgaW50ZXJmYWNlIGZvciBhbGwgdHlwZXMgb2YgZm9ybSBzdGF0ZXMuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEFic3RyYWN0Q29udHJvbFN0YXRlPFRWYWx1ZT4ge1xyXG4gIC8qKlxyXG4gICAqIFRoZSB1bmlxdWUgSUQgb2YgdGhlIGZvcm0gc3RhdGUuIFVzdWFsbHkgdGhpcyBpcyB0aGUgbmFtZSBvciBpbmRleFxyXG4gICAqIG9mIHRoZSBjb250cm9sIGluIHRoZSBmb3JtIHZhbHVlIHByZWZpeGVkIGJ5IHRoZSBJRCBvZiB0aGUgY29udGFpbmluZ1xyXG4gICAqIGdyb3VwIG9yIGFycmF5LCBlLmcuIGBNWV9GT1JNLnNvbWVUZXh0SW5wdXRgIG9yIGBNWV9GT1JNLjBgLlxyXG4gICAqL1xyXG4gIHJlYWRvbmx5IGlkOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgZm9ybSBzdGF0ZS5cclxuICAgKi9cclxuICByZWFkb25seSB2YWx1ZTogVFZhbHVlO1xyXG5cclxuICAvKipcclxuICAgKiBUaGlzIHByb3BlcnR5IGlzIGB0cnVlYCBpZiB0aGUgc3RhdGUgZG9lcyBub3QgaGF2ZSBhbnkgZXJyb3JzLlxyXG4gICAqL1xyXG4gIHJlYWRvbmx5IGlzVmFsaWQ6IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgcHJvcGVydHkgaXMgYHRydWVgIGlmIHRoZSBzdGF0ZSBoYXMgYXQgbGVhc3Qgb25lIGVycm9yLlxyXG4gICAqL1xyXG4gIHJlYWRvbmx5IGlzSW52YWxpZDogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGVycm9ycyBvZiB0aGUgc3RhdGUuIFRoaXMgcHJvcGVydHkgYWx3YXlzIGhhcyBhIHZhbHVlLlxyXG4gICAqIElmIHRoZSBzdGF0ZSBoYXMgbm8gZXJyb3JzIHRoZSBwcm9wZXJ0eSBpcyBzZXQgdG8gYHt9YC5cclxuICAgKi9cclxuICByZWFkb25seSBlcnJvcnM6IFZhbGlkYXRpb25FcnJvcnM7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBuYW1lcyBvZiBhbGwgYXN5bmNocm9ub3VzIHZhbGlkYXRpb25zIGN1cnJlbnRseSBydW5uaW5nXHJcbiAgICogZm9yIHRoZSBzdGF0ZS5cclxuICAgKi9cclxuICByZWFkb25seSBwZW5kaW5nVmFsaWRhdGlvbnM6IHJlYWRvbmx5IHN0cmluZ1tdO1xyXG5cclxuICAvKipcclxuICAgKiBUaGlzIHByb3BlcnR5IGluZGljYXRlcyB3aGV0aGVyIHRoZSBjb250cm9sIGlzIGN1cnJlbnRseSBiZWluZ1xyXG4gICAqIGFzeW5jaHJvbm91c2x5IHZhbGlkYXRlZC5cclxuICAgKi9cclxuICByZWFkb25seSBpc1ZhbGlkYXRpb25QZW5kaW5nOiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBUaGlzIHByb3BlcnR5IGluZGljYXRlcyB3aGV0aGVyIHRoZSBzdGF0ZSBpcyBlbmFibGVkLiBXaGVuIGl0XHJcbiAgICogaXMgYGZhbHNlYCB0aGUgYGVycm9yc2AgYXJlIGFsd2F5cyBge31gIChpLmUuIHRoZSBzdGF0ZSBpc1xyXG4gICAqIGFsd2F5cyB2YWxpZCBpZiBkaXNhYmxlZCkgYW5kIGBwZW5kaW5nVmFsaWRhdGlvbnNgIGlzIGFsd2F5cyBgW11gXHJcbiAgICogKGkuZS4gYWxsIHBlbmRpbmcgdmFsaWRhdGlvbnMgYXJlIGNhbmNlbGxlZCkuXHJcbiAgICovXHJcbiAgcmVhZG9ubHkgaXNFbmFibGVkOiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBUaGlzIHByb3BlcnR5IGluZGljYXRlcyB3aGV0aGVyIHRoZSBzdGF0ZSBpcyBkaXNhYmxlZC4gV2hlbiBpdFxyXG4gICAqIGlzIGB0cnVlYCB0aGUgYGVycm9yc2AgYXJlIGFsd2F5cyBge31gIChpLmUuIHRoZSBzdGF0ZSBpc1xyXG4gICAqIGFsd2F5cyB2YWxpZCBpZiBkaXNhYmxlZCkgYW5kIGBwZW5kaW5nVmFsaWRhdGlvbnNgIGlzIGFsd2F5cyBgW11gXHJcbiAgICogKGkuZS4gYWxsIHBlbmRpbmcgdmFsaWRhdGlvbnMgYXJlIGNhbmNlbGxlZCkuXHJcbiAgICovXHJcbiAgcmVhZG9ubHkgaXNEaXNhYmxlZDogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBwcm9wZXJ0eSBpcyBzZXQgdG8gYHRydWVgIGFzIHNvb24gYXMgdGhlIHN0YXRlJ3MgdmFsdWUgY2hhbmdlcy5cclxuICAgKi9cclxuICByZWFkb25seSBpc0RpcnR5OiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBUaGlzIHByb3BlcnR5IGlzIGB0cnVlYCBhcyBsb25nIGFzIHRoZSBzdGF0ZSdzIHZhbHVlIG5ldmVyIGNoYW5nZWQuXHJcbiAgICovXHJcbiAgcmVhZG9ubHkgaXNQcmlzdGluZTogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBwcm9wZXJ0eSBpcyBzZXQgdG8gYHRydWVgIGFzIHNvb24gYXMgdGhlIHN0YXRlIGlzIHRvdWNoZWQuXHJcbiAgICovXHJcbiAgcmVhZG9ubHkgaXNUb3VjaGVkOiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBUaGlzIHByb3BlcnR5IGlzIGB0cnVlYCBhcyBsb25nIGFzIHRoZSBzdGF0ZSBpcyBub3QgdG91Y2hlZC5cclxuICAgKi9cclxuICByZWFkb25seSBpc1VudG91Y2hlZDogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBwcm9wZXJ0eSBpcyBzZXQgdG8gYHRydWVgIGFzIHNvb24gYXMgdGhlIHN0YXRlIGlzIHN1Ym1pdHRlZC5cclxuICAgKi9cclxuICByZWFkb25seSBpc1N1Ym1pdHRlZDogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBwcm9wZXJ0eSBpcyBgdHJ1ZWAgYXMgbG9uZyBhcyB0aGUgc3RhdGUgaXMgbm90IHN1Ym1pdHRlZC5cclxuICAgKi9cclxuICByZWFkb25seSBpc1Vuc3VibWl0dGVkOiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBUaGlzIHByb3BlcnR5IGlzIGEgY29udGFpbmVyIGZvciB1c2VyLWRlZmluZWQgbWV0YWRhdGEgKGUuZy4gaWZcclxuICAgKiB5b3Ugd2FudGVkIHRvIGNvdW50IHRoZSBudW1iZXIgb2YgdGltZXMgYSBzdGF0ZSdzIHZhbHVlIGhhcyBiZWVuXHJcbiAgICogY2hhbmdlZCwgd2hhdCBrZXlzIHdlcmUgcHJlc3NlZCBvbiBhbiBpbnB1dCwgb3IgaG93IG9mdGVuIGEgZm9ybVxyXG4gICAqIGhhcyBiZWVuIHN1Ym1pdHRlZCBldGMuKS4gV2hpbGUgaXQgaXMgcG9zc2libGUgdG8gc3RvcmUgdGhpcyBraW5kXHJcbiAgICogb2YgaW5mb3JtYXRpb24gb3V0c2lkZSBvZiAqKm5ncngtZm9ybXMqKiBpbiB5b3VyIG93biBzdGF0ZSB0aGVcclxuICAgKiBgdXNlckRlZmluZWRQcm9wZXJ0aWVzYCBhbGxvdyB5b3UgdG8gc3RvcmUgeW91ciBvd24gbWV0YWRhdGFcclxuICAgKiBkaXJlY3RseSBpbiB0aGUgc3RhdGUuXHJcbiAgICovXHJcbiAgcmVhZG9ubHkgdXNlckRlZmluZWRQcm9wZXJ0aWVzOiBLZXlWYWx1ZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFN0YXRlIGFzc29jaWF0ZWQgd2l0aCBhIGZvcm0gY29udHJvbCwgaS5lLiBhbiBIVE1MIGZvcm1cclxuICogZWxlbWVudCBpbiB0aGUgdmlldyAoZS5nLiBgaW5wdXRgLCBgc2VsZWN0YCwgYHRleHRhcmVhYCBldGMuKS5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgRm9ybUNvbnRyb2xTdGF0ZTxUVmFsdWUgZXh0ZW5kcyBGb3JtQ29udHJvbFZhbHVlVHlwZXM+IGV4dGVuZHMgQWJzdHJhY3RDb250cm9sU3RhdGU8VFZhbHVlPiB7XHJcbiAgLyoqXHJcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBmb3JtIHN0YXRlLiBGb3JtIGNvbnRyb2xzIG9ubHkgc3VwcG9ydCB2YWx1ZXMgb2ZcclxuICAgKiB0eXBlIGBzdHJpbmdgLCBgbnVtYmVyYCwgYGJvb2xlYW5gLCBgbnVsbGAsIGFuZCBgdW5kZWZpbmVkYCB0b1xyXG4gICAqIGtlZXAgdGhlIHN0YXRlIHN0cmluZyBzZXJpYWxpemFibGUuXHJcbiAgICovXHJcbiAgcmVhZG9ubHkgdmFsdWU6IFRWYWx1ZTtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBwcm9wZXJ0eSBpcyBgdHJ1ZWAgaWYgdGhlIGZvcm0gY29udHJvbCBkb2VzIG5vdCBoYXZlIGFueSBlcnJvcnMuXHJcbiAgICovXHJcbiAgcmVhZG9ubHkgaXNWYWxpZDogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBwcm9wZXJ0eSBpcyBgdHJ1ZWAgaWYgdGhlIGZvcm0gY29udHJvbCBoYXMgYXQgbGVhc3Qgb25lIGVycm9yLlxyXG4gICAqL1xyXG4gIHJlYWRvbmx5IGlzSW52YWxpZDogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGVycm9ycyBvZiB0aGUgZm9ybSBjb250cm9sLiBUaGlzIHByb3BlcnR5IGFsd2F5cyBoYXMgYSB2YWx1ZS5cclxuICAgKiBJZiB0aGUgY29udHJvbCBoYXMgbm8gZXJyb3JzIHRoZSBwcm9wZXJ0eSBpcyBzZXQgdG8gYHt9YC5cclxuICAgKi9cclxuICByZWFkb25seSBlcnJvcnM6IFZhbGlkYXRpb25FcnJvcnM7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBuYW1lcyBvZiBhbGwgYXN5bmNocm9ub3VzIHZhbGlkYXRpb25zIGN1cnJlbnRseSBydW5uaW5nIGZvciB0aGVcclxuICAgKiBmb3JtIGNvbnRyb2wuXHJcbiAgICovXHJcbiAgcmVhZG9ubHkgcGVuZGluZ1ZhbGlkYXRpb25zOiByZWFkb25seSBzdHJpbmdbXTtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBwcm9wZXJ0eSBpbmRpY2F0ZXMgd2hldGhlciB0aGUgY29udHJvbCBpcyBjdXJyZW50bHkgYmVpbmdcclxuICAgKiBhc3luY2hyb25vdXNseSB2YWxpZGF0ZWQgKGkuZS4gdGhpcyBpcyBgdHJ1ZWAgaWYgYW5kIG9ubHkgaWZcclxuICAgKiBgcGVuZGluZ1ZhbGlkYXRpb25zYCBpcyBub3QgZW1wdHkpLlxyXG4gICAqL1xyXG4gIHJlYWRvbmx5IGlzVmFsaWRhdGlvblBlbmRpbmc6IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgcHJvcGVydHkgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIGZvcm0gY29udHJvbCBpcyBlbmFibGVkLlxyXG4gICAqIFdoZW4gaXQgaXMgYGZhbHNlYCB0aGUgYGVycm9yc2AgYXJlIGFsd2F5cyBge31gIChpLmUuIHRoZSBmb3JtXHJcbiAgICogY29udHJvbCBpcyBhbHdheXMgdmFsaWQgaWYgZGlzYWJsZWQpIGFuZCBgcGVuZGluZ1ZhbGlkYXRpb25zYFxyXG4gICAqIGlzIGFsd2F5cyBgW11gIChpLmUuIGFsbCBwZW5kaW5nIHZhbGlkYXRpb25zIGFyZSBjYW5jZWxsZWQpLlxyXG4gICAqL1xyXG4gIHJlYWRvbmx5IGlzRW5hYmxlZDogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBwcm9wZXJ0eSBpbmRpY2F0ZXMgd2hldGhlciB0aGUgZm9ybSBjb250cm9sIGlzIGRpc2FibGVkLlxyXG4gICAqIFdoZW4gaXQgaXMgYHRydWVgIHRoZSBgZXJyb3JzYCBhcmUgYWx3YXlzIGB7fWAgKGkuZS4gdGhlIGZvcm1cclxuICAgKiBjb250cm9sIGlzIGFsd2F5cyB2YWxpZCBpZiBkaXNhYmxlZCkgYW5kIGBwZW5kaW5nVmFsaWRhdGlvbnNgXHJcbiAgICogaXMgYWx3YXlzIGBbXWAgKGkuZS4gYWxsIHBlbmRpbmcgdmFsaWRhdGlvbnMgYXJlIGNhbmNlbGxlZCkuXHJcbiAgICovXHJcbiAgcmVhZG9ubHkgaXNEaXNhYmxlZDogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBwcm9wZXJ0eSBpcyBzZXQgdG8gYHRydWVgIGFzIHNvb24gYXMgdGhlIHVuZGVybHlpbmdcclxuICAgKiBgRm9ybVZpZXdBZGFwdGVyYCBvciBgQ29udHJvbFZhbHVlQWNjZXNzb3JgIHJlcG9ydHMgYSBuZXdcclxuICAgKiB2YWx1ZSBmb3IgdGhlIGZpcnN0IHRpbWUuXHJcbiAgICovXHJcbiAgcmVhZG9ubHkgaXNEaXJ0eTogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBwcm9wZXJ0eSBpcyBgdHJ1ZWAgYXMgbG9uZyBhcyB0aGUgdW5kZXJseWluZ1xyXG4gICAqIGBGb3JtVmlld0FkYXB0ZXJgIG9yIGBDb250cm9sVmFsdWVBY2Nlc3NvcmAgaGFzIG5ldmVyXHJcbiAgICogcmVwb3J0ZWQgYSBuZXcgdmFsdWUuXHJcbiAgICovXHJcbiAgcmVhZG9ubHkgaXNQcmlzdGluZTogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBwcm9wZXJ0eSBpcyBzZXQgdG8gYHRydWVgIGJhc2VkIG9uIHRoZSBydWxlcyBvZiB0aGVcclxuICAgKiB1bmRlcmx5aW5nIGBGb3JtVmlld0FkYXB0ZXJgICh1c3VhbGx5IG9uIGBibHVyYCBmb3IgbW9zdCBmb3JtXHJcbiAgICogZWxlbWVudHMpLlxyXG4gICAqL1xyXG4gIHJlYWRvbmx5IGlzVG91Y2hlZDogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBwcm9wZXJ0eSBpcyBgdHJ1ZWAgYXMgbG9uZyBhcyB0aGUgY29udHJvbCBpcyBub3QgdG91Y2hlZC5cclxuICAgKi9cclxuICByZWFkb25seSBpc1VudG91Y2hlZDogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBwcm9wZXJ0eSBpcyBzZXQgdG8gYHRydWVgIGFzIHNvb24gYXMgdGhlIGdyb3VwIG9yIGFycmF5XHJcbiAgICogY29udGFpbmluZyB0aGlzIGZvcm0gY29udHJvbCBpcyBzdWJtaXR0ZWQuIEEgZm9ybSBjb250cm9sIGNhblxyXG4gICAqIG5ldmVyIGJlIHN1Ym1pdHRlZCBvbiBpdHMgb3duLlxyXG4gICAqL1xyXG4gIHJlYWRvbmx5IGlzU3VibWl0dGVkOiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBUaGlzIHByb3BlcnR5IGlzIGB0cnVlYCBhcyBsb25nIGFzIHRoZSBzdGF0ZSBpcyBub3Qgc3VibWl0dGVkLlxyXG4gICAqL1xyXG4gIHJlYWRvbmx5IGlzVW5zdWJtaXR0ZWQ6IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgcHJvcGVydHkgaXMgc2V0IHRvIGB0cnVlYCBpZiB0aGUgZm9ybSBjb250cm9sIGN1cnJlbnRseVxyXG4gICAqIGhhcyBmb2N1cy4gVGhpcyBmZWF0dXJlIGlzIG9wdC1pbi4gVG8gZW5hYmxlIGl0IHlvdSBoYXZlIHRvXHJcbiAgICogZW5hYmxlIGl0IGZvciBhIGdpdmVuIGZvcm0gZWxlbWVudCBsaWtlIHRoaXM6XHJcbiAgICpcclxuYGBgaHRtbFxyXG48aW5wdXQgW25ncnhGb3JtQ29udHJvbFN0YXRlXT1cInN0YXRlXCJcclxuICAgICAgW25ncnhFbmFibGVGb2N1c1RyYWNraW5nXT1cInRydWVcIiAvPlxyXG5gYGBcclxuICAgKi9cclxuICByZWFkb25seSBpc0ZvY3VzZWQ6IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgcHJvcGVydHkgaXMgYHRydWVgIGlmIHRoZSBjb250cm9sIGN1cnJlbnRseSBkb2VzIG5vdCBoYXZlXHJcbiAgICogZm9jdXMgb3IgZm9jdXMgdHJhY2tpbmcgaXMgbm90IGVuYWJsZWQgZm9yIHRoZSBmb3JtIGNvbnRyb2wuXHJcbiAgICovXHJcbiAgcmVhZG9ubHkgaXNVbmZvY3VzZWQ6IGJvb2xlYW47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGlzIHR5cGUgcmVwcmVzZW50cyB0aGUgY2hpbGQgY29udHJvbCBzdGF0ZXMgb2YgYSBmb3JtIGdyb3VwLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgRm9ybUdyb3VwQ29udHJvbHM8VFZhbHVlPiA9IHtcclxuICByZWFkb25seSBbY29udHJvbElkIGluIGtleW9mIFRWYWx1ZV06IEZvcm1TdGF0ZTxUVmFsdWVbY29udHJvbElkXT47XHJcbn07XHJcblxyXG4vKipcclxuICogRm9ybSBncm91cHMgYXJlIGNvbGxlY3Rpb25zIG9mIG5hbWVkIGNvbnRyb2xzLiBKdXN0IGxpa2UgY29udHJvbHNcclxuICogZ3JvdXBzIGFyZSByZXByZXNlbnRlZCBhcyBwbGFpbiBzdGF0ZSBvYmplY3RzLiBUaGUgc3RhdGUgb2YgYVxyXG4gKiBncm91cCBpcyBkZXRlcm1pbmVkIGFsbW9zdCBmdWxseSBieSBpdHMgY2hpbGQgc3RhdGVzLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBGb3JtR3JvdXBTdGF0ZTxUVmFsdWUgZXh0ZW5kcyBLZXlWYWx1ZT4gZXh0ZW5kcyBBYnN0cmFjdENvbnRyb2xTdGF0ZTxUVmFsdWU+IHtcclxuICAvKipcclxuICAgKiBUaGUgYWdncmVnYXRlZCB2YWx1ZSBvZiB0aGUgZm9ybSBncm91cC4gVGhlIHZhbHVlIGlzIGNvbXB1dGVkIGJ5XHJcbiAgICogYWdncmVnYXRpbmcgdGhlIHZhbHVlcyBvZiBhbGwgY2hpbGRyZW4sIGUuZy5cclxuICAgKlxyXG5gYGB0eXBlc2NyaXB0XHJcbntcclxuICBjaGlsZDE6ICdzb21lIHZhbHVlJyxcclxuICBjaGlsZDI6IHtcclxuICAgIG5lc3RlZENoaWxkOiAxMCxcclxuICB9LFxyXG59XHJcbmBgYFxyXG4gICAqL1xyXG4gIHJlYWRvbmx5IHZhbHVlOiBUVmFsdWU7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgcHJvcGVydHkgaXMgYHRydWVgIGlmIHRoZSBmb3JtIGdyb3VwIGRvZXMgbm90IGhhdmUgYW55IGVycm9yc1xyXG4gICAqIGl0c2VsZiBhbmQgbm9uZSBvZiBpdHMgY2hpbGRyZW4gaGF2ZSBhbnkgZXJyb3JzLlxyXG4gICAqL1xyXG4gIHJlYWRvbmx5IGlzVmFsaWQ6IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgcHJvcGVydHkgaXMgYHRydWVgIGlmIHRoZSBmb3JtIGdyb3VwIG9yIGFueSBvZiBpdHMgY2hpbGRyZW5cclxuICAgKiBoYXZlIGF0IGxlYXN0IG9uZSBlcnJvci5cclxuICAgKi9cclxuICByZWFkb25seSBpc0ludmFsaWQ6IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBlcnJvcnMgb2YgdGhlIGZvcm0gZ3JvdXAuIFRoaXMgcHJvcGVydHkgaXMgY29tcHV0ZWQgYnkgbWVyZ2luZ1xyXG4gICAqIHRoZSBlcnJvcnMgb2YgdGhlIGdyb3VwIHdpdGggdGhlIGVycm9ycyBvZiBhbGwgaXRzIGNoaWxkcmVuIHdoZXJlXHJcbiAgICogdGhlIGNoaWxkIGVycm9ycyBhcmUgYSBwcm9wZXJ0eSBvZiB0aGUgYGVycm9yc2Agb2JqZWN0IHByZWZpeGVkIHdpdGhcclxuICAgKiBhbiB1bmRlcnNjb3JlLCBlLmcuXHJcbiAgICpcclxuYGBgXHJcbntcclxuICBncm91cEVycm9yOiB0cnVlLFxyXG4gIF9jaGlsZDoge1xyXG4gICAgY2hpbGRFcnJvcjogdHJ1ZSxcclxuICB9LFxyXG59XHJcbmBgYFxyXG4gICAqXHJcbiAgICogSWYgbmVpdGhlciB0aGUgZ3JvdXAgbm9yIGFueSBjaGlsZHJlbiBoYXZlIGVycm9ycyB0aGUgcHJvcGVydHkgaXNcclxuICAgKiBzZXQgdG8gYHt9YC5cclxuICAgKi9cclxuICByZWFkb25seSBlcnJvcnM6IFZhbGlkYXRpb25FcnJvcnM7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBuYW1lcyBvZiBhbGwgYXN5bmNocm9ub3VzIHZhbGlkYXRpb25zIGN1cnJlbnRseSBydW5uaW5nIGZvciB0aGVcclxuICAgKiBmb3JtIGdyb3VwLlxyXG4gICAqL1xyXG4gIHJlYWRvbmx5IHBlbmRpbmdWYWxpZGF0aW9uczogcmVhZG9ubHkgc3RyaW5nW107XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgcHJvcGVydHkgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIGdyb3VwIG9yIGFueSBvZiBpdHMgY2hpbGRyZW5cclxuICAgKiBhcmUgY3VycmVudGx5IGJlaW5nIGFzeW5jaHJvbm91c2x5IHZhbGlkYXRlZC5cclxuICAgKi9cclxuICByZWFkb25seSBpc1ZhbGlkYXRpb25QZW5kaW5nOiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBUaGlzIHByb3BlcnR5IGluZGljYXRlcyB3aGV0aGVyIHRoZSBmb3JtIGdyb3VwIGlzIGVuYWJsZWQuIEl0IGlzXHJcbiAgICogYHRydWVgIGlmIGFuZCBvbmx5IGlmIGF0IGxlYXN0IG9uZSBvZiBpdHMgY2hpbGQgc3RhdGVzIGlzXHJcbiAgICogZW5hYmxlZC4gV2hlbiBpdCBpcyBgZmFsc2VgIHRoZSBgZXJyb3JzYCBhcmUgYWx3YXlzIGB7fWAgKGkuZS5cclxuICAgKiB0aGUgZm9ybSBncm91cCBpcyBhbHdheXMgdmFsaWQgaWYgZGlzYWJsZWQpIGFuZCBgcGVuZGluZ1ZhbGlkYXRpb25zYFxyXG4gICAqIGlzIGFsd2F5cyBgW11gIChpLmUuIGFsbCBwZW5kaW5nIHZhbGlkYXRpb25zIGFyZSBjYW5jZWxsZWQpLlxyXG4gICAqL1xyXG4gIHJlYWRvbmx5IGlzRW5hYmxlZDogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBwcm9wZXJ0eSBpbmRpY2F0ZXMgd2hldGhlciB0aGUgZm9ybSBncm91cCBpcyBkaXNhYmxlZC4gSXQgaXNcclxuICAgKiBgdHJ1ZWAgaWYgYW5kIG9ubHkgaWYgYWxsIG9mIGl0cyBjaGlsZCBzdGF0ZSBhcmUgZGlzYWJsZWQuIFdoZW5cclxuICAgKiBpdCBpcyBgdHJ1ZWAgdGhlIGBlcnJvcnNgIGFyZSBhbHdheXMgYHt9YCAoaS5lLiB0aGUgZm9ybSBncm91cFxyXG4gICAqIGlzIGFsd2F5cyB2YWxpZCBpZiBkaXNhYmxlZCkgYW5kIGBwZW5kaW5nVmFsaWRhdGlvbnNgIGlzIGFsd2F5c1xyXG4gICAqIGBbXWAgKGkuZS4gYWxsIHBlbmRpbmcgdmFsaWRhdGlvbnMgYXJlIGNhbmNlbGxlZCkuXHJcbiAgICovXHJcbiAgcmVhZG9ubHkgaXNEaXNhYmxlZDogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBwcm9wZXJ0eSBpcyBgdHJ1ZWAgaWYgYW5kIG9ubHkgaWYgYXQgbGVhc3Qgb25lIG9mIHRoZSBmb3JtXHJcbiAgICogZ3JvdXAncyBjaGlsZCBzdGF0ZXMgaXMgbWFya2VkIGFzIGRpcnR5LlxyXG4gICAqL1xyXG4gIHJlYWRvbmx5IGlzRGlydHk6IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgcHJvcGVydHkgaXMgYHRydWVgIGlmIGFuZCBvbmx5IGlmIGFsbCBvZiB0aGUgZm9ybSBncm91cCdzXHJcbiAgICogY2hpbGQgc3RhdGVzIGFyZSBwcmlzdGluZS5cclxuICAgKi9cclxuICByZWFkb25seSBpc1ByaXN0aW5lOiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBUaGlzIHByb3BlcnR5IGlzIGB0cnVlYCBpZiBhbmQgb25seSBpZiBhdCBsZWFzdCBvbmUgb2YgdGhlIGZvcm1cclxuICAgKiBncm91cCdzIGNoaWxkIHN0YXRlcyBpcyBtYXJrZWQgYXMgdG91Y2hlZC5cclxuICAgKi9cclxuICByZWFkb25seSBpc1RvdWNoZWQ6IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgcHJvcGVydHkgaXMgYHRydWVgIGlmIGFuZCBvbmx5IGlmIGFsbCBvZiB0aGUgZm9ybSBncm91cCdzXHJcbiAgICogY2hpbGQgc3RhdGVzIGFyZSB1bnRvdWNoZWQuXHJcbiAgICovXHJcbiAgcmVhZG9ubHkgaXNVbnRvdWNoZWQ6IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgcHJvcGVydHkgaXMgc2V0IHRvIGB0cnVlYCBhcyBzb29uIGFzIHRoZSBmb3JtIGdyb3VwIGlzXHJcbiAgICogc3VibWl0dGVkLiBUaGlzIGlzIHRyYWNrZWQgYnkgdGhlIGBOZ3J4Rm9ybURpcmVjdGl2ZWAsIHdoaWNoXHJcbiAgICogbmVlZHMgdG8gYmUgYXBwbGllZCB0byBhIGZvcm0gbGlrZSB0aGlzOlxyXG4gICAqXHJcbmBgYGh0bWxcclxuPGZvcm0gW25ncnhGb3JtU3RhdGVdPVwiZ3JvdXBTdGF0ZVwiPlxyXG48L2Zvcm0+XHJcbmBgYFxyXG4gICAqXHJcbiAgICogTm90ZSB0aGF0IGFwcGx5aW5nIHRoaXMgZGlyZWN0aXZlIHRvIGEgZm9ybSBwcmV2ZW50cyBub3JtYWwgZm9ybVxyXG4gICAqIHN1Ym1pc3Npb24gc2luY2UgdGhhdCBkb2VzIG5vdCBtYWtlIG11Y2ggc2Vuc2UgZm9yIG5ncnggZm9ybXMuXHJcbiAgICovXHJcbiAgcmVhZG9ubHkgaXNTdWJtaXR0ZWQ6IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgcHJvcGVydHkgaXMgYHRydWVgIGFzIGxvbmcgYXMgdGhlIHN0YXRlIGlzIG5vdCBzdWJtaXR0ZWQuXHJcbiAgICovXHJcbiAgcmVhZG9ubHkgaXNVbnN1Ym1pdHRlZDogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBwcm9wZXJ0eSBjb250YWlucyBhbGwgY2hpbGQgc3RhdGVzIG9mIHRoZSBmb3JtIGdyb3VwLiBBc1xyXG4gICAqIHlvdSBtYXkgaGF2ZSBub3RpY2VkIHRoZSB0eXBlIG9mIGVhY2ggY2hpbGQgc3RhdGUgaXNcclxuICAgKiBgQWJzdHJhY3RDb250cm9sU3RhdGVgIHdoaWNoIHNvbWV0aW1lcyBmb3JjZXMgeW91IHRvIGNhc3QgdGhlXHJcbiAgICogc3RhdGUgZXhwbGljaXRseS4gSXQgaXMgbm90IHBvc3NpYmxlIHRvIGltcHJvdmUgdGhpcyB0eXBpbmdcclxuICAgKiB1bnRpbCBbY29uZGl0aW9uYWwgbWFwcGVkIHR5cGVzXShodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzEyNDI0KVxyXG4gICAqIGFyZSBhZGRlZCB0byBUeXBlU2NyaXB0LlxyXG4gICAqL1xyXG4gIHJlYWRvbmx5IGNvbnRyb2xzOiBGb3JtR3JvdXBDb250cm9sczxUVmFsdWU+O1xyXG59XHJcblxyXG4vKipcclxuICogRm9ybSBhcnJheXMgYXJlIGNvbGxlY3Rpb25zIG9mIGNvbnRyb2xzLiBUaGV5IGFyZSByZXByZXNlbnRlZCBhc1xyXG4gKiBwbGFpbiBzdGF0ZSBhcnJheXMuIFRoZSBzdGF0ZSBvZiBhbiBhcnJheSBpcyBkZXRlcm1pbmVkIGFsbW9zdFxyXG4gKiBmdWxseSBieSBpdHMgY2hpbGQgc3RhdGVzLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBGb3JtQXJyYXlTdGF0ZTxUVmFsdWU+IGV4dGVuZHMgQWJzdHJhY3RDb250cm9sU3RhdGU8cmVhZG9ubHkgVFZhbHVlW10+IHtcclxuICAvKipcclxuICAgKiBUaGUgYWdncmVnYXRlZCB2YWx1ZSBvZiB0aGUgZm9ybSBhcnJheS4gVGhlIHZhbHVlIGlzIGNvbXB1dGVkIGJ5XHJcbiAgICogYWdncmVnYXRpbmcgdGhlIHZhbHVlcyBvZiBhbGwgY2hpbGRyZW4gaW50byBhbiBhcnJheS5cclxuICAgKi9cclxuICByZWFkb25seSB2YWx1ZTogVFZhbHVlW107XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgcHJvcGVydHkgaXMgYHRydWVgIGlmIHRoZSBmb3JtIGFycmF5IGRvZXMgbm90IGhhdmUgYW55IGVycm9yc1xyXG4gICAqIGl0c2VsZiBhbmQgbm9uZSBvZiBpdHMgY2hpbGRyZW4gaGF2ZSBhbnkgZXJyb3JzLlxyXG4gICAqL1xyXG4gIHJlYWRvbmx5IGlzVmFsaWQ6IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgcHJvcGVydHkgaXMgYHRydWVgIGlmIHRoZSBmb3JtIGFycmF5IG9yIGFueSBvZiBpdHMgY2hpbGRyZW5cclxuICAgKiBoYXZlIGF0IGxlYXN0IG9uZSBlcnJvci5cclxuICAgKi9cclxuICByZWFkb25seSBpc0ludmFsaWQ6IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBlcnJvcnMgb2YgdGhlIGZvcm0gYXJyYXkuIFRoaXMgcHJvcGVydHkgaXMgY29tcHV0ZWQgYnkgbWVyZ2luZ1xyXG4gICAqIHRoZSBlcnJvcnMgb2YgdGhlIGFycmF5IHdpdGggdGhlIGVycm9ycyBvZiBhbGwgaXRzIGNoaWxkcmVuIHdoZXJlXHJcbiAgICogdGhlIGNoaWxkIGVycm9ycyBhcmUgYSBwcm9wZXJ0eSBvZiB0aGUgYGVycm9yc2Agb2JqZWN0IHByZWZpeGVkIHdpdGhcclxuICAgKiBhbiB1bmRlcnNjb3JlLCBlLmcuXHJcbiAgICpcclxuYGBgXHJcbntcclxuICBhcnJheUVycm9yOiB0cnVlLFxyXG4gIF8wOiB7XHJcbiAgICBjaGlsZEVycm9yOiB0cnVlLFxyXG4gIH0sXHJcbn1cclxuYGBgXHJcbiAgICpcclxuICAgKiBJZiBuZWl0aGVyIHRoZSBhcnJheSBub3IgYW55IGNoaWxkcmVuIGhhdmUgZXJyb3JzIHRoZSBwcm9wZXJ0eSBpc1xyXG4gICAqIHNldCB0byBge31gLlxyXG4gICAqL1xyXG4gIHJlYWRvbmx5IGVycm9yczogVmFsaWRhdGlvbkVycm9ycztcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIG5hbWVzIG9mIGFsbCBhc3luY2hyb25vdXMgdmFsaWRhdGlvbnMgY3VycmVudGx5IHJ1bm5pbmcgZm9yIHRoZVxyXG4gICAqIGZvcm0gYXJyYXkuXHJcbiAgICovXHJcbiAgcmVhZG9ubHkgcGVuZGluZ1ZhbGlkYXRpb25zOiByZWFkb25seSBzdHJpbmdbXTtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBwcm9wZXJ0eSBpbmRpY2F0ZXMgd2hldGhlciB0aGUgYXJyYXkgb3IgYW55IG9mIGl0cyBjaGlsZHJlblxyXG4gICAqIGFyZSBjdXJyZW50bHkgYmVpbmcgYXN5bmNocm9ub3VzbHkgdmFsaWRhdGVkLlxyXG4gICAqL1xyXG4gIHJlYWRvbmx5IGlzVmFsaWRhdGlvblBlbmRpbmc6IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgcHJvcGVydHkgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIGZvcm0gYXJyYXkgaXMgZW5hYmxlZC4gSXQgaXNcclxuICAgKiBgdHJ1ZWAgaWYgYW5kIG9ubHkgaWYgYXQgbGVhc3Qgb25lIG9mIGl0cyBjaGlsZCBzdGF0ZXMgaXNcclxuICAgKiBlbmFibGVkLiBXaGVuIGl0IGlzIGBmYWxzZWAgdGhlIGBlcnJvcnNgIGFyZSBhbHdheXMgYHt9YCAoaS5lLlxyXG4gICAqIHRoZSBmb3JtIGFycmF5IGlzIGFsd2F5cyB2YWxpZCBpZiBkaXNhYmxlZCkgYW5kIGBwZW5kaW5nVmFsaWRhdGlvbnNgXHJcbiAgICogaXMgYWx3YXlzIGBbXWAgKGkuZS4gYWxsIHBlbmRpbmcgdmFsaWRhdGlvbnMgYXJlIGNhbmNlbGxlZCkuXHJcbiAgICovXHJcbiAgcmVhZG9ubHkgaXNFbmFibGVkOiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBUaGlzIHByb3BlcnR5IGluZGljYXRlcyB3aGV0aGVyIHRoZSBmb3JtIGFycmF5IGlzIGRpc2FibGVkLiBJdCBpc1xyXG4gICAqIGB0cnVlYCBpZiBhbmQgb25seSBpZiBhbGwgb2YgaXRzIGNoaWxkIHN0YXRlcyBhcmUgZGlzYWJsZWQuIFdoZW5cclxuICAgKiBpdCBpcyBgdHJ1ZWAgdGhlIGBlcnJvcnNgIGFyZSBhbHdheXMgYHt9YCAoaS5lLiB0aGUgZm9ybSBhcnJheVxyXG4gICAqIGlzIGFsd2F5cyB2YWxpZCBpZiBkaXNhYmxlZCkgYW5kIGBwZW5kaW5nVmFsaWRhdGlvbnNgIGlzIGFsd2F5c1xyXG4gICAqIGBbXWAgKGkuZS4gYWxsIHBlbmRpbmcgdmFsaWRhdGlvbnMgYXJlIGNhbmNlbGxlZCkuXHJcbiAgICovXHJcbiAgcmVhZG9ubHkgaXNEaXNhYmxlZDogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBwcm9wZXJ0eSBpcyBgdHJ1ZWAgaWYgYW5kIG9ubHkgaWYgYXQgbGVhc3Qgb25lIG9mIHRoZSBmb3JtXHJcbiAgICogYXJyYXkncyBjaGlsZCBzdGF0ZXMgaXMgbWFya2VkIGFzIGRpcnR5LlxyXG4gICAqL1xyXG4gIHJlYWRvbmx5IGlzRGlydHk6IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgcHJvcGVydHkgaXMgYHRydWVgIGlmIGFuZCBvbmx5IGlmIGFsbCBvZiB0aGUgZm9ybSBhcnJheSdzXHJcbiAgICogY2hpbGQgc3RhdGVzIGFyZSBwcmlzdGluZS5cclxuICAgKi9cclxuICByZWFkb25seSBpc1ByaXN0aW5lOiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBUaGlzIHByb3BlcnR5IGlzIGB0cnVlYCBpZiBhbmQgb25seSBpZiBhdCBsZWFzdCBvbmUgb2YgdGhlIGZvcm1cclxuICAgKiBhcnJheSdzIGNoaWxkIHN0YXRlcyBpcyBtYXJrZWQgYXMgdG91Y2hlZC5cclxuICAgKi9cclxuICByZWFkb25seSBpc1RvdWNoZWQ6IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgcHJvcGVydHkgaXMgYHRydWVgIGlmIGFuZCBvbmx5IGlmIGFsbCBvZiB0aGUgZm9ybSBhcnJheSdzXHJcbiAgICogY2hpbGQgc3RhdGVzIGFyZSB1bnRvdWNoZWQuXHJcbiAgICovXHJcbiAgcmVhZG9ubHkgaXNVbnRvdWNoZWQ6IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgcHJvcGVydHkgaXMgc2V0IHRvIGB0cnVlYCBhcyBzb29uIGFzIHRoZSBmb3JtIGFycmF5IGlzXHJcbiAgICogc3VibWl0dGVkLiBUaGlzIGlzIHRyYWNrZWQgYnkgdGhlIGBOZ3J4Rm9ybURpcmVjdGl2ZWAsIHdoaWNoXHJcbiAgICogbmVlZHMgdG8gYmUgYXBwbGllZCB0byBhIGZvcm0gbGlrZSB0aGlzOlxyXG4gICAqXHJcbmBgYGh0bWxcclxuPGZvcm0gW25ncnhGb3JtU3RhdGVdPVwiYXJyYXlTdGF0ZVwiPlxyXG48L2Zvcm0+XHJcbmBgYFxyXG4gICAqXHJcbiAgICogTm90ZSB0aGF0IGFwcGx5aW5nIHRoaXMgZGlyZWN0aXZlIHRvIGEgZm9ybSBwcmV2ZW50cyBub3JtYWwgZm9ybVxyXG4gICAqIHN1Ym1pc3Npb24gc2luY2UgdGhhdCBkb2VzIG5vdCBtYWtlIG11Y2ggc2Vuc2UgZm9yIG5ncnggZm9ybXMuXHJcbiAgICovXHJcbiAgcmVhZG9ubHkgaXNTdWJtaXR0ZWQ6IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgcHJvcGVydHkgaXMgYHRydWVgIGFzIGxvbmcgYXMgdGhlIHN0YXRlIGlzIG5vdCBzdWJtaXR0ZWQuXHJcbiAgICovXHJcbiAgcmVhZG9ubHkgaXNVbnN1Ym1pdHRlZDogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhpcyBwcm9wZXJ0eSBjb250YWlucyBhbGwgY2hpbGQgc3RhdGVzIG9mIHRoZSBmb3JtIGFycmF5LiBBc1xyXG4gICAqIHlvdSBtYXkgaGF2ZSBub3RpY2VkIHRoZSB0eXBlIG9mIGVhY2ggY2hpbGQgc3RhdGUgaXNcclxuICAgKiBgQWJzdHJhY3RDb250cm9sU3RhdGVgIHdoaWNoIHNvbWV0aW1lcyBmb3JjZXMgeW91IHRvIGNhc3QgdGhlXHJcbiAgICogc3RhdGUgZXhwbGljaXRseS4gSXQgaXMgbm90IHBvc3NpYmxlIHRvIGltcHJvdmUgdGhpcyB0eXBpbmdcclxuICAgKiB1bnRpbCBbY29uZGl0aW9uYWwgbWFwcGVkIHR5cGVzXShodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzEyNDI0KVxyXG4gICAqIGFyZSBhZGRlZCB0byBUeXBlU2NyaXB0LlxyXG4gICAqL1xyXG4gIHJlYWRvbmx5IGNvbnRyb2xzOiByZWFkb25seSBGb3JtU3RhdGU8VFZhbHVlPltdO1xyXG59XHJcblxyXG4vKipcclxuICogVGhpcyBpcyBhIGhlbHBlciB0eXBlIHRoYXQgYWxsb3dzIHdvcmtpbmcgYXJvdW5kIHRoZSBkaXN0cmlidXRpdmVuZXNzXHJcbiAqIG9mIGNvbmRpdGlvbmFsIHR5cGVzLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJbmZlcmVuY2VXcmFwcGVyPFQ+IHtcclxuICB0OiBUO1xyXG59XHJcblxyXG4vKipcclxuICogVGhpcyBpcyBhIGhlbHBlciB0eXBlIHRoYXQgaW5mZXJzIHRoZSBjb3JyZWN0IGZvcm0gc3RhdGUgdHlwZSBiYXNlZFxyXG4gKiBvbiB0aGUgYm94ZWQgdHlwZSBjb250YWluZWQgaW4gdGhlIGluZmVyZW5jZSB3cmFwcGVyLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgSW5mZXJyZWRCb3hlZEZvcm1TdGF0ZTxUIGV4dGVuZHMgSW5mZXJlbmNlV3JhcHBlcjxhbnk+PiA9XHJcbiAgVCBleHRlbmRzIEluZmVyZW5jZVdyYXBwZXI8Qm94ZWQ8aW5mZXIgVT4+ID8gRm9ybUNvbnRyb2xTdGF0ZTxCb3hlZDxVPj5cclxuICA6IFQgZXh0ZW5kcyBJbmZlcmVuY2VXcmFwcGVyPEJveGVkPGluZmVyIFU+IHwgdW5kZWZpbmVkPiA/IEZvcm1Db250cm9sU3RhdGU8Qm94ZWQ8VT4gfCB1bmRlZmluZWQ+XHJcbiAgOiBUIGV4dGVuZHMgSW5mZXJlbmNlV3JhcHBlcjxCb3hlZDxpbmZlciBVPiB8IG51bGw+ID8gRm9ybUNvbnRyb2xTdGF0ZTxCb3hlZDxVPiB8IG51bGw+XHJcbiAgOiBUIGV4dGVuZHMgSW5mZXJlbmNlV3JhcHBlcjxCb3hlZDxpbmZlciBVPiB8IHVuZGVmaW5lZCB8IG51bGw+ID8gRm9ybUNvbnRyb2xTdGF0ZTxCb3hlZDxVPiB8IHVuZGVmaW5lZCB8IG51bGw+XHJcbiAgOiBuZXZlclxyXG4gIDtcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGlzIGEgaGVscGVyIHR5cGUgdGhhdCBpbmZlcnMgdGhlIGNvcnJlY3QgZm9ybSBzdGF0ZSB0eXBlIGJhc2VkXHJcbiAqIG9uIHRoZSBzdHJpbmcgdHlwZSBjb250YWluZWQgaW4gdGhlIGluZmVyZW5jZSB3cmFwcGVyLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgSW5mZXJyZWRTdHJpbmdGb3JtU3RhdGU8VCBleHRlbmRzIEluZmVyZW5jZVdyYXBwZXI8YW55Pj4gPVxyXG4gIFQgZXh0ZW5kcyBJbmZlcmVuY2VXcmFwcGVyPHN0cmluZz4gPyBGb3JtQ29udHJvbFN0YXRlPHN0cmluZz5cclxuICA6IFQgZXh0ZW5kcyBJbmZlcmVuY2VXcmFwcGVyPHN0cmluZyB8IHVuZGVmaW5lZD4gPyBGb3JtQ29udHJvbFN0YXRlPHN0cmluZyB8IHVuZGVmaW5lZD5cclxuICA6IFQgZXh0ZW5kcyBJbmZlcmVuY2VXcmFwcGVyPHN0cmluZyB8IG51bGw+ID8gRm9ybUNvbnRyb2xTdGF0ZTxzdHJpbmcgfCBudWxsPlxyXG4gIDogVCBleHRlbmRzIEluZmVyZW5jZVdyYXBwZXI8c3RyaW5nIHwgdW5kZWZpbmVkIHwgbnVsbD4gPyBGb3JtQ29udHJvbFN0YXRlPHN0cmluZyB8IHVuZGVmaW5lZCB8IG51bGw+XHJcbiAgOiBuZXZlclxyXG4gIDtcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGlzIGEgaGVscGVyIHR5cGUgdGhhdCBpbmZlcnMgdGhlIGNvcnJlY3QgZm9ybSBzdGF0ZSB0eXBlIGJhc2VkXHJcbiAqIG9uIHRoZSBudW1iZXIgdHlwZSBjb250YWluZWQgaW4gdGhlIGluZmVyZW5jZSB3cmFwcGVyLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgSW5mZXJyZWROdW1iZXJGb3JtU3RhdGU8VCBleHRlbmRzIEluZmVyZW5jZVdyYXBwZXI8YW55Pj4gPVxyXG4gIFQgZXh0ZW5kcyBJbmZlcmVuY2VXcmFwcGVyPG51bWJlcj4gPyBGb3JtQ29udHJvbFN0YXRlPG51bWJlcj5cclxuICA6IFQgZXh0ZW5kcyBJbmZlcmVuY2VXcmFwcGVyPG51bWJlciB8IHVuZGVmaW5lZD4gPyBGb3JtQ29udHJvbFN0YXRlPG51bWJlciB8IHVuZGVmaW5lZD5cclxuICA6IFQgZXh0ZW5kcyBJbmZlcmVuY2VXcmFwcGVyPG51bWJlciB8IG51bGw+ID8gRm9ybUNvbnRyb2xTdGF0ZTxudW1iZXIgfCBudWxsPlxyXG4gIDogVCBleHRlbmRzIEluZmVyZW5jZVdyYXBwZXI8bnVtYmVyIHwgdW5kZWZpbmVkIHwgbnVsbD4gPyBGb3JtQ29udHJvbFN0YXRlPG51bWJlciB8IHVuZGVmaW5lZCB8IG51bGw+XHJcbiAgOiBuZXZlclxyXG4gIDtcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGlzIGEgaGVscGVyIHR5cGUgdGhhdCBpbmZlcnMgdGhlIGNvcnJlY3QgZm9ybSBzdGF0ZSB0eXBlIGJhc2VkXHJcbiAqIG9uIHRoZSBib29sZWFuIHR5cGUgY29udGFpbmVkIGluIHRoZSBpbmZlcmVuY2Ugd3JhcHBlci5cclxuICovXHJcbmV4cG9ydCB0eXBlIEluZmVycmVkQm9vbGVhbkZvcm1TdGF0ZTxUIGV4dGVuZHMgSW5mZXJlbmNlV3JhcHBlcjxhbnk+PiA9XHJcbiAgVCBleHRlbmRzIEluZmVyZW5jZVdyYXBwZXI8Ym9vbGVhbj4gPyBGb3JtQ29udHJvbFN0YXRlPGJvb2xlYW4+XHJcbiAgOiBUIGV4dGVuZHMgSW5mZXJlbmNlV3JhcHBlcjxib29sZWFuIHwgdW5kZWZpbmVkPiA/IEZvcm1Db250cm9sU3RhdGU8Ym9vbGVhbiB8IHVuZGVmaW5lZD5cclxuICA6IFQgZXh0ZW5kcyBJbmZlcmVuY2VXcmFwcGVyPGJvb2xlYW4gfCBudWxsPiA/IEZvcm1Db250cm9sU3RhdGU8Ym9vbGVhbiB8IG51bGw+XHJcbiAgOiBUIGV4dGVuZHMgSW5mZXJlbmNlV3JhcHBlcjxib29sZWFuIHwgdW5kZWZpbmVkIHwgbnVsbD4gPyBGb3JtQ29udHJvbFN0YXRlPGJvb2xlYW4gfCB1bmRlZmluZWQgfCBudWxsPlxyXG4gIDogbmV2ZXJcclxuICA7XHJcblxyXG4vKipcclxuICogVGhpcyBpcyBhIGhlbHBlciB0eXBlIHRoYXQgaW5mZXJzIHRoZSBjb3JyZWN0IGZvcm0gc3RhdGUgdHlwZSBiYXNlZFxyXG4gKiBvbiB0aGUgdHlwZSBjb250YWluZWQgaW4gdGhlIGluZmVyZW5jZSB3cmFwcGVyLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgSW5mZXJyZWRGb3JtU3RhdGU8VCBleHRlbmRzIEluZmVyZW5jZVdyYXBwZXI8YW55Pj4gPVxyXG4gIC8vIChhYil1c2UgJ3N5bWJvbCcgdG8gY2F0Y2ggJ2FueScgdHlwaW5nXHJcbiAgVCBleHRlbmRzIEluZmVyZW5jZVdyYXBwZXI8c3ltYm9sPiA/IEFic3RyYWN0Q29udHJvbFN0YXRlPGFueT5cclxuICA6IFQgZXh0ZW5kcyBJbmZlcmVuY2VXcmFwcGVyPHVuZGVmaW5lZD4gPyBBYnN0cmFjdENvbnRyb2xTdGF0ZTxhbnk+XHJcbiAgOiBUIGV4dGVuZHMgSW5mZXJlbmNlV3JhcHBlcjxudWxsPiA/IEFic3RyYWN0Q29udHJvbFN0YXRlPGFueT5cclxuXHJcbiAgLy8gY29udHJvbFxyXG4gIDogVCBleHRlbmRzIEluZmVyZW5jZVdyYXBwZXI8Qm94ZWQ8YW55PiB8IHVuZGVmaW5lZCB8IG51bGw+ID8gSW5mZXJyZWRCb3hlZEZvcm1TdGF0ZTxUPlxyXG4gIDogVCBleHRlbmRzIEluZmVyZW5jZVdyYXBwZXI8c3RyaW5nIHwgdW5kZWZpbmVkIHwgbnVsbD4gPyBJbmZlcnJlZFN0cmluZ0Zvcm1TdGF0ZTxUPlxyXG4gIDogVCBleHRlbmRzIEluZmVyZW5jZVdyYXBwZXI8bnVtYmVyIHwgdW5kZWZpbmVkIHwgbnVsbD4gPyBJbmZlcnJlZE51bWJlckZvcm1TdGF0ZTxUPlxyXG4gIDogVCBleHRlbmRzIEluZmVyZW5jZVdyYXBwZXI8Ym9vbGVhbiB8IHVuZGVmaW5lZCB8IG51bGw+ID8gSW5mZXJyZWRCb29sZWFuRm9ybVN0YXRlPFQ+XHJcblxyXG4gIC8vIGFycmF5XHJcbiAgOiBUIGV4dGVuZHMgSW5mZXJlbmNlV3JhcHBlcjxyZWFkb25seSAoaW5mZXIgVSlbXSB8IHVuZGVmaW5lZCB8IG51bGw+ID8gRm9ybUFycmF5U3RhdGU8VT5cclxuXHJcbiAgLy8gZ3JvdXBcclxuICA6IFQgZXh0ZW5kcyBJbmZlcmVuY2VXcmFwcGVyPGluZmVyIFUgfCB1bmRlZmluZWQgfCBudWxsPiA/IEZvcm1Hcm91cFN0YXRlPFU+XHJcblxyXG4gIC8vIGZhbGxiYWNrIHR5cGUgKHRoaXMgY2FzZSBzaG91bGQgbmV2ZXIgKG5vIHB1biBpbnRlbmRlZCkgYmUgaGl0KVxyXG4gIDogbmV2ZXJcclxuICA7XHJcblxyXG4vKipcclxuICogVGhpcyBpcyBhIHR5cGUgdGhhdCBjYW4gaW5mZXIgdGhlIGNvbmNyZXRlIHR5cGUgb2YgYSBmb3JtIHN0YXRlIGJhc2VkXHJcbiAqIG9uIHRoZSBnaXZlbiB0eXBlIHBhcmFtZXRlci5cclxuICovXHJcbmV4cG9ydCB0eXBlIEZvcm1TdGF0ZTxUPiA9IEluZmVycmVkRm9ybVN0YXRlPEluZmVyZW5jZVdyYXBwZXI8VD4+O1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgZnVuY3Rpb24gZGV0ZXJtaW5lcyBpZiBhIHZhbHVlIGlzIGEgZm9ybSBzdGF0ZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0Zvcm1TdGF0ZTxUVmFsdWUgPSBhbnk+KHN0YXRlOiBhbnkpOiBzdGF0ZSBpcyBGb3JtU3RhdGU8VFZhbHVlPiB7XHJcbiAgcmV0dXJuICEhc3RhdGUgJiYgc3RhdGUuaGFzT3duUHJvcGVydHkoJ2lkJykgJiYgc3RhdGUuaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykgJiYgc3RhdGUuaGFzT3duUHJvcGVydHkoJ2Vycm9ycycpO1xyXG59XHJcblxyXG4vKipcclxuICogVGhpcyBmdW5jdGlvbiBkZXRlcm1pbmVzIGlmIGEgdmFsdWUgaXMgYW4gYXJyYXkgc3RhdGUuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNBcnJheVN0YXRlPFRWYWx1ZSA9IGFueT4oc3RhdGU6IGFueSk6IHN0YXRlIGlzIEZvcm1BcnJheVN0YXRlPFRWYWx1ZT4ge1xyXG4gIHJldHVybiBpc0Zvcm1TdGF0ZShzdGF0ZSkgJiYgc3RhdGUuaGFzT3duUHJvcGVydHkoJ2NvbnRyb2xzJykgJiYgQXJyYXkuaXNBcnJheSgoc3RhdGUgYXMgYW55KS5jb250cm9scyk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGlzIGZ1bmN0aW9uIGRldGVybWluZXMgaWYgYSB2YWx1ZSBpcyBhIGdyb3VwIHN0YXRlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzR3JvdXBTdGF0ZTxUVmFsdWUgPSBhbnk+KHN0YXRlOiBhbnkpOiBzdGF0ZSBpcyBGb3JtR3JvdXBTdGF0ZTxUVmFsdWU+IHtcclxuICByZXR1cm4gaXNGb3JtU3RhdGUoc3RhdGUpICYmIHN0YXRlLmhhc093blByb3BlcnR5KCdjb250cm9scycpICYmICFBcnJheS5pc0FycmF5KChzdGF0ZSBhcyBhbnkpLmNvbnRyb2xzKSAmJiB0eXBlb2YgKHN0YXRlIGFzIGFueSkuY29udHJvbHMgIT09ICdmdW5jdGlvbic7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDaGlsZFN0YXRlPFRWYWx1ZT4oaWQ6IHN0cmluZywgY2hpbGRWYWx1ZTogVFZhbHVlKTogRm9ybVN0YXRlPFRWYWx1ZT4ge1xyXG4gIGlmIChpc0JveGVkKGNoaWxkVmFsdWUpKSB7XHJcbiAgICByZXR1cm4gY3JlYXRlRm9ybUNvbnRyb2xTdGF0ZTxhbnk+KGlkLCBjaGlsZFZhbHVlKSBhcyBGb3JtU3RhdGU8VFZhbHVlPjtcclxuICB9XHJcblxyXG4gIGlmIChjaGlsZFZhbHVlICE9PSBudWxsICYmIEFycmF5LmlzQXJyYXkoY2hpbGRWYWx1ZSkpIHtcclxuICAgIHJldHVybiBjcmVhdGVGb3JtQXJyYXlTdGF0ZShpZCwgY2hpbGRWYWx1ZSkgYXMgRm9ybVN0YXRlPFRWYWx1ZT47XHJcbiAgfVxyXG5cclxuICBpZiAoY2hpbGRWYWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgY2hpbGRWYWx1ZSA9PT0gJ29iamVjdCcpIHtcclxuICAgIHJldHVybiBjcmVhdGVGb3JtR3JvdXBTdGF0ZShpZCwgY2hpbGRWYWx1ZSkgYXMgRm9ybVN0YXRlPFRWYWx1ZT47XHJcbiAgfVxyXG5cclxuICByZXR1cm4gY3JlYXRlRm9ybUNvbnRyb2xTdGF0ZTxhbnk+KGlkLCBjaGlsZFZhbHVlKSBhcyBGb3JtU3RhdGU8VFZhbHVlPjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHZlcmlmeUZvcm1Db250cm9sVmFsdWVJc1ZhbGlkPFRWYWx1ZT4odmFsdWU6IFRWYWx1ZSkge1xyXG4gIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCBbJ3N0cmluZycsICdudW1iZXInLCAnYm9vbGVhbicsICd1bmRlZmluZWQnXS5pbmRleE9mKHR5cGVvZiB2YWx1ZSkgPj0gMCkge1xyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG4gIH1cclxuXHJcbiAgaWYgKCFpc0JveGVkKHZhbHVlKSkge1xyXG4gICAgY29uc3QgZXJyb3JNc2cgPSAnRm9ybSBjb250cm9sIHN0YXRlcyBvbmx5IHN1cHBvcnQgdW5kZWZpbmVkLCBudWxsLCBzdHJpbmcsIG51bWJlciwgYW5kIGJvb2xlYW4gdmFsdWVzIGFzIHdlbGwgYXMgYm94ZWQgdmFsdWVzJztcclxuICAgIHRocm93IG5ldyBFcnJvcihgJHtlcnJvck1zZ307IGdvdCAke0pTT04uc3RyaW5naWZ5KHZhbHVlKX0gb2YgdHlwZSAke3R5cGVvZiB2YWx1ZX1gKTsgLy8gYDtcclxuICB9XHJcblxyXG4gIGlmICh2YWx1ZS52YWx1ZSA9PT0gbnVsbCB8fCBbJ3N0cmluZycsICdudW1iZXInLCAnYm9vbGVhbicsICd1bmRlZmluZWQnXS5pbmRleE9mKHR5cGVvZiB2YWx1ZS52YWx1ZSkgPj0gMCkge1xyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG4gIH1cclxuXHJcbiAgY29uc3Qgc2VyaWFsaXplZCA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcclxuICBjb25zdCBkZXNlcmlhbGl6ZWQgPSBKU09OLnBhcnNlKHNlcmlhbGl6ZWQpO1xyXG5cclxuICBpZiAoZGVlcEVxdWFscyh2YWx1ZSwgZGVzZXJpYWxpemVkKSkge1xyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG4gIH1cclxuXHJcbiAgdGhyb3cgbmV3IEVycm9yKGBBIGZvcm0gY29udHJvbCB2YWx1ZSBtdXN0IGJlIHNlcmlhbGl6YWJsZSAoaS5lLiB2YWx1ZSA9PT0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh2YWx1ZSkpKSwgZ290OiAke0pTT04uc3RyaW5naWZ5KHZhbHVlKX1gKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRoaXMgZnVuY3Rpb24gY3JlYXRlcyBhIGZvcm0gY29udHJvbCBzdGF0ZSB3aXRoIGFuIElEIGFuZCBhIHZhbHVlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUZvcm1Db250cm9sU3RhdGU8VFZhbHVlIGV4dGVuZHMgRm9ybUNvbnRyb2xWYWx1ZVR5cGVzPihcclxuICBpZDogTmdyeEZvcm1Db250cm9sSWQsXHJcbiAgdmFsdWU6IFRWYWx1ZSxcclxuKTogRm9ybUNvbnRyb2xTdGF0ZTxUVmFsdWU+IHtcclxuICByZXR1cm4ge1xyXG4gICAgaWQsXHJcbiAgICB2YWx1ZTogdmVyaWZ5Rm9ybUNvbnRyb2xWYWx1ZUlzVmFsaWQodmFsdWUpLFxyXG4gICAgZXJyb3JzOiB7fSxcclxuICAgIHBlbmRpbmdWYWxpZGF0aW9uczogW10sXHJcbiAgICBpc1ZhbGlkYXRpb25QZW5kaW5nOiBmYWxzZSxcclxuICAgIGlzVmFsaWQ6IHRydWUsXHJcbiAgICBpc0ludmFsaWQ6IGZhbHNlLFxyXG4gICAgaXNFbmFibGVkOiB0cnVlLFxyXG4gICAgaXNEaXNhYmxlZDogZmFsc2UsXHJcbiAgICBpc0RpcnR5OiBmYWxzZSxcclxuICAgIGlzUHJpc3RpbmU6IHRydWUsXHJcbiAgICBpc1RvdWNoZWQ6IGZhbHNlLFxyXG4gICAgaXNVbnRvdWNoZWQ6IHRydWUsXHJcbiAgICBpc1N1Ym1pdHRlZDogZmFsc2UsXHJcbiAgICBpc1Vuc3VibWl0dGVkOiB0cnVlLFxyXG4gICAgaXNGb2N1c2VkOiBmYWxzZSxcclxuICAgIGlzVW5mb2N1c2VkOiB0cnVlLFxyXG4gICAgdXNlckRlZmluZWRQcm9wZXJ0aWVzOiB7fSxcclxuICB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Rm9ybUdyb3VwVmFsdWU8VFZhbHVlIGV4dGVuZHMgS2V5VmFsdWU+KFxyXG4gIGNvbnRyb2xzOiBGb3JtR3JvdXBDb250cm9sczxUVmFsdWU+LFxyXG4gIG9yaWdpbmFsVmFsdWU6IFRWYWx1ZSxcclxuKTogVFZhbHVlIHtcclxuICBsZXQgaGFzQ2hhbmdlZCA9IE9iamVjdC5rZXlzKG9yaWdpbmFsVmFsdWUpLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMoY29udHJvbHMpLmxlbmd0aDtcclxuICBjb25zdCBuZXdWYWx1ZSA9IE9iamVjdC5rZXlzKGNvbnRyb2xzKS5yZWR1Y2UoKHJlcywga2V5OiBrZXlvZiBUVmFsdWUpID0+IHtcclxuICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IG9yaWdpbmFsVmFsdWVba2V5XSAhPT0gY29udHJvbHNba2V5XS52YWx1ZTtcclxuICAgIHJlc1trZXldID0gY29udHJvbHNba2V5XS52YWx1ZTtcclxuICAgIHJldHVybiByZXM7XHJcbiAgfSwge30gYXMgVFZhbHVlKTtcclxuXHJcbiAgcmV0dXJuIGhhc0NoYW5nZWQgPyBuZXdWYWx1ZSA6IG9yaWdpbmFsVmFsdWU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRGb3JtR3JvdXBFcnJvcnM8VFZhbHVlIGV4dGVuZHMgS2V5VmFsdWU+KFxyXG4gIGNvbnRyb2xzOiBGb3JtR3JvdXBDb250cm9sczxUVmFsdWU+LFxyXG4gIG9yaWdpbmFsRXJyb3JzOiBWYWxpZGF0aW9uRXJyb3JzLFxyXG4pOiBWYWxpZGF0aW9uRXJyb3JzIHtcclxuICBsZXQgaGFzQ2hhbmdlZCA9IGZhbHNlO1xyXG4gIGNvbnN0IGdyb3VwRXJyb3JzID1cclxuICAgIE9iamVjdC5rZXlzKG9yaWdpbmFsRXJyb3JzKVxyXG4gICAgICAuZmlsdGVyKGtleSA9PiAha2V5LnN0YXJ0c1dpdGgoJ18nKSlcclxuICAgICAgLnJlZHVjZSgocmVzLCBrZXkpID0+IE9iamVjdC5hc3NpZ24ocmVzLCB7IFtrZXldOiBvcmlnaW5hbEVycm9yc1trZXldIH0pLCB7fSBhcyBWYWxpZGF0aW9uRXJyb3JzKTtcclxuXHJcbiAgY29uc3QgbmV3RXJyb3JzID0gT2JqZWN0LmtleXMoY29udHJvbHMpLnJlZHVjZSgocmVzLCBrZXk6IGFueSkgPT4ge1xyXG4gICAgY29uc3QgY29udHJvbEVycm9ycyA9IGNvbnRyb2xzW2tleV0uZXJyb3JzO1xyXG4gICAgaWYgKCFpc0VtcHR5KGNvbnRyb2xFcnJvcnMpKSB7XHJcbiAgICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IG9yaWdpbmFsRXJyb3JzW2BfJHtrZXl9YF0gIT09IGNvbnRyb2xFcnJvcnM7XHJcbiAgICAgIE9iamVjdC5hc3NpZ24ocmVzLCB7IFtgXyR7a2V5fWBdOiBjb250cm9sc1trZXldLmVycm9ycyB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IG9yaWdpbmFsRXJyb3JzLmhhc093blByb3BlcnR5KGBfJHtrZXl9YCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9LCBncm91cEVycm9ycyk7XHJcblxyXG4gIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IE9iamVjdC5rZXlzKG9yaWdpbmFsRXJyb3JzKS5sZW5ndGggIT09IE9iamVjdC5rZXlzKG5ld0Vycm9ycykubGVuZ3RoO1xyXG5cclxuICByZXR1cm4gaGFzQ2hhbmdlZCA/IG5ld0Vycm9ycyA6IG9yaWdpbmFsRXJyb3JzO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZUdyb3VwU3RhdGU8VFZhbHVlIGV4dGVuZHMgS2V5VmFsdWU+KFxyXG4gIGlkOiBzdHJpbmcsXHJcbiAgY29udHJvbHM6IEZvcm1Hcm91cENvbnRyb2xzPFRWYWx1ZT4sXHJcbiAgdmFsdWU6IFRWYWx1ZSxcclxuICBlcnJvcnM6IFZhbGlkYXRpb25FcnJvcnMsXHJcbiAgcGVuZGluZ1ZhbGlkYXRpb25zOiByZWFkb25seSBzdHJpbmdbXSxcclxuICB1c2VyRGVmaW5lZFByb3BlcnRpZXM6IEtleVZhbHVlLFxyXG4gIGZsYWdzOiB7XHJcbiAgICB3YXNPclNob3VsZEJlRGlydHk/OiBib29sZWFuO1xyXG4gICAgd2FzT3JTaG91bGRCZUVuYWJsZWQ/OiBib29sZWFuO1xyXG4gICAgd2FzT3JTaG91bGRCZVRvdWNoZWQ/OiBib29sZWFuO1xyXG4gICAgd2FzT3JTaG91bGRCZVN1Ym1pdHRlZD86IGJvb2xlYW47XHJcbiAgfSxcclxuKTogRm9ybUdyb3VwU3RhdGU8VFZhbHVlPiB7XHJcbiAgdmFsdWUgPSBnZXRGb3JtR3JvdXBWYWx1ZTxUVmFsdWU+KGNvbnRyb2xzLCB2YWx1ZSk7XHJcbiAgZXJyb3JzID0gZ2V0Rm9ybUdyb3VwRXJyb3JzKGNvbnRyb2xzLCBlcnJvcnMpO1xyXG4gIGNvbnN0IGlzVmFsaWQgPSBpc0VtcHR5KGVycm9ycyk7XHJcbiAgY29uc3QgaXNEaXJ0eSA9IGZsYWdzLndhc09yU2hvdWxkQmVEaXJ0eSB8fCBPYmplY3Qua2V5cyhjb250cm9scykuc29tZShrZXkgPT4gY29udHJvbHNba2V5XS5pc0RpcnR5KTtcclxuICBjb25zdCBpc0VuYWJsZWQgPSBmbGFncy53YXNPclNob3VsZEJlRW5hYmxlZCB8fCBPYmplY3Qua2V5cyhjb250cm9scykuc29tZShrZXkgPT4gY29udHJvbHNba2V5XS5pc0VuYWJsZWQpO1xyXG4gIGNvbnN0IGlzVG91Y2hlZCA9IGZsYWdzLndhc09yU2hvdWxkQmVUb3VjaGVkIHx8IE9iamVjdC5rZXlzKGNvbnRyb2xzKS5zb21lKGtleSA9PiBjb250cm9sc1trZXldLmlzVG91Y2hlZCk7XHJcbiAgY29uc3QgaXNTdWJtaXR0ZWQgPSBmbGFncy53YXNPclNob3VsZEJlU3VibWl0dGVkIHx8IE9iamVjdC5rZXlzKGNvbnRyb2xzKS5zb21lKGtleSA9PiBjb250cm9sc1trZXldLmlzU3VibWl0dGVkKTtcclxuICBjb25zdCBpc1ZhbGlkYXRpb25QZW5kaW5nID0gcGVuZGluZ1ZhbGlkYXRpb25zLmxlbmd0aCA+IDAgfHwgT2JqZWN0LmtleXMoY29udHJvbHMpLnNvbWUoa2V5ID0+IGNvbnRyb2xzW2tleV0uaXNWYWxpZGF0aW9uUGVuZGluZyk7XHJcbiAgcmV0dXJuIHtcclxuICAgIGlkLFxyXG4gICAgdmFsdWUsXHJcbiAgICBlcnJvcnMsXHJcbiAgICBwZW5kaW5nVmFsaWRhdGlvbnMsXHJcbiAgICBpc1ZhbGlkYXRpb25QZW5kaW5nLFxyXG4gICAgaXNWYWxpZCxcclxuICAgIGlzSW52YWxpZDogIWlzVmFsaWQsXHJcbiAgICBpc0VuYWJsZWQsXHJcbiAgICBpc0Rpc2FibGVkOiAhaXNFbmFibGVkLFxyXG4gICAgaXNEaXJ0eSxcclxuICAgIGlzUHJpc3RpbmU6ICFpc0RpcnR5LFxyXG4gICAgaXNUb3VjaGVkLFxyXG4gICAgaXNVbnRvdWNoZWQ6ICFpc1RvdWNoZWQsXHJcbiAgICBpc1N1Ym1pdHRlZCxcclxuICAgIGlzVW5zdWJtaXR0ZWQ6ICFpc1N1Ym1pdHRlZCxcclxuICAgIHVzZXJEZWZpbmVkUHJvcGVydGllcyxcclxuICAgIGNvbnRyb2xzLFxyXG4gIH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGlzIGZ1bmN0aW9uIGNyZWF0ZXMgYSBmb3JtIGdyb3VwIHN0YXRlIHdpdGggYW4gSUQgYW5kIGEgdmFsdWUuXHJcbiAqIEZyb20gdGhlIHZhbHVlIHRoZSBzaGFwZSBvZiB0aGUgZ3JvdXAgc3RhdGUgaXMgaW5mZXJyZWQsIGkuZS5cclxuICogb2JqZWN0IHByb3BlcnRpZXMgYXJlIGluZmVycmVkIGFzIGZvcm0gZ3JvdXBzLCBhcnJheSBwcm9wZXJ0aWVzXHJcbiAqIGFyZSBpbmZlcnJlZCBhcyBmb3JtIGFycmF5cywgYW5kIHByaW1pdGl2ZSBwcm9wZXJ0aWVzIGFyZSBpbmZlcnJlZFxyXG4gKiBhcyBmb3JtIGNvbnRyb2xzLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUZvcm1Hcm91cFN0YXRlPFRWYWx1ZSBleHRlbmRzIEtleVZhbHVlPihcclxuICBpZDogTmdyeEZvcm1Db250cm9sSWQsXHJcbiAgaW5pdGlhbFZhbHVlOiBUVmFsdWUsXHJcbik6IEZvcm1Hcm91cFN0YXRlPFRWYWx1ZT4ge1xyXG4gIGNvbnN0IGNvbnRyb2xzID0gT2JqZWN0LmtleXMoaW5pdGlhbFZhbHVlKVxyXG4gICAgLm1hcCgoa2V5OiBrZXlvZiBUVmFsdWUpID0+IFtrZXksIGNyZWF0ZUNoaWxkU3RhdGUoYCR7aWR9LiR7a2V5fWAsIGluaXRpYWxWYWx1ZVtrZXldKV0gYXMgW3N0cmluZywgRm9ybVN0YXRlPGFueT5dKVxyXG4gICAgLnJlZHVjZSgocmVzLCBbY29udHJvbElkLCBzdGF0ZV0pID0+IE9iamVjdC5hc3NpZ24ocmVzLCB7IFtjb250cm9sSWRdOiBzdGF0ZSB9KSwge30gYXMgRm9ybUdyb3VwQ29udHJvbHM8VFZhbHVlPik7XHJcblxyXG4gIHJldHVybiBjb21wdXRlR3JvdXBTdGF0ZShpZCwgY29udHJvbHMsIGluaXRpYWxWYWx1ZSwge30sIFtdLCB7fSwgeyB3YXNPclNob3VsZEJlRW5hYmxlZDogdHJ1ZSB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0Rm9ybUFycmF5VmFsdWU8VFZhbHVlPihcclxuICBjb250cm9sczogcmVhZG9ubHkgQWJzdHJhY3RDb250cm9sU3RhdGU8VFZhbHVlPltdLFxyXG4gIG9yaWdpbmFsVmFsdWU6IFRWYWx1ZVtdLFxyXG4pOiBUVmFsdWVbXSB7XHJcbiAgbGV0IGhhc0NoYW5nZWQgPSBPYmplY3Qua2V5cyhvcmlnaW5hbFZhbHVlKS5sZW5ndGggIT09IE9iamVjdC5rZXlzKGNvbnRyb2xzKS5sZW5ndGg7XHJcbiAgY29uc3QgbmV3VmFsdWUgPSBjb250cm9scy5tYXAoKHN0YXRlLCBpKSA9PiB7XHJcbiAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBvcmlnaW5hbFZhbHVlW2ldICE9PSBzdGF0ZS52YWx1ZTtcclxuICAgIHJldHVybiBzdGF0ZS52YWx1ZTtcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIGhhc0NoYW5nZWQgPyBuZXdWYWx1ZSA6IG9yaWdpbmFsVmFsdWU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEZvcm1BcnJheUVycm9yczxUVmFsdWU+KFxyXG4gIGNvbnRyb2xzOiByZWFkb25seSBBYnN0cmFjdENvbnRyb2xTdGF0ZTxUVmFsdWU+W10sXHJcbiAgb3JpZ2luYWxFcnJvcnM6IFZhbGlkYXRpb25FcnJvcnMsXHJcbik6IFZhbGlkYXRpb25FcnJvcnMge1xyXG4gIGxldCBoYXNDaGFuZ2VkID0gZmFsc2U7XHJcbiAgY29uc3QgZ3JvdXBFcnJvcnMgPVxyXG4gICAgT2JqZWN0LmtleXMob3JpZ2luYWxFcnJvcnMpXHJcbiAgICAgIC5maWx0ZXIoa2V5ID0+ICFrZXkuc3RhcnRzV2l0aCgnXycpKVxyXG4gICAgICAucmVkdWNlKChyZXMsIGtleSkgPT4gT2JqZWN0LmFzc2lnbihyZXMsIHsgW2tleV06IG9yaWdpbmFsRXJyb3JzW2tleV0gfSksIHt9IGFzIFZhbGlkYXRpb25FcnJvcnMpO1xyXG5cclxuICBjb25zdCBuZXdFcnJvcnMgPSBjb250cm9scy5yZWR1Y2UoKHJlcywgc3RhdGUsIGkpID0+IHtcclxuICAgIGNvbnN0IGNvbnRyb2xFcnJvcnMgPSBzdGF0ZS5lcnJvcnM7XHJcbiAgICBpZiAoIWlzRW1wdHkoY29udHJvbEVycm9ycykpIHtcclxuICAgICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgb3JpZ2luYWxFcnJvcnNbYF8ke2l9YF0gIT09IGNvbnRyb2xFcnJvcnM7XHJcbiAgICAgIE9iamVjdC5hc3NpZ24ocmVzLCB7IFtgXyR7aX1gXTogY29udHJvbEVycm9ycyB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IG9yaWdpbmFsRXJyb3JzLmhhc093blByb3BlcnR5KGBfJHtpfWApO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXM7XHJcbiAgfSwgZ3JvdXBFcnJvcnMpO1xyXG5cclxuICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBPYmplY3Qua2V5cyhvcmlnaW5hbEVycm9ycykubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhuZXdFcnJvcnMpLmxlbmd0aDtcclxuXHJcbiAgcmV0dXJuIGhhc0NoYW5nZWQgPyBuZXdFcnJvcnMgOiBvcmlnaW5hbEVycm9ycztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVBcnJheVN0YXRlPFRWYWx1ZT4oXHJcbiAgaWQ6IHN0cmluZyxcclxuICBpbmZlcnJlZENvbnRyb2xzOiByZWFkb25seSBGb3JtU3RhdGU8VFZhbHVlPltdLFxyXG4gIHZhbHVlOiBUVmFsdWVbXSxcclxuICBlcnJvcnM6IFZhbGlkYXRpb25FcnJvcnMsXHJcbiAgcGVuZGluZ1ZhbGlkYXRpb25zOiByZWFkb25seSBzdHJpbmdbXSxcclxuICB1c2VyRGVmaW5lZFByb3BlcnRpZXM6IEtleVZhbHVlLFxyXG4gIGZsYWdzOiB7XHJcbiAgICB3YXNPclNob3VsZEJlRGlydHk/OiBib29sZWFuO1xyXG4gICAgd2FzT3JTaG91bGRCZUVuYWJsZWQ/OiBib29sZWFuO1xyXG4gICAgd2FzT3JTaG91bGRCZVRvdWNoZWQ/OiBib29sZWFuO1xyXG4gICAgd2FzT3JTaG91bGRCZVN1Ym1pdHRlZD86IGJvb2xlYW47XHJcbiAgfSxcclxuKTogRm9ybUFycmF5U3RhdGU8VFZhbHVlPiB7XHJcbiAgY29uc3QgY29udHJvbHMgPSBpbmZlcnJlZENvbnRyb2xzIGFzIHJlYWRvbmx5IEFic3RyYWN0Q29udHJvbFN0YXRlPGFueT5bXTtcclxuXHJcbiAgdmFsdWUgPSBnZXRGb3JtQXJyYXlWYWx1ZTxUVmFsdWU+KGNvbnRyb2xzLCB2YWx1ZSk7XHJcbiAgZXJyb3JzID0gZ2V0Rm9ybUFycmF5RXJyb3JzKGNvbnRyb2xzLCBlcnJvcnMpO1xyXG4gIGNvbnN0IGlzVmFsaWQgPSBpc0VtcHR5KGVycm9ycyk7XHJcbiAgY29uc3QgaXNEaXJ0eSA9IGZsYWdzLndhc09yU2hvdWxkQmVEaXJ0eSB8fCBjb250cm9scy5zb21lKHN0YXRlID0+IHN0YXRlLmlzRGlydHkpO1xyXG4gIGNvbnN0IGlzRW5hYmxlZCA9IGZsYWdzLndhc09yU2hvdWxkQmVFbmFibGVkIHx8IGNvbnRyb2xzLnNvbWUoc3RhdGUgPT4gc3RhdGUuaXNFbmFibGVkKTtcclxuICBjb25zdCBpc1RvdWNoZWQgPSBmbGFncy53YXNPclNob3VsZEJlVG91Y2hlZCB8fCBjb250cm9scy5zb21lKHN0YXRlID0+IHN0YXRlLmlzVG91Y2hlZCk7XHJcbiAgY29uc3QgaXNTdWJtaXR0ZWQgPSBmbGFncy53YXNPclNob3VsZEJlU3VibWl0dGVkIHx8IGNvbnRyb2xzLnNvbWUoc3RhdGUgPT4gc3RhdGUuaXNTdWJtaXR0ZWQpO1xyXG4gIGNvbnN0IGlzVmFsaWRhdGlvblBlbmRpbmcgPSBwZW5kaW5nVmFsaWRhdGlvbnMubGVuZ3RoID4gMCB8fCBjb250cm9scy5zb21lKHN0YXRlID0+IHN0YXRlLmlzVmFsaWRhdGlvblBlbmRpbmcpO1xyXG4gIHJldHVybiB7XHJcbiAgICBpZCxcclxuICAgIHZhbHVlLFxyXG4gICAgZXJyb3JzLFxyXG4gICAgcGVuZGluZ1ZhbGlkYXRpb25zLFxyXG4gICAgaXNWYWxpZGF0aW9uUGVuZGluZyxcclxuICAgIGlzVmFsaWQsXHJcbiAgICBpc0ludmFsaWQ6ICFpc1ZhbGlkLFxyXG4gICAgaXNFbmFibGVkLFxyXG4gICAgaXNEaXNhYmxlZDogIWlzRW5hYmxlZCxcclxuICAgIGlzRGlydHksXHJcbiAgICBpc1ByaXN0aW5lOiAhaXNEaXJ0eSxcclxuICAgIGlzVG91Y2hlZCxcclxuICAgIGlzVW50b3VjaGVkOiAhaXNUb3VjaGVkLFxyXG4gICAgaXNTdWJtaXR0ZWQsXHJcbiAgICBpc1Vuc3VibWl0dGVkOiAhaXNTdWJtaXR0ZWQsXHJcbiAgICB1c2VyRGVmaW5lZFByb3BlcnRpZXMsXHJcbiAgICBjb250cm9sczogaW5mZXJyZWRDb250cm9scyxcclxuICB9O1xyXG59XHJcblxyXG4vKipcclxuICogVGhpcyBmdW5jdGlvbiBjcmVhdGVzIGEgZm9ybSBhcnJheSBzdGF0ZSB3aXRoIGFuIElEIGFuZCBhIHZhbHVlLlxyXG4gKiBGcm9tIHRoZSB2YWx1ZSB0aGUgc2hhcGUgb2YgdGhlIGFycmF5IHN0YXRlIGlzIGluZmVycmVkLCBpLmUuXHJcbiAqIG9iamVjdCB2YWx1ZXMgYXJlIGluZmVycmVkIGFzIGZvcm0gZ3JvdXBzLCBhcnJheSB2YWx1ZXNcclxuICogYXJlIGluZmVycmVkIGFzIGZvcm0gYXJyYXlzLCBhbmQgcHJpbWl0aXZlIHZhbHVlcyBhcmUgaW5mZXJyZWRcclxuICogYXMgZm9ybSBjb250cm9scy5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGb3JtQXJyYXlTdGF0ZTxUVmFsdWU+KFxyXG4gIGlkOiBOZ3J4Rm9ybUNvbnRyb2xJZCxcclxuICBpbml0aWFsVmFsdWU6IFRWYWx1ZVtdLFxyXG4pOiBGb3JtQXJyYXlTdGF0ZTxUVmFsdWU+IHtcclxuICBjb25zdCBjb250cm9scyA9IGluaXRpYWxWYWx1ZVxyXG4gICAgLm1hcCgodmFsdWUsIGkpID0+IGNyZWF0ZUNoaWxkU3RhdGUoYCR7aWR9LiR7aX1gLCB2YWx1ZSkpO1xyXG5cclxuICByZXR1cm4gY29tcHV0ZUFycmF5U3RhdGUoaWQsIGNvbnRyb2xzLCBpbml0aWFsVmFsdWUsIHt9LCBbXSwge30sIHsgd2FzT3JTaG91bGRCZUVuYWJsZWQ6IHRydWUgfSk7XHJcbn1cclxuIl19