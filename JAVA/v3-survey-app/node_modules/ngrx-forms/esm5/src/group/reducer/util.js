import * as tslib_1 from "tslib";
import { formStateReducer } from '../../reducer';
import { computeGroupState } from '../../state';
export function dispatchActionPerChild(controls, actionCreator) {
    var hasChanged = false;
    var newControls = Object.keys(controls)
        .reduce(function (c, key) {
        var _a;
        Object.assign(c, (_a = {}, _a[key] = formStateReducer(controls[key], actionCreator(controls[key].id)), _a));
        hasChanged = hasChanged || c[key] !== controls[key];
        return c;
    }, {});
    return hasChanged ? newControls : controls;
}
function callChildReducers(controls, action) {
    var hasChanged = false;
    var newControls = Object.keys(controls)
        .map(function (key) { return [key, formStateReducer(controls[key], action)]; })
        .reduce(function (res, _a) {
        var _b;
        var _c = tslib_1.__read(_a, 2), key = _c[0], state = _c[1];
        hasChanged = hasChanged || state !== controls[key];
        return Object.assign(res, (_b = {}, _b[key] = state, _b));
    }, {});
    return hasChanged ? newControls : controls;
}
export function childReducer(state, action) {
    var controls = callChildReducers(state.controls, action);
    if (state.controls === controls) {
        return state;
    }
    return computeGroupState(state.id, controls, state.value, state.errors, state.pendingValidations, state.userDefinedProperties, {
        wasOrShouldBeDirty: state.isDirty,
        wasOrShouldBeEnabled: state.isEnabled,
        wasOrShouldBeTouched: state.isTouched,
        wasOrShouldBeSubmitted: state.isSubmitted,
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25ncngtZm9ybXMvIiwic291cmNlcyI6WyJzcmMvZ3JvdXAvcmVkdWNlci91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakQsT0FBTyxFQUFFLGlCQUFpQixFQUEwRCxNQUFNLGFBQWEsQ0FBQztBQUV4RyxNQUFNLFVBQVUsc0JBQXNCLENBQ3BDLFFBQW1DLEVBQ25DLGFBQXFEO0lBRXJELElBQUksVUFBVSxHQUFHLEtBQUssQ0FBQztJQUN2QixJQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztTQUN0QyxNQUFNLENBQUMsVUFBQyxDQUFDLEVBQUUsR0FBRzs7UUFDYixNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsWUFBSSxHQUFDLEdBQUcsSUFBRyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUUsYUFBYSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFHLENBQUM7UUFDOUYsVUFBVSxHQUFHLFVBQVUsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3BELE9BQU8sQ0FBQyxDQUFDO0lBQ1gsQ0FBQyxFQUFFLEVBQStCLENBQUMsQ0FBQztJQUN0QyxPQUFPLFVBQVUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7QUFDN0MsQ0FBQztBQUVELFNBQVMsaUJBQWlCLENBQ3hCLFFBQW1DLEVBQ25DLE1BQXVCO0lBRXZCLElBQUksVUFBVSxHQUFHLEtBQUssQ0FBQztJQUN2QixJQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztTQUN0QyxHQUFHLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQTZCLEVBQTFFLENBQTBFLENBQUM7U0FDdEYsTUFBTSxDQUFDLFVBQUMsR0FBRyxFQUFFLEVBQVk7O1lBQVosMEJBQVksRUFBWCxXQUFHLEVBQUUsYUFBSztRQUN2QixVQUFVLEdBQUcsVUFBVSxJQUFJLEtBQUssS0FBSyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbkQsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsWUFBSSxHQUFDLEdBQUcsSUFBRyxLQUFLLE1BQUcsQ0FBQztJQUM5QyxDQUFDLEVBQUUsRUFBK0IsQ0FBQyxDQUFDO0lBQ3RDLE9BQU8sVUFBVSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztBQUM3QyxDQUFDO0FBRUQsTUFBTSxVQUFVLFlBQVksQ0FBMEIsS0FBNkIsRUFBRSxNQUF1QjtJQUMxRyxJQUFNLFFBQVEsR0FBRyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBRTNELElBQUksS0FBSyxDQUFDLFFBQVEsS0FBSyxRQUFRLEVBQUU7UUFDL0IsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUVELE9BQU8saUJBQWlCLENBQ3RCLEtBQUssQ0FBQyxFQUFFLEVBQ1IsUUFBUSxFQUNSLEtBQUssQ0FBQyxLQUFLLEVBQ1gsS0FBSyxDQUFDLE1BQU0sRUFDWixLQUFLLENBQUMsa0JBQWtCLEVBQ3hCLEtBQUssQ0FBQyxxQkFBcUIsRUFDM0I7UUFDRSxrQkFBa0IsRUFBRSxLQUFLLENBQUMsT0FBTztRQUNqQyxvQkFBb0IsRUFBRSxLQUFLLENBQUMsU0FBUztRQUNyQyxvQkFBb0IsRUFBRSxLQUFLLENBQUMsU0FBUztRQUNyQyxzQkFBc0IsRUFBRSxLQUFLLENBQUMsV0FBVztLQUMxQyxDQUNGLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWN0aW9ucyB9IGZyb20gJy4uLy4uL2FjdGlvbnMnO1xyXG5pbXBvcnQgeyBmb3JtU3RhdGVSZWR1Y2VyIH0gZnJvbSAnLi4vLi4vcmVkdWNlcic7XHJcbmltcG9ydCB7IGNvbXB1dGVHcm91cFN0YXRlLCBGb3JtR3JvdXBDb250cm9scywgRm9ybUdyb3VwU3RhdGUsIEZvcm1TdGF0ZSwgS2V5VmFsdWUgfSBmcm9tICcuLi8uLi9zdGF0ZSc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZGlzcGF0Y2hBY3Rpb25QZXJDaGlsZDxUVmFsdWUgZXh0ZW5kcyBLZXlWYWx1ZT4oXHJcbiAgY29udHJvbHM6IEZvcm1Hcm91cENvbnRyb2xzPFRWYWx1ZT4sXHJcbiAgYWN0aW9uQ3JlYXRvcjogKGNvbnRyb2xJZDogc3RyaW5nKSA9PiBBY3Rpb25zPFRWYWx1ZT4sXHJcbikge1xyXG4gIGxldCBoYXNDaGFuZ2VkID0gZmFsc2U7XHJcbiAgY29uc3QgbmV3Q29udHJvbHMgPSBPYmplY3Qua2V5cyhjb250cm9scylcclxuICAgIC5yZWR1Y2UoKGMsIGtleSkgPT4ge1xyXG4gICAgICBPYmplY3QuYXNzaWduKGMsIHsgW2tleV06IGZvcm1TdGF0ZVJlZHVjZXIoY29udHJvbHNba2V5XSwgYWN0aW9uQ3JlYXRvcihjb250cm9sc1trZXldLmlkKSkgfSk7XHJcbiAgICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IGNba2V5XSAhPT0gY29udHJvbHNba2V5XTtcclxuICAgICAgcmV0dXJuIGM7XHJcbiAgICB9LCB7fSBhcyBGb3JtR3JvdXBDb250cm9sczxUVmFsdWU+KTtcclxuICByZXR1cm4gaGFzQ2hhbmdlZCA/IG5ld0NvbnRyb2xzIDogY29udHJvbHM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhbGxDaGlsZFJlZHVjZXJzPFRWYWx1ZSBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogYW55IH0+KFxyXG4gIGNvbnRyb2xzOiBGb3JtR3JvdXBDb250cm9sczxUVmFsdWU+LFxyXG4gIGFjdGlvbjogQWN0aW9uczxUVmFsdWU+LFxyXG4pOiBGb3JtR3JvdXBDb250cm9sczxUVmFsdWU+IHtcclxuICBsZXQgaGFzQ2hhbmdlZCA9IGZhbHNlO1xyXG4gIGNvbnN0IG5ld0NvbnRyb2xzID0gT2JqZWN0LmtleXMoY29udHJvbHMpXHJcbiAgICAubWFwKGtleSA9PiBba2V5LCBmb3JtU3RhdGVSZWR1Y2VyKGNvbnRyb2xzW2tleV0sIGFjdGlvbildIGFzIFtzdHJpbmcsIEZvcm1TdGF0ZTxhbnk+XSlcclxuICAgIC5yZWR1Y2UoKHJlcywgW2tleSwgc3RhdGVdKSA9PiB7XHJcbiAgICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IHN0YXRlICE9PSBjb250cm9sc1trZXldO1xyXG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihyZXMsIHsgW2tleV06IHN0YXRlIH0pO1xyXG4gICAgfSwge30gYXMgRm9ybUdyb3VwQ29udHJvbHM8VFZhbHVlPik7XHJcbiAgcmV0dXJuIGhhc0NoYW5nZWQgPyBuZXdDb250cm9scyA6IGNvbnRyb2xzO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2hpbGRSZWR1Y2VyPFRWYWx1ZSBleHRlbmRzIEtleVZhbHVlPihzdGF0ZTogRm9ybUdyb3VwU3RhdGU8VFZhbHVlPiwgYWN0aW9uOiBBY3Rpb25zPFRWYWx1ZT4pIHtcclxuICBjb25zdCBjb250cm9scyA9IGNhbGxDaGlsZFJlZHVjZXJzKHN0YXRlLmNvbnRyb2xzLCBhY3Rpb24pO1xyXG5cclxuICBpZiAoc3RhdGUuY29udHJvbHMgPT09IGNvbnRyb2xzKSB7XHJcbiAgICByZXR1cm4gc3RhdGU7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gY29tcHV0ZUdyb3VwU3RhdGUoXHJcbiAgICBzdGF0ZS5pZCxcclxuICAgIGNvbnRyb2xzLFxyXG4gICAgc3RhdGUudmFsdWUsXHJcbiAgICBzdGF0ZS5lcnJvcnMsXHJcbiAgICBzdGF0ZS5wZW5kaW5nVmFsaWRhdGlvbnMsXHJcbiAgICBzdGF0ZS51c2VyRGVmaW5lZFByb3BlcnRpZXMsXHJcbiAgICB7XHJcbiAgICAgIHdhc09yU2hvdWxkQmVEaXJ0eTogc3RhdGUuaXNEaXJ0eSxcclxuICAgICAgd2FzT3JTaG91bGRCZUVuYWJsZWQ6IHN0YXRlLmlzRW5hYmxlZCxcclxuICAgICAgd2FzT3JTaG91bGRCZVRvdWNoZWQ6IHN0YXRlLmlzVG91Y2hlZCxcclxuICAgICAgd2FzT3JTaG91bGRCZVN1Ym1pdHRlZDogc3RhdGUuaXNTdWJtaXR0ZWQsXHJcbiAgICB9LFxyXG4gICk7XHJcbn1cclxuIl19