import * as tslib_1 from "tslib";
import { Directive, HostListener, Inject, Input, Optional } from '@angular/core';
import { ActionsSubject } from '@ngrx/store';
import { MarkAsSubmittedAction } from '../actions';
var NgrxFormDirective = /** @class */ (function () {
    function NgrxFormDirective(actionsSubject) {
        this.actionsSubject = actionsSubject;
        this.actionsSubject = actionsSubject;
    }
    NgrxFormDirective.prototype.dispatchAction = function (action) {
        if (this.actionsSubject !== null) {
            this.actionsSubject.next(action);
        }
        else {
            throw new Error('ActionsSubject must be present in order to dispatch actions!');
        }
    };
    NgrxFormDirective.prototype.ngOnInit = function () {
        if (!this.state) {
            throw new Error('The form state must not be undefined!');
        }
    };
    NgrxFormDirective.prototype.onSubmit = function (event) {
        event.preventDefault();
        if (this.state.isUnsubmitted) {
            this.dispatchAction(new MarkAsSubmittedAction(this.state.id));
        }
    };
    tslib_1.__decorate([
        Input('ngrxFormState'),
        tslib_1.__metadata("design:type", Object)
    ], NgrxFormDirective.prototype, "state", void 0);
    tslib_1.__decorate([
        HostListener('submit', ['$event']),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], NgrxFormDirective.prototype, "onSubmit", null);
    NgrxFormDirective = tslib_1.__decorate([
        Directive({
            // tslint:disable-next-line:directive-selector
            selector: 'form:not([ngrxFormsAction])[ngrxFormState]',
        }),
        tslib_1.__param(0, Optional()), tslib_1.__param(0, Inject(ActionsSubject)),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], NgrxFormDirective);
    return NgrxFormDirective;
}());
export { NgrxFormDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmdyeC1mb3Jtcy8iLCJzb3VyY2VzIjpbInNyYy9ncm91cC9kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQVUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFN0MsT0FBTyxFQUFXLHFCQUFxQixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBWTVEO0lBSUUsMkJBQzhDLGNBQXFDO1FBQXJDLG1CQUFjLEdBQWQsY0FBYyxDQUF1QjtRQUVqRixJQUFJLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQztJQUN2QyxDQUFDO0lBRVMsMENBQWMsR0FBeEIsVUFBeUIsTUFBdUI7UUFDOUMsSUFBSSxJQUFJLENBQUMsY0FBYyxLQUFLLElBQUksRUFBRTtZQUNoQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNsQzthQUFNO1lBQ0wsTUFBTSxJQUFJLEtBQUssQ0FBQyw4REFBOEQsQ0FBQyxDQUFDO1NBQ2pGO0lBQ0gsQ0FBQztJQUVELG9DQUFRLEdBQVI7UUFDRSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNmLE1BQU0sSUFBSSxLQUFLLENBQUMsdUNBQXVDLENBQUMsQ0FBQztTQUMxRDtJQUNILENBQUM7SUFHRCxvQ0FBUSxHQUFSLFVBQVMsS0FBa0I7UUFDekIsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3ZCLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUU7WUFDNUIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLHFCQUFxQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUMvRDtJQUNILENBQUM7SUE1QnVCO1FBQXZCLEtBQUssQ0FBQyxlQUFlLENBQUM7O29EQUErQjtJQXVCdEQ7UUFEQyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7Ozs7cURBTWxDO0lBOUJVLGlCQUFpQjtRQUo3QixTQUFTLENBQUM7WUFDVCw4Q0FBOEM7WUFDOUMsUUFBUSxFQUFFLDRDQUE0QztTQUN2RCxDQUFDO1FBTUcsbUJBQUEsUUFBUSxFQUFFLENBQUEsRUFBRSxtQkFBQSxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUE7O09BTDFCLGlCQUFpQixDQStCN0I7SUFBRCx3QkFBQztDQUFBLEFBL0JELElBK0JDO1NBL0JZLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSG9zdExpc3RlbmVyLCBJbmplY3QsIElucHV0LCBPbkluaXQsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEFjdGlvbnNTdWJqZWN0IH0gZnJvbSAnQG5ncngvc3RvcmUnO1xyXG5cclxuaW1wb3J0IHsgQWN0aW9ucywgTWFya0FzU3VibWl0dGVkQWN0aW9uIH0gZnJvbSAnLi4vYWN0aW9ucyc7XHJcbmltcG9ydCB7IEZvcm1Hcm91cFN0YXRlIH0gZnJvbSAnLi4vc3RhdGUnO1xyXG5cclxuLy8gdGhpcyBpbnRlcmZhY2UganVzdCBleGlzdHMgdG8gcHJldmVudCBhIGRpcmVjdCByZWZlcmVuY2UgdG9cclxuLy8gYEV2ZW50YCBpbiBvdXIgY29kZSwgd2hpY2ggb3RoZXJ3aXNlIGNhdXNlcyBpc3N1ZXMgaW4gTmF0aXZlU2NyaXB0XHJcbi8vIGFwcGxpY2F0aW9uc1xyXG5pbnRlcmZhY2UgQ3VzdG9tRXZlbnQgZXh0ZW5kcyBFdmVudCB7IH1cclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpkaXJlY3RpdmUtc2VsZWN0b3JcclxuICBzZWxlY3RvcjogJ2Zvcm06bm90KFtuZ3J4Rm9ybXNBY3Rpb25dKVtuZ3J4Rm9ybVN0YXRlXScsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ3J4Rm9ybURpcmVjdGl2ZTxUVmFsdWUgZXh0ZW5kcyB7IFtrZXk6IHN0cmluZ106IGFueSB9PiBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWlucHV0LXJlbmFtZVxyXG4gIEBJbnB1dCgnbmdyeEZvcm1TdGF0ZScpIHN0YXRlOiBGb3JtR3JvdXBTdGF0ZTxUVmFsdWU+O1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIEBPcHRpb25hbCgpIEBJbmplY3QoQWN0aW9uc1N1YmplY3QpIHByaXZhdGUgYWN0aW9uc1N1YmplY3Q6IEFjdGlvbnNTdWJqZWN0IHwgbnVsbFxyXG4gICkge1xyXG4gICAgdGhpcy5hY3Rpb25zU3ViamVjdCA9IGFjdGlvbnNTdWJqZWN0O1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGRpc3BhdGNoQWN0aW9uKGFjdGlvbjogQWN0aW9uczxUVmFsdWU+KSB7XHJcbiAgICBpZiAodGhpcy5hY3Rpb25zU3ViamVjdCAhPT0gbnVsbCkge1xyXG4gICAgICB0aGlzLmFjdGlvbnNTdWJqZWN0Lm5leHQoYWN0aW9uKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9uc1N1YmplY3QgbXVzdCBiZSBwcmVzZW50IGluIG9yZGVyIHRvIGRpc3BhdGNoIGFjdGlvbnMhJyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIGlmICghdGhpcy5zdGF0ZSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBmb3JtIHN0YXRlIG11c3Qgbm90IGJlIHVuZGVmaW5lZCEnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ3N1Ym1pdCcsIFsnJGV2ZW50J10pXHJcbiAgb25TdWJtaXQoZXZlbnQ6IEN1c3RvbUV2ZW50KSB7XHJcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgaWYgKHRoaXMuc3RhdGUuaXNVbnN1Ym1pdHRlZCkge1xyXG4gICAgICB0aGlzLmRpc3BhdGNoQWN0aW9uKG5ldyBNYXJrQXNTdWJtaXR0ZWRBY3Rpb24odGhpcy5zdGF0ZS5pZCkpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=