import { SetErrorsAction } from '../../actions';
import { computeArrayState } from '../../state';
import { deepEquals } from '../../util';
import { childReducer } from './util';
export function setErrorsReducer(state, action) {
    if (action.type !== SetErrorsAction.TYPE) {
        return state;
    }
    if (action.controlId !== state.id) {
        return childReducer(state, action);
    }
    if (state.isDisabled) {
        return state;
    }
    if (state.errors === action.errors) {
        return state;
    }
    if (deepEquals(state.errors, action.errors)) {
        return state;
    }
    if (!action.errors || typeof action.errors !== 'object' || Array.isArray(action.errors)) {
        throw new Error("Control errors must be an object; got " + action.errors);
    }
    if (Object.keys(action.errors).some(function (key) { return key.startsWith('_'); })) {
        throw new Error("Control errors must not use underscore as a prefix; got " + JSON.stringify(action.errors));
    }
    if (Object.keys(action.errors).some(function (key) { return key.startsWith('$'); })) {
        throw new Error("Control errors must not use $ as a prefix; got " + JSON.stringify(action.errors));
    }
    var childAndAsyncErrors = Object.keys(state.errors)
        .filter(function (key) { return key.startsWith('_') || key.startsWith('$'); })
        .reduce(function (res, key) {
        var _a;
        return Object.assign(res, (_a = {}, _a[key] = state.errors[key], _a));
    }, {});
    var newErrors = Object.assign(childAndAsyncErrors, action.errors);
    return computeArrayState(state.id, state.controls, state.value, newErrors, state.pendingValidations, state.userDefinedProperties, {
        wasOrShouldBeDirty: state.isDirty,
        wasOrShouldBeEnabled: state.isEnabled,
        wasOrShouldBeTouched: state.isTouched,
        wasOrShouldBeSubmitted: state.isSubmitted,
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0LWVycm9ycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25ncngtZm9ybXMvIiwic291cmNlcyI6WyJzcmMvYXJyYXkvcmVkdWNlci9zZXQtZXJyb3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBVyxlQUFlLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUFFLGlCQUFpQixFQUFvQyxNQUFNLGFBQWEsQ0FBQztBQUNsRixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFdEMsTUFBTSxVQUFVLGdCQUFnQixDQUM5QixLQUE2QixFQUM3QixNQUF5QjtJQUV6QixJQUFJLE1BQU0sQ0FBQyxJQUFJLEtBQUssZUFBZSxDQUFDLElBQUksRUFBRTtRQUN4QyxPQUFPLEtBQUssQ0FBQztLQUNkO0lBRUQsSUFBSSxNQUFNLENBQUMsU0FBUyxLQUFLLEtBQUssQ0FBQyxFQUFFLEVBQUU7UUFDakMsT0FBTyxZQUFZLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQ3BDO0lBRUQsSUFBSSxLQUFLLENBQUMsVUFBVSxFQUFFO1FBQ3BCLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFFRCxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssTUFBTSxDQUFDLE1BQU0sRUFBRTtRQUNsQyxPQUFPLEtBQUssQ0FBQztLQUNkO0lBRUQsSUFBSSxVQUFVLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDM0MsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUVELElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxJQUFJLE9BQVEsTUFBTSxDQUFDLE1BQWMsS0FBSyxRQUFRLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDaEcsTUFBTSxJQUFJLEtBQUssQ0FBQywyQ0FBeUMsTUFBTSxDQUFDLE1BQVEsQ0FBQyxDQUFDO0tBQzNFO0lBRUQsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFuQixDQUFtQixDQUFDLEVBQUU7UUFDL0QsTUFBTSxJQUFJLEtBQUssQ0FBQyw2REFBMkQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFHLENBQUMsQ0FBQztLQUM3RztJQUVELElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBbkIsQ0FBbUIsQ0FBQyxFQUFFO1FBQy9ELE1BQU0sSUFBSSxLQUFLLENBQUMsb0RBQWtELElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBRyxDQUFDLENBQUM7S0FDcEc7SUFFRCxJQUFNLG1CQUFtQixHQUN2QixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7U0FDdEIsTUFBTSxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUExQyxDQUEwQyxDQUFDO1NBQ3pELE1BQU0sQ0FBQyxVQUFDLEdBQUcsRUFBRSxHQUFHOztRQUFLLE9BQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLFlBQUksR0FBQyxHQUFHLElBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBRztJQUFoRCxDQUFnRCxFQUFFLEVBQXNCLENBQUMsQ0FBQztJQUVwRyxJQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLG1CQUFtQixFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVwRSxPQUFPLGlCQUFpQixDQUN0QixLQUFLLENBQUMsRUFBRSxFQUNSLEtBQUssQ0FBQyxRQUFRLEVBQ2QsS0FBSyxDQUFDLEtBQUssRUFDWCxTQUFTLEVBQ1QsS0FBSyxDQUFDLGtCQUFrQixFQUN4QixLQUFLLENBQUMscUJBQXFCLEVBQzNCO1FBQ0Usa0JBQWtCLEVBQUUsS0FBSyxDQUFDLE9BQU87UUFDakMsb0JBQW9CLEVBQUUsS0FBSyxDQUFDLFNBQVM7UUFDckMsb0JBQW9CLEVBQUUsS0FBSyxDQUFDLFNBQVM7UUFDckMsc0JBQXNCLEVBQUUsS0FBSyxDQUFDLFdBQVc7S0FDMUMsQ0FDRixDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjdGlvbnMsIFNldEVycm9yc0FjdGlvbiB9IGZyb20gJy4uLy4uL2FjdGlvbnMnO1xyXG5pbXBvcnQgeyBjb21wdXRlQXJyYXlTdGF0ZSwgRm9ybUFycmF5U3RhdGUsIFZhbGlkYXRpb25FcnJvcnMgfSBmcm9tICcuLi8uLi9zdGF0ZSc7XHJcbmltcG9ydCB7IGRlZXBFcXVhbHMgfSBmcm9tICcuLi8uLi91dGlsJztcclxuaW1wb3J0IHsgY2hpbGRSZWR1Y2VyIH0gZnJvbSAnLi91dGlsJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRFcnJvcnNSZWR1Y2VyPFRWYWx1ZT4oXHJcbiAgc3RhdGU6IEZvcm1BcnJheVN0YXRlPFRWYWx1ZT4sXHJcbiAgYWN0aW9uOiBBY3Rpb25zPFRWYWx1ZVtdPixcclxuKTogRm9ybUFycmF5U3RhdGU8VFZhbHVlPiB7XHJcbiAgaWYgKGFjdGlvbi50eXBlICE9PSBTZXRFcnJvcnNBY3Rpb24uVFlQRSkge1xyXG4gICAgcmV0dXJuIHN0YXRlO1xyXG4gIH1cclxuXHJcbiAgaWYgKGFjdGlvbi5jb250cm9sSWQgIT09IHN0YXRlLmlkKSB7XHJcbiAgICByZXR1cm4gY2hpbGRSZWR1Y2VyKHN0YXRlLCBhY3Rpb24pO1xyXG4gIH1cclxuXHJcbiAgaWYgKHN0YXRlLmlzRGlzYWJsZWQpIHtcclxuICAgIHJldHVybiBzdGF0ZTtcclxuICB9XHJcblxyXG4gIGlmIChzdGF0ZS5lcnJvcnMgPT09IGFjdGlvbi5lcnJvcnMpIHtcclxuICAgIHJldHVybiBzdGF0ZTtcclxuICB9XHJcblxyXG4gIGlmIChkZWVwRXF1YWxzKHN0YXRlLmVycm9ycywgYWN0aW9uLmVycm9ycykpIHtcclxuICAgIHJldHVybiBzdGF0ZTtcclxuICB9XHJcblxyXG4gIGlmICghYWN0aW9uLmVycm9ycyB8fCB0eXBlb2YgKGFjdGlvbi5lcnJvcnMgYXMgYW55KSAhPT0gJ29iamVjdCcgfHwgQXJyYXkuaXNBcnJheShhY3Rpb24uZXJyb3JzKSkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKGBDb250cm9sIGVycm9ycyBtdXN0IGJlIGFuIG9iamVjdDsgZ290ICR7YWN0aW9uLmVycm9yc31gKTtcclxuICB9XHJcblxyXG4gIGlmIChPYmplY3Qua2V5cyhhY3Rpb24uZXJyb3JzKS5zb21lKGtleSA9PiBrZXkuc3RhcnRzV2l0aCgnXycpKSkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKGBDb250cm9sIGVycm9ycyBtdXN0IG5vdCB1c2UgdW5kZXJzY29yZSBhcyBhIHByZWZpeDsgZ290ICR7SlNPTi5zdHJpbmdpZnkoYWN0aW9uLmVycm9ycyl9YCk7XHJcbiAgfVxyXG5cclxuICBpZiAoT2JqZWN0LmtleXMoYWN0aW9uLmVycm9ycykuc29tZShrZXkgPT4ga2V5LnN0YXJ0c1dpdGgoJyQnKSkpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihgQ29udHJvbCBlcnJvcnMgbXVzdCBub3QgdXNlICQgYXMgYSBwcmVmaXg7IGdvdCAke0pTT04uc3RyaW5naWZ5KGFjdGlvbi5lcnJvcnMpfWApO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgY2hpbGRBbmRBc3luY0Vycm9ycyA9XHJcbiAgICBPYmplY3Qua2V5cyhzdGF0ZS5lcnJvcnMpXHJcbiAgICAgIC5maWx0ZXIoa2V5ID0+IGtleS5zdGFydHNXaXRoKCdfJykgfHwga2V5LnN0YXJ0c1dpdGgoJyQnKSlcclxuICAgICAgLnJlZHVjZSgocmVzLCBrZXkpID0+IE9iamVjdC5hc3NpZ24ocmVzLCB7IFtrZXldOiBzdGF0ZS5lcnJvcnNba2V5XSB9KSwge30gYXMgVmFsaWRhdGlvbkVycm9ycyk7XHJcblxyXG4gIGNvbnN0IG5ld0Vycm9ycyA9IE9iamVjdC5hc3NpZ24oY2hpbGRBbmRBc3luY0Vycm9ycywgYWN0aW9uLmVycm9ycyk7XHJcblxyXG4gIHJldHVybiBjb21wdXRlQXJyYXlTdGF0ZShcclxuICAgIHN0YXRlLmlkLFxyXG4gICAgc3RhdGUuY29udHJvbHMsXHJcbiAgICBzdGF0ZS52YWx1ZSxcclxuICAgIG5ld0Vycm9ycyxcclxuICAgIHN0YXRlLnBlbmRpbmdWYWxpZGF0aW9ucyxcclxuICAgIHN0YXRlLnVzZXJEZWZpbmVkUHJvcGVydGllcyxcclxuICAgIHtcclxuICAgICAgd2FzT3JTaG91bGRCZURpcnR5OiBzdGF0ZS5pc0RpcnR5LFxyXG4gICAgICB3YXNPclNob3VsZEJlRW5hYmxlZDogc3RhdGUuaXNFbmFibGVkLFxyXG4gICAgICB3YXNPclNob3VsZEJlVG91Y2hlZDogc3RhdGUuaXNUb3VjaGVkLFxyXG4gICAgICB3YXNPclNob3VsZEJlU3VibWl0dGVkOiBzdGF0ZS5pc1N1Ym1pdHRlZCxcclxuICAgIH0sXHJcbiAgKTtcclxufVxyXG4iXX0=