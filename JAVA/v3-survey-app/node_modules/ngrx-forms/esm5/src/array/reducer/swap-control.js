import * as tslib_1 from "tslib";
import { SwapArrayControlAction } from '../../actions';
import { computeArrayState } from '../../state';
import { childReducer, updateIdRecursive } from './util';
function swapArrayValues(a, i, j) {
    var _a;
    var n = tslib_1.__spread(a);
    _a = tslib_1.__read([n[j], n[i]], 2), n[i] = _a[0], n[j] = _a[1];
    return n;
}
export function swapControlReducer(state, action) {
    if (action.type !== SwapArrayControlAction.TYPE) {
        return state;
    }
    if (action.controlId !== state.id) {
        return childReducer(state, action);
    }
    var fromIndex = action.fromIndex;
    var toIndex = action.toIndex;
    if (fromIndex === toIndex) {
        return state;
    }
    if (fromIndex < 0 || toIndex < 0) {
        throw new Error("fromIndex " + fromIndex + " or toIndex " + fromIndex + " was negative");
    }
    if (fromIndex >= state.controls.length || toIndex >= state.controls.length) {
        throw new Error("fromIndex " + fromIndex + " or toIndex " + toIndex + " is out of bounds with the length of the controls " + state.controls.length);
    }
    var controls = swapArrayValues(state.controls, fromIndex, toIndex);
    controls = controls.map(function (c, i) { return (i >= fromIndex || i >= toIndex) ? updateIdRecursive(c, state.id + "." + i) : c; });
    return computeArrayState(state.id, controls, state.value, state.errors, state.pendingValidations, state.userDefinedProperties, {
        wasOrShouldBeDirty: true,
        wasOrShouldBeEnabled: state.isEnabled,
        wasOrShouldBeTouched: state.isTouched,
        wasOrShouldBeSubmitted: state.isSubmitted,
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dhcC1jb250cm9sLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmdyeC1mb3Jtcy8iLCJzb3VyY2VzIjpbInNyYy9hcnJheS9yZWR1Y2VyL3N3YXAtY29udHJvbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFXLHNCQUFzQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2hFLE9BQU8sRUFBRSxpQkFBaUIsRUFBa0IsTUFBTSxhQUFhLENBQUM7QUFDaEUsT0FBTyxFQUFFLFlBQVksRUFBRSxpQkFBaUIsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUV6RCxTQUFTLGVBQWUsQ0FBQyxDQUFpQixFQUFFLENBQVMsRUFBRSxDQUFTOztJQUM5RCxJQUFNLENBQUMsb0JBQU8sQ0FBQyxDQUFDLENBQUM7SUFDakIsb0NBQTJCLEVBQTFCLFlBQUksRUFBRSxZQUFJLENBQWlCO0lBQzVCLE9BQU8sQ0FBQyxDQUFDO0FBQ1gsQ0FBQztBQUVELE1BQU0sVUFBVSxrQkFBa0IsQ0FDaEMsS0FBNkIsRUFDN0IsTUFBeUI7SUFFekIsSUFBSSxNQUFNLENBQUMsSUFBSSxLQUFLLHNCQUFzQixDQUFDLElBQUksRUFBRTtRQUMvQyxPQUFPLEtBQUssQ0FBQztLQUNkO0lBRUQsSUFBSSxNQUFNLENBQUMsU0FBUyxLQUFLLEtBQUssQ0FBQyxFQUFFLEVBQUU7UUFDakMsT0FBTyxZQUFZLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQ3BDO0lBRUQsSUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQztJQUNuQyxJQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDO0lBRS9CLElBQUksU0FBUyxLQUFLLE9BQU8sRUFBRTtRQUN6QixPQUFPLEtBQUssQ0FBQztLQUNkO0lBRUQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxJQUFJLE9BQU8sR0FBRyxDQUFDLEVBQUU7UUFDaEMsTUFBTSxJQUFJLEtBQUssQ0FBQyxlQUFhLFNBQVMsb0JBQWUsU0FBUyxrQkFBZSxDQUFDLENBQUM7S0FDaEY7SUFFRCxJQUFJLFNBQVMsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sSUFBSSxPQUFPLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUU7UUFDMUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxlQUFhLFNBQVMsb0JBQWUsT0FBTywwREFBcUQsS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFRLENBQUMsQ0FBQztLQUMzSTtJQUVELElBQUksUUFBUSxHQUFHLGVBQWUsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNuRSxRQUFRLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxVQUFDLENBQUMsRUFBRSxDQUFDLElBQUssT0FBQSxDQUFDLENBQUMsSUFBSSxTQUFTLElBQUksQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLEVBQUssS0FBSyxDQUFDLEVBQUUsU0FBSSxDQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUEvRSxDQUErRSxDQUFDLENBQUM7SUFFbkgsT0FBTyxpQkFBaUIsQ0FDdEIsS0FBSyxDQUFDLEVBQUUsRUFDUixRQUFRLEVBQ1IsS0FBSyxDQUFDLEtBQUssRUFDWCxLQUFLLENBQUMsTUFBTSxFQUNaLEtBQUssQ0FBQyxrQkFBa0IsRUFDeEIsS0FBSyxDQUFDLHFCQUFxQixFQUMzQjtRQUNFLGtCQUFrQixFQUFFLElBQUk7UUFDeEIsb0JBQW9CLEVBQUUsS0FBSyxDQUFDLFNBQVM7UUFDckMsb0JBQW9CLEVBQUUsS0FBSyxDQUFDLFNBQVM7UUFDckMsc0JBQXNCLEVBQUUsS0FBSyxDQUFDLFdBQVc7S0FDMUMsQ0FDRixDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjdGlvbnMsIFN3YXBBcnJheUNvbnRyb2xBY3Rpb24gfSBmcm9tICcuLi8uLi9hY3Rpb25zJztcclxuaW1wb3J0IHsgY29tcHV0ZUFycmF5U3RhdGUsIEZvcm1BcnJheVN0YXRlIH0gZnJvbSAnLi4vLi4vc3RhdGUnO1xyXG5pbXBvcnQgeyBjaGlsZFJlZHVjZXIsIHVwZGF0ZUlkUmVjdXJzaXZlIH0gZnJvbSAnLi91dGlsJztcclxuXHJcbmZ1bmN0aW9uIHN3YXBBcnJheVZhbHVlcyhhOiByZWFkb25seSBhbnlbXSwgaTogbnVtYmVyLCBqOiBudW1iZXIpIHtcclxuICBjb25zdCBuID0gWy4uLmFdO1xyXG4gIFtuW2ldLCBuW2pdXSA9IFtuW2pdLCBuW2ldXTtcclxuICByZXR1cm4gbjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHN3YXBDb250cm9sUmVkdWNlcjxUVmFsdWU+KFxyXG4gIHN0YXRlOiBGb3JtQXJyYXlTdGF0ZTxUVmFsdWU+LFxyXG4gIGFjdGlvbjogQWN0aW9uczxUVmFsdWVbXT4sXHJcbik6IEZvcm1BcnJheVN0YXRlPFRWYWx1ZT4ge1xyXG4gIGlmIChhY3Rpb24udHlwZSAhPT0gU3dhcEFycmF5Q29udHJvbEFjdGlvbi5UWVBFKSB7XHJcbiAgICByZXR1cm4gc3RhdGU7XHJcbiAgfVxyXG5cclxuICBpZiAoYWN0aW9uLmNvbnRyb2xJZCAhPT0gc3RhdGUuaWQpIHtcclxuICAgIHJldHVybiBjaGlsZFJlZHVjZXIoc3RhdGUsIGFjdGlvbik7XHJcbiAgfVxyXG5cclxuICBjb25zdCBmcm9tSW5kZXggPSBhY3Rpb24uZnJvbUluZGV4O1xyXG4gIGNvbnN0IHRvSW5kZXggPSBhY3Rpb24udG9JbmRleDtcclxuXHJcbiAgaWYgKGZyb21JbmRleCA9PT0gdG9JbmRleCkge1xyXG4gICAgcmV0dXJuIHN0YXRlO1xyXG4gIH1cclxuXHJcbiAgaWYgKGZyb21JbmRleCA8IDAgfHwgdG9JbmRleCA8IDApIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihgZnJvbUluZGV4ICR7ZnJvbUluZGV4fSBvciB0b0luZGV4ICR7ZnJvbUluZGV4fSB3YXMgbmVnYXRpdmVgKTtcclxuICB9XHJcblxyXG4gIGlmIChmcm9tSW5kZXggPj0gc3RhdGUuY29udHJvbHMubGVuZ3RoIHx8IHRvSW5kZXggPj0gc3RhdGUuY29udHJvbHMubGVuZ3RoKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoYGZyb21JbmRleCAke2Zyb21JbmRleH0gb3IgdG9JbmRleCAke3RvSW5kZXh9IGlzIG91dCBvZiBib3VuZHMgd2l0aCB0aGUgbGVuZ3RoIG9mIHRoZSBjb250cm9scyAke3N0YXRlLmNvbnRyb2xzLmxlbmd0aH1gKTtcclxuICB9XHJcblxyXG4gIGxldCBjb250cm9scyA9IHN3YXBBcnJheVZhbHVlcyhzdGF0ZS5jb250cm9scywgZnJvbUluZGV4LCB0b0luZGV4KTtcclxuICBjb250cm9scyA9IGNvbnRyb2xzLm1hcCgoYywgaSkgPT4gKGkgPj0gZnJvbUluZGV4IHx8IGkgPj0gdG9JbmRleCkgPyB1cGRhdGVJZFJlY3Vyc2l2ZShjLCBgJHtzdGF0ZS5pZH0uJHtpfWApIDogYyk7XHJcblxyXG4gIHJldHVybiBjb21wdXRlQXJyYXlTdGF0ZShcclxuICAgIHN0YXRlLmlkLFxyXG4gICAgY29udHJvbHMsXHJcbiAgICBzdGF0ZS52YWx1ZSxcclxuICAgIHN0YXRlLmVycm9ycyxcclxuICAgIHN0YXRlLnBlbmRpbmdWYWxpZGF0aW9ucyxcclxuICAgIHN0YXRlLnVzZXJEZWZpbmVkUHJvcGVydGllcyxcclxuICAgIHtcclxuICAgICAgd2FzT3JTaG91bGRCZURpcnR5OiB0cnVlLFxyXG4gICAgICB3YXNPclNob3VsZEJlRW5hYmxlZDogc3RhdGUuaXNFbmFibGVkLFxyXG4gICAgICB3YXNPclNob3VsZEJlVG91Y2hlZDogc3RhdGUuaXNUb3VjaGVkLFxyXG4gICAgICB3YXNPclNob3VsZEJlU3VibWl0dGVkOiBzdGF0ZS5pc1N1Ym1pdHRlZCxcclxuICAgIH1cclxuICApO1xyXG59XHJcbiJdfQ==