import * as tslib_1 from "tslib";
import { Directive, ElementRef, forwardRef, Host, HostListener, Input, Optional, Renderer2, } from '@angular/core';
import { NGRX_FORM_VIEW_ADAPTER } from './view-adapter';
// tslint:disable:directive-class-suffix
var NgrxSelectMultipleViewAdapter = /** @class */ (function () {
    function NgrxSelectMultipleViewAdapter(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.options = {};
        this.optionValues = {};
        this.idCounter = 0;
        this.selectedIds = [];
        this.nativeIdWasSet = false;
        this.onChangeFn = function () { return void 0; };
        this.onTouched = function () { return void 0; };
    }
    NgrxSelectMultipleViewAdapter_1 = NgrxSelectMultipleViewAdapter;
    Object.defineProperty(NgrxSelectMultipleViewAdapter.prototype, "ngrxFormControlState", {
        set: function (value) {
            if (!value) {
                throw new Error('The control state must not be undefined!');
            }
            this.state = value;
            var nativeId = this.elementRef.nativeElement.id;
            var shouldSetNativeId = value.id !== nativeId && this.nativeIdWasSet;
            if (shouldSetNativeId) {
                this.renderer.setProperty(this.elementRef.nativeElement, 'id', value.id);
            }
        },
        enumerable: true,
        configurable: true
    });
    NgrxSelectMultipleViewAdapter.prototype.ngAfterViewInit = function () {
        var nativeId = this.elementRef.nativeElement.id;
        var shouldSetNativeId = this.state.id !== nativeId && !nativeId;
        if (shouldSetNativeId) {
            this.renderer.setProperty(this.elementRef.nativeElement, 'id', this.state.id);
            this.nativeIdWasSet = true;
        }
    };
    NgrxSelectMultipleViewAdapter.prototype.setViewValue = function (value) {
        var _this = this;
        if (value === null) {
            value = [];
        }
        if (!Array.isArray(value)) {
            throw new Error("the value provided to a NgrxSelectMultipleViewAdapter must be null or an array; got " + value + " of type " + typeof value); // `
        }
        this.selectedIds = value.map(function (v) { return _this.getOptionId(v); }).filter(function (id) { return id !== null; }).map(function (id) { return id; });
        Object.keys(this.options).forEach(function (id) { return _this.options[id].isSelected = _this.selectedIds.indexOf(id) >= 0; });
    };
    NgrxSelectMultipleViewAdapter.prototype.onChange = function () {
        var _this = this;
        this.selectedIds = Object.keys(this.options).filter(function (id) { return _this.options[id].isSelected; });
        var value = this.selectedIds.map(function (id) { return _this.optionValues[id]; });
        this.onChangeFn(value);
    };
    NgrxSelectMultipleViewAdapter.prototype.setOnChangeCallback = function (fn) {
        this.onChangeFn = fn;
    };
    NgrxSelectMultipleViewAdapter.prototype.setOnTouchedCallback = function (fn) {
        this.onTouched = fn;
    };
    NgrxSelectMultipleViewAdapter.prototype.setIsDisabled = function (isDisabled) {
        this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);
    };
    NgrxSelectMultipleViewAdapter.prototype.registerOption = function (option) {
        var id = this.idCounter.toString();
        this.options[id] = option;
        this.idCounter += 1;
        return id;
    };
    NgrxSelectMultipleViewAdapter.prototype.updateOptionValue = function (id, value) {
        this.optionValues[id] = value;
        if (this.selectedIds.indexOf(id) >= 0) {
            this.onChange();
        }
    };
    NgrxSelectMultipleViewAdapter.prototype.deregisterOption = function (id) {
        delete this.options[id];
        delete this.optionValues[id];
    };
    NgrxSelectMultipleViewAdapter.prototype.getOptionId = function (value) {
        var e_1, _a;
        try {
            for (var _b = tslib_1.__values(Array.from(Object.keys(this.optionValues))), _c = _b.next(); !_c.done; _c = _b.next()) {
                var id = _c.value;
                if (this.optionValues[id] === value) {
                    return id;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return null;
    };
    var NgrxSelectMultipleViewAdapter_1;
    tslib_1.__decorate([
        HostListener('blur'),
        tslib_1.__metadata("design:type", Function)
    ], NgrxSelectMultipleViewAdapter.prototype, "onTouched", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], NgrxSelectMultipleViewAdapter.prototype, "ngrxFormControlState", null);
    tslib_1.__decorate([
        HostListener('change'),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], NgrxSelectMultipleViewAdapter.prototype, "onChange", null);
    NgrxSelectMultipleViewAdapter = NgrxSelectMultipleViewAdapter_1 = tslib_1.__decorate([
        Directive({
            // tslint:disable-next-line:directive-selector
            selector: 'select[multiple][ngrxFormControlState]',
            providers: [{
                    provide: NGRX_FORM_VIEW_ADAPTER,
                    useExisting: forwardRef(function () { return NgrxSelectMultipleViewAdapter_1; }),
                    multi: true,
                }],
        }),
        tslib_1.__metadata("design:paramtypes", [Renderer2, ElementRef])
    ], NgrxSelectMultipleViewAdapter);
    return NgrxSelectMultipleViewAdapter;
}());
export { NgrxSelectMultipleViewAdapter };
var ɵ0 = function () { return ''; }, ɵ1 = function () { return void 0; }, ɵ2 = function () { return void 0; };
var NULL_VIEW_ADAPTER = {
    registerOption: ɵ0,
    deregisterOption: ɵ1,
    updateOptionValue: ɵ2,
};
var ɵ3 = function () { return void 0; };
var NULL_RENDERER = {
    setProperty: ɵ3,
};
var NgrxSelectMultipleOption = /** @class */ (function () {
    function NgrxSelectMultipleOption(element, renderer, viewAdapter) {
        this.element = element;
        this.renderer = renderer;
        this.viewAdapter = viewAdapter;
        this.renderer = viewAdapter ? renderer : NULL_RENDERER;
        this.viewAdapter = viewAdapter || NULL_VIEW_ADAPTER;
        this.id = this.viewAdapter.registerOption(this);
    }
    Object.defineProperty(NgrxSelectMultipleOption.prototype, "value", {
        set: function (value) {
            this.viewAdapter.updateOptionValue(this.id, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgrxSelectMultipleOption.prototype, "isSelected", {
        get: function () {
            return this.element.nativeElement.selected;
        },
        set: function (selected) {
            this.renderer.setProperty(this.element.nativeElement, 'selected', selected);
        },
        enumerable: true,
        configurable: true
    });
    NgrxSelectMultipleOption.prototype.ngOnInit = function () {
        this.renderer.setProperty(this.element.nativeElement, 'value', this.id);
    };
    NgrxSelectMultipleOption.prototype.ngOnDestroy = function () {
        this.viewAdapter.deregisterOption(this.id);
    };
    tslib_1.__decorate([
        Input('value'),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], NgrxSelectMultipleOption.prototype, "value", null);
    NgrxSelectMultipleOption = tslib_1.__decorate([
        Directive({
            // tslint:disable-next-line:directive-selector
            selector: 'option',
        }),
        tslib_1.__param(2, Host()), tslib_1.__param(2, Optional()),
        tslib_1.__metadata("design:paramtypes", [ElementRef,
            Renderer2,
            NgrxSelectMultipleViewAdapter])
    ], NgrxSelectMultipleOption);
    return NgrxSelectMultipleOption;
}());
export { NgrxSelectMultipleOption };
export { ɵ0, ɵ1, ɵ2, ɵ3 };
//# sourceMappingURL=data:application/json;base64,