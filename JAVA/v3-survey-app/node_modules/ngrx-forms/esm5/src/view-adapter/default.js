import * as tslib_1 from "tslib";
import { isPlatformBrowser } from '@angular/common';
import { Directive, ElementRef, forwardRef, HostListener, Inject, Input, Optional, PLATFORM_ID, Renderer2 } from '@angular/core';
import { NGRX_FORM_VIEW_ADAPTER } from './view-adapter';
/**
 * We must check whether the agent is Android because composition events
 * behave differently between iOS and Android.
 */
function isAndroid(navigator) {
    return /android (\d+)/.test(navigator.userAgent.toLowerCase());
}
// tslint:disable:directive-class-suffix
// tslint:disable:directive-selector
// TODO: since this directive has a side-effect (setting the element's id attribute)
// it should not blacklist other types of inputs but instead it should somehow figure
// out whether it is the "active" view adapter and only perform its side effects if it
// is active
var NgrxDefaultViewAdapter = /** @class */ (function () {
    function NgrxDefaultViewAdapter(renderer, elementRef, platformId, 
    // we use a special injection string that should never exist at runtime to allow mocking this dependency for testing
    navigator) {
        if (platformId === void 0) { platformId = null; }
        if (navigator === void 0) { navigator = null; }
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.platformId = platformId;
        this.nativeIdWasSet = false;
        this.onChange = function () { return void 0; };
        this.onTouched = function () { return void 0; };
        /** Whether the user is creating a composition string (IME events). */
        this.isComposing = false;
        this.isCompositionSupported = isPlatformBrowser(this.platformId || '') && !isAndroid(navigator || window.navigator);
    }
    NgrxDefaultViewAdapter_1 = NgrxDefaultViewAdapter;
    Object.defineProperty(NgrxDefaultViewAdapter.prototype, "ngrxFormControlState", {
        set: function (value) {
            if (!value) {
                throw new Error('The control state must not be undefined!');
            }
            this.state = value;
            var nativeId = this.elementRef.nativeElement.id;
            var shouldSetNativeId = value.id !== nativeId && this.nativeIdWasSet;
            if (shouldSetNativeId) {
                this.renderer.setProperty(this.elementRef.nativeElement, 'id', value.id);
            }
        },
        enumerable: true,
        configurable: true
    });
    NgrxDefaultViewAdapter.prototype.ngAfterViewInit = function () {
        var nativeId = this.elementRef.nativeElement.id;
        var shouldSetNativeId = this.state.id !== nativeId && !nativeId;
        if (shouldSetNativeId) {
            this.renderer.setProperty(this.elementRef.nativeElement, 'id', this.state.id);
            this.nativeIdWasSet = true;
        }
    };
    NgrxDefaultViewAdapter.prototype.setViewValue = function (value) {
        var normalizedValue = value == null ? '' : value;
        this.renderer.setProperty(this.elementRef.nativeElement, 'value', normalizedValue);
    };
    NgrxDefaultViewAdapter.prototype.setOnChangeCallback = function (fn) {
        this.onChange = fn;
    };
    NgrxDefaultViewAdapter.prototype.setOnTouchedCallback = function (fn) {
        this.onTouched = fn;
    };
    NgrxDefaultViewAdapter.prototype.setIsDisabled = function (isDisabled) {
        this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);
    };
    NgrxDefaultViewAdapter.prototype.handleInput = function (_a) {
        var target = _a.target;
        if (this.isCompositionSupported && this.isComposing) {
            return;
        }
        this.onChange(target.value);
    };
    NgrxDefaultViewAdapter.prototype.compositionStart = function () {
        this.isComposing = true;
    };
    NgrxDefaultViewAdapter.prototype.compositionEnd = function (_a) {
        var target = _a.target;
        this.isComposing = false;
        if (this.isCompositionSupported) {
            this.onChange(target.value);
        }
    };
    var NgrxDefaultViewAdapter_1;
    tslib_1.__decorate([
        HostListener('blur'),
        tslib_1.__metadata("design:type", Function)
    ], NgrxDefaultViewAdapter.prototype, "onTouched", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], NgrxDefaultViewAdapter.prototype, "ngrxFormControlState", null);
    tslib_1.__decorate([
        HostListener('input', ['$event']),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], NgrxDefaultViewAdapter.prototype, "handleInput", null);
    tslib_1.__decorate([
        HostListener('compositionstart'),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], NgrxDefaultViewAdapter.prototype, "compositionStart", null);
    tslib_1.__decorate([
        HostListener('compositionend', ['$event']),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], NgrxDefaultViewAdapter.prototype, "compositionEnd", null);
    NgrxDefaultViewAdapter = NgrxDefaultViewAdapter_1 = tslib_1.__decorate([
        Directive({
            selector: 'input:not([type=checkbox]):not([type=number]):not([type=radio]):not([type=range])[ngrxFormControlState],textarea[ngrxFormControlState]',
            providers: [{
                    provide: NGRX_FORM_VIEW_ADAPTER,
                    useExisting: forwardRef(function () { return NgrxDefaultViewAdapter_1; }),
                    multi: true,
                }],
        }),
        tslib_1.__param(2, Optional()), tslib_1.__param(2, Inject(PLATFORM_ID)),
        tslib_1.__param(3, Optional()), tslib_1.__param(3, Inject('ngrx-forms/never')),
        tslib_1.__metadata("design:paramtypes", [Renderer2,
            ElementRef, Object, Object])
    ], NgrxDefaultViewAdapter);
    return NgrxDefaultViewAdapter;
}());
export { NgrxDefaultViewAdapter };
//# sourceMappingURL=data:application/json;base64,