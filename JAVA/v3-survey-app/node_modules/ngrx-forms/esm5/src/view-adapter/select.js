import * as tslib_1 from "tslib";
import { Directive, ElementRef, forwardRef, Host, HostListener, Input, Optional, Renderer2, } from '@angular/core';
import { NGRX_FORM_VIEW_ADAPTER } from './view-adapter';
// tslint:disable:directive-class-suffix
var NgrxSelectViewAdapter = /** @class */ (function () {
    function NgrxSelectViewAdapter(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.optionMap = {};
        this.idCounter = 0;
        this.selectedId = null;
        this.value = undefined;
        this.nativeIdWasSet = false;
        this.onChangeFn = function () { return void 0; };
        this.onTouched = function () { return void 0; };
    }
    NgrxSelectViewAdapter_1 = NgrxSelectViewAdapter;
    Object.defineProperty(NgrxSelectViewAdapter.prototype, "ngrxFormControlState", {
        set: function (value) {
            if (!value) {
                throw new Error('The control state must not be undefined!');
            }
            this.state = value;
            var nativeId = this.elementRef.nativeElement.id;
            var shouldSetNativeId = value.id !== nativeId && this.nativeIdWasSet;
            if (shouldSetNativeId) {
                this.renderer.setProperty(this.elementRef.nativeElement, 'id', value.id);
            }
        },
        enumerable: true,
        configurable: true
    });
    NgrxSelectViewAdapter.prototype.ngAfterViewInit = function () {
        var nativeId = this.elementRef.nativeElement.id;
        var shouldSetNativeId = this.state.id !== nativeId && !nativeId;
        if (shouldSetNativeId) {
            this.renderer.setProperty(this.elementRef.nativeElement, 'id', this.state.id);
            this.nativeIdWasSet = true;
        }
    };
    NgrxSelectViewAdapter.prototype.setViewValue = function (value) {
        this.value = value;
        this.selectedId = this.getOptionId(value);
        if (this.selectedId === null) {
            this.renderer.setProperty(this.elementRef.nativeElement, 'selectedIndex', -1);
        }
        this.renderer.setProperty(this.elementRef.nativeElement, 'value', this.selectedId);
    };
    NgrxSelectViewAdapter.prototype.onChange = function (_a) {
        var target = _a.target;
        this.selectedId = target.value;
        var value = this.optionMap[this.selectedId];
        this.value = value;
        this.onChangeFn(value);
    };
    NgrxSelectViewAdapter.prototype.setOnChangeCallback = function (fn) {
        this.onChangeFn = fn;
    };
    NgrxSelectViewAdapter.prototype.setOnTouchedCallback = function (fn) {
        this.onTouched = fn;
    };
    NgrxSelectViewAdapter.prototype.setIsDisabled = function (isDisabled) {
        this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);
    };
    NgrxSelectViewAdapter.prototype.createOptionId = function () {
        var id = this.idCounter.toString();
        this.idCounter += 1;
        return id;
    };
    NgrxSelectViewAdapter.prototype.updateOptionValue = function (id, value) {
        this.optionMap[id] = value;
        if (this.selectedId === id) {
            this.onChangeFn(value);
        }
        else if (value === this.value) {
            this.setViewValue(value);
        }
    };
    NgrxSelectViewAdapter.prototype.deregisterOption = function (id) {
        delete this.optionMap[id];
    };
    NgrxSelectViewAdapter.prototype.getOptionId = function (value) {
        var e_1, _a;
        try {
            for (var _b = tslib_1.__values(Array.from(Object.keys(this.optionMap))), _c = _b.next(); !_c.done; _c = _b.next()) {
                var id = _c.value;
                if (this.optionMap[id] === value) {
                    return id;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return null;
    };
    var NgrxSelectViewAdapter_1;
    tslib_1.__decorate([
        HostListener('blur'),
        tslib_1.__metadata("design:type", Function)
    ], NgrxSelectViewAdapter.prototype, "onTouched", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], NgrxSelectViewAdapter.prototype, "ngrxFormControlState", null);
    tslib_1.__decorate([
        HostListener('change', ['$event']),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], NgrxSelectViewAdapter.prototype, "onChange", null);
    NgrxSelectViewAdapter = NgrxSelectViewAdapter_1 = tslib_1.__decorate([
        Directive({
            // tslint:disable-next-line:directive-selector
            selector: 'select:not([multiple])[ngrxFormControlState]',
            providers: [{
                    provide: NGRX_FORM_VIEW_ADAPTER,
                    useExisting: forwardRef(function () { return NgrxSelectViewAdapter_1; }),
                    multi: true,
                }],
        }),
        tslib_1.__metadata("design:paramtypes", [Renderer2, ElementRef])
    ], NgrxSelectViewAdapter);
    return NgrxSelectViewAdapter;
}());
export { NgrxSelectViewAdapter };
var ɵ0 = function () { return ''; }, ɵ1 = function () { return void 0; }, ɵ2 = function () { return void 0; };
var NULL_VIEW_ADAPTER = {
    createOptionId: ɵ0,
    deregisterOption: ɵ1,
    updateOptionValue: ɵ2,
};
var ɵ3 = function () { return void 0; };
var NULL_RENDERER = {
    setProperty: ɵ3,
};
var NgrxSelectOption = /** @class */ (function () {
    function NgrxSelectOption(element, renderer, viewAdapter) {
        this.element = element;
        this.renderer = renderer;
        this.viewAdapter = viewAdapter;
        this.isInitialized = false;
        this.renderer = viewAdapter ? renderer : NULL_RENDERER;
        this.viewAdapter = viewAdapter || NULL_VIEW_ADAPTER;
        this.id = this.viewAdapter.createOptionId();
    }
    Object.defineProperty(NgrxSelectOption.prototype, "value", {
        set: function (value) {
            // this cannot be done inside ngOnInit since the value property
            // must be already set when the option value is updated in the view
            // adapter and the initial binding of 'value' happens before
            // ngOnInit runs
            if (!this.isInitialized) {
                this.isInitialized = true;
                this.renderer.setProperty(this.element.nativeElement, 'value', this.id);
            }
            this.viewAdapter.updateOptionValue(this.id, value);
        },
        enumerable: true,
        configurable: true
    });
    NgrxSelectOption.prototype.ngOnDestroy = function () {
        this.viewAdapter.deregisterOption(this.id);
    };
    tslib_1.__decorate([
        Input('value'),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], NgrxSelectOption.prototype, "value", null);
    NgrxSelectOption = tslib_1.__decorate([
        Directive({
            // tslint:disable-next-line:directive-selector
            selector: 'option',
        }),
        tslib_1.__param(2, Host()), tslib_1.__param(2, Optional()),
        tslib_1.__metadata("design:paramtypes", [ElementRef,
            Renderer2,
            NgrxSelectViewAdapter])
    ], NgrxSelectOption);
    return NgrxSelectOption;
}());
export { NgrxSelectOption };
export { ɵ0, ɵ1, ɵ2, ɵ3 };
//# sourceMappingURL=data:application/json;base64,