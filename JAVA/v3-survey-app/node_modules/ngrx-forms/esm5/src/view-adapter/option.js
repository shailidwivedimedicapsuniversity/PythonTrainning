import * as tslib_1 from "tslib";
import { Directive, ElementRef, Host, Input, Optional, Renderer2, } from '@angular/core';
import { NgrxSelectViewAdapter } from './select';
import { NgrxSelectMultipleViewAdapter } from './select-multiple';
var ɵ0 = function () { return void 0; };
// tslint:disable:directive-class-suffix
var NULL_RENDERER = {
    setProperty: ɵ0,
};
/**
 * This directive is necessary to restore the default behaviour of Angular
 * when an `option` is used without an **ngrx-forms** form state. Since it
 * is not possible to select an element with a selector that considers its
 * parent the `option` directives for `select` and `select[multiple]` will
 * always be applied and therefore overriding the `[value]` binding which
 * disabled Angular's normal behaviour. This directive restores this
 * behaviour if no `select` or `select[multiple]` view adapter is found.
 * This is not a perfect solution since it may interfere with other
 * directives that try to set the `[value]` but that is very unlikely.
 */
var NgrxFallbackSelectOption = /** @class */ (function () {
    function NgrxFallbackSelectOption(element, renderer, viewAdapter, multipleViewAdapter) {
        this.element = element;
        this.renderer = renderer;
        this.renderer = viewAdapter || multipleViewAdapter ? NULL_RENDERER : renderer;
    }
    Object.defineProperty(NgrxFallbackSelectOption.prototype, "value", {
        set: function (value) {
            this.renderer.setProperty(this.element.nativeElement, 'value', value);
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input('value'),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], NgrxFallbackSelectOption.prototype, "value", null);
    NgrxFallbackSelectOption = tslib_1.__decorate([
        Directive({
            // tslint:disable-next-line:directive-selector
            selector: 'option',
        }),
        tslib_1.__param(2, Host()), tslib_1.__param(2, Optional()),
        tslib_1.__param(3, Host()), tslib_1.__param(3, Optional()),
        tslib_1.__metadata("design:paramtypes", [ElementRef,
            Renderer2,
            NgrxSelectViewAdapter,
            NgrxSelectMultipleViewAdapter])
    ], NgrxFallbackSelectOption);
    return NgrxFallbackSelectOption;
}());
export { NgrxFallbackSelectOption };
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmdyeC1mb3Jtcy8iLCJzb3VyY2VzIjpbInNyYy92aWV3LWFkYXB0ZXIvb3B0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixJQUFJLEVBQ0osS0FBSyxFQUNMLFFBQVEsRUFDUixTQUFTLEdBQ1YsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ2pELE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO1NBS25ELGNBQU0sT0FBQSxLQUFLLENBQUMsRUFBTixDQUFNO0FBSDNCLHdDQUF3QztBQUV4QyxJQUFNLGFBQWEsR0FBYztJQUMvQixXQUFXLElBQWM7Q0FDbkIsQ0FBQztBQUVUOzs7Ozs7Ozs7O0dBVUc7QUFLSDtJQUNFLGtDQUNVLE9BQW1CLEVBQ25CLFFBQW1CLEVBQ1AsV0FBa0MsRUFDbEMsbUJBQWtEO1FBSDlELFlBQU8sR0FBUCxPQUFPLENBQVk7UUFDbkIsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUkzQixJQUFJLENBQUMsUUFBUSxHQUFHLFdBQVcsSUFBSSxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7SUFDaEYsQ0FBQztJQUdELHNCQUFJLDJDQUFLO2FBQVQsVUFBVSxLQUFVO1lBQ2xCLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN4RSxDQUFDOzs7T0FBQTtJQUZEO1FBREMsS0FBSyxDQUFDLE9BQU8sQ0FBQzs7O3lEQUdkO0lBYlUsd0JBQXdCO1FBSnBDLFNBQVMsQ0FBQztZQUNULDhDQUE4QztZQUM5QyxRQUFRLEVBQUUsUUFBUTtTQUNuQixDQUFDO1FBS0csbUJBQUEsSUFBSSxFQUFFLENBQUEsRUFBRSxtQkFBQSxRQUFRLEVBQUUsQ0FBQTtRQUNsQixtQkFBQSxJQUFJLEVBQUUsQ0FBQSxFQUFFLG1CQUFBLFFBQVEsRUFBRSxDQUFBO2lEQUhGLFVBQVU7WUFDVCxTQUFTO1lBQ00scUJBQXFCO1lBQ2IsNkJBQTZCO09BTDdELHdCQUF3QixDQWNwQztJQUFELCtCQUFDO0NBQUEsQUFkRCxJQWNDO1NBZFksd0JBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBEaXJlY3RpdmUsXHJcbiAgRWxlbWVudFJlZixcclxuICBIb3N0LFxyXG4gIElucHV0LFxyXG4gIE9wdGlvbmFsLFxyXG4gIFJlbmRlcmVyMixcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IE5ncnhTZWxlY3RWaWV3QWRhcHRlciB9IGZyb20gJy4vc2VsZWN0JztcclxuaW1wb3J0IHsgTmdyeFNlbGVjdE11bHRpcGxlVmlld0FkYXB0ZXIgfSBmcm9tICcuL3NlbGVjdC1tdWx0aXBsZSc7XHJcblxyXG4vLyB0c2xpbnQ6ZGlzYWJsZTpkaXJlY3RpdmUtY2xhc3Mtc3VmZml4XHJcblxyXG5jb25zdCBOVUxMX1JFTkRFUkVSOiBSZW5kZXJlcjIgPSB7XHJcbiAgc2V0UHJvcGVydHk6ICgpID0+IHZvaWQgMCxcclxufSBhcyBhbnk7XHJcblxyXG4vKipcclxuICogVGhpcyBkaXJlY3RpdmUgaXMgbmVjZXNzYXJ5IHRvIHJlc3RvcmUgdGhlIGRlZmF1bHQgYmVoYXZpb3VyIG9mIEFuZ3VsYXJcclxuICogd2hlbiBhbiBgb3B0aW9uYCBpcyB1c2VkIHdpdGhvdXQgYW4gKipuZ3J4LWZvcm1zKiogZm9ybSBzdGF0ZS4gU2luY2UgaXRcclxuICogaXMgbm90IHBvc3NpYmxlIHRvIHNlbGVjdCBhbiBlbGVtZW50IHdpdGggYSBzZWxlY3RvciB0aGF0IGNvbnNpZGVycyBpdHNcclxuICogcGFyZW50IHRoZSBgb3B0aW9uYCBkaXJlY3RpdmVzIGZvciBgc2VsZWN0YCBhbmQgYHNlbGVjdFttdWx0aXBsZV1gIHdpbGxcclxuICogYWx3YXlzIGJlIGFwcGxpZWQgYW5kIHRoZXJlZm9yZSBvdmVycmlkaW5nIHRoZSBgW3ZhbHVlXWAgYmluZGluZyB3aGljaFxyXG4gKiBkaXNhYmxlZCBBbmd1bGFyJ3Mgbm9ybWFsIGJlaGF2aW91ci4gVGhpcyBkaXJlY3RpdmUgcmVzdG9yZXMgdGhpc1xyXG4gKiBiZWhhdmlvdXIgaWYgbm8gYHNlbGVjdGAgb3IgYHNlbGVjdFttdWx0aXBsZV1gIHZpZXcgYWRhcHRlciBpcyBmb3VuZC5cclxuICogVGhpcyBpcyBub3QgYSBwZXJmZWN0IHNvbHV0aW9uIHNpbmNlIGl0IG1heSBpbnRlcmZlcmUgd2l0aCBvdGhlclxyXG4gKiBkaXJlY3RpdmVzIHRoYXQgdHJ5IHRvIHNldCB0aGUgYFt2YWx1ZV1gIGJ1dCB0aGF0IGlzIHZlcnkgdW5saWtlbHkuXHJcbiAqL1xyXG5ARGlyZWN0aXZlKHtcclxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yXHJcbiAgc2VsZWN0b3I6ICdvcHRpb24nLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdyeEZhbGxiYWNrU2VsZWN0T3B0aW9uIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgZWxlbWVudDogRWxlbWVudFJlZixcclxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcclxuICAgIEBIb3N0KCkgQE9wdGlvbmFsKCkgdmlld0FkYXB0ZXI6IE5ncnhTZWxlY3RWaWV3QWRhcHRlcixcclxuICAgIEBIb3N0KCkgQE9wdGlvbmFsKCkgbXVsdGlwbGVWaWV3QWRhcHRlcjogTmdyeFNlbGVjdE11bHRpcGxlVmlld0FkYXB0ZXIsXHJcbiAgKSB7XHJcbiAgICB0aGlzLnJlbmRlcmVyID0gdmlld0FkYXB0ZXIgfHwgbXVsdGlwbGVWaWV3QWRhcHRlciA/IE5VTExfUkVOREVSRVIgOiByZW5kZXJlcjtcclxuICB9XHJcblxyXG4gIEBJbnB1dCgndmFsdWUnKVxyXG4gIHNldCB2YWx1ZSh2YWx1ZTogYW55KSB7XHJcbiAgICB0aGlzLnJlbmRlcmVyLnNldFByb3BlcnR5KHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LCAndmFsdWUnLCB2YWx1ZSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==