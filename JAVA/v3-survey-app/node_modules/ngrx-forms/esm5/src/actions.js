// NOTE: the explicit type declaration for the `TYPE` properties is required
// for the output declarations to properly use the literal string type instead
// of just `string`
var SetValueAction = /** @class */ (function () {
    function SetValueAction(controlId, value) {
        this.controlId = controlId;
        this.value = value;
        this.type = SetValueAction.TYPE;
    }
    SetValueAction.TYPE = 'ngrx/forms/SET_VALUE';
    return SetValueAction;
}());
export { SetValueAction };
var SetErrorsAction = /** @class */ (function () {
    function SetErrorsAction(controlId, errors) {
        this.controlId = controlId;
        this.errors = errors;
        this.type = SetErrorsAction.TYPE;
    }
    SetErrorsAction.TYPE = 'ngrx/forms/SET_ERRORS';
    return SetErrorsAction;
}());
export { SetErrorsAction };
var SetAsyncErrorAction = /** @class */ (function () {
    function SetAsyncErrorAction(controlId, name, value) {
        this.controlId = controlId;
        this.name = name;
        this.value = value;
        this.type = SetAsyncErrorAction.TYPE;
    }
    SetAsyncErrorAction.TYPE = 'ngrx/forms/SET_ASYNC_ERROR';
    return SetAsyncErrorAction;
}());
export { SetAsyncErrorAction };
var ClearAsyncErrorAction = /** @class */ (function () {
    function ClearAsyncErrorAction(controlId, name) {
        this.controlId = controlId;
        this.name = name;
        this.type = ClearAsyncErrorAction.TYPE;
    }
    ClearAsyncErrorAction.TYPE = 'ngrx/forms/CLEAR_ASYNC_ERROR';
    return ClearAsyncErrorAction;
}());
export { ClearAsyncErrorAction };
var StartAsyncValidationAction = /** @class */ (function () {
    function StartAsyncValidationAction(controlId, name) {
        this.controlId = controlId;
        this.name = name;
        this.type = StartAsyncValidationAction.TYPE;
    }
    StartAsyncValidationAction.TYPE = 'ngrx/forms/START_ASYNC_VALIDATION';
    return StartAsyncValidationAction;
}());
export { StartAsyncValidationAction };
var MarkAsDirtyAction = /** @class */ (function () {
    function MarkAsDirtyAction(controlId) {
        this.controlId = controlId;
        this.type = MarkAsDirtyAction.TYPE;
    }
    MarkAsDirtyAction.TYPE = 'ngrx/forms/MARK_AS_DIRTY';
    return MarkAsDirtyAction;
}());
export { MarkAsDirtyAction };
var MarkAsPristineAction = /** @class */ (function () {
    function MarkAsPristineAction(controlId) {
        this.controlId = controlId;
        this.type = MarkAsPristineAction.TYPE;
    }
    MarkAsPristineAction.TYPE = 'ngrx/forms/MARK_AS_PRISTINE';
    return MarkAsPristineAction;
}());
export { MarkAsPristineAction };
var EnableAction = /** @class */ (function () {
    function EnableAction(controlId) {
        this.controlId = controlId;
        this.type = EnableAction.TYPE;
    }
    EnableAction.TYPE = 'ngrx/forms/ENABLE';
    return EnableAction;
}());
export { EnableAction };
var DisableAction = /** @class */ (function () {
    function DisableAction(controlId) {
        this.controlId = controlId;
        this.type = DisableAction.TYPE;
    }
    DisableAction.TYPE = 'ngrx/forms/DISABLE';
    return DisableAction;
}());
export { DisableAction };
var MarkAsTouchedAction = /** @class */ (function () {
    function MarkAsTouchedAction(controlId) {
        this.controlId = controlId;
        this.type = MarkAsTouchedAction.TYPE;
    }
    MarkAsTouchedAction.TYPE = 'ngrx/forms/MARK_AS_TOUCHED';
    return MarkAsTouchedAction;
}());
export { MarkAsTouchedAction };
var MarkAsUntouchedAction = /** @class */ (function () {
    function MarkAsUntouchedAction(controlId) {
        this.controlId = controlId;
        this.type = MarkAsUntouchedAction.TYPE;
    }
    MarkAsUntouchedAction.TYPE = 'ngrx/forms/MARK_AS_UNTOUCHED';
    return MarkAsUntouchedAction;
}());
export { MarkAsUntouchedAction };
var FocusAction = /** @class */ (function () {
    function FocusAction(controlId) {
        this.controlId = controlId;
        this.type = FocusAction.TYPE;
    }
    FocusAction.TYPE = 'ngrx/forms/FOCUS';
    return FocusAction;
}());
export { FocusAction };
var UnfocusAction = /** @class */ (function () {
    function UnfocusAction(controlId) {
        this.controlId = controlId;
        this.type = UnfocusAction.TYPE;
    }
    UnfocusAction.TYPE = 'ngrx/forms/UNFOCUS';
    return UnfocusAction;
}());
export { UnfocusAction };
var MarkAsSubmittedAction = /** @class */ (function () {
    function MarkAsSubmittedAction(controlId) {
        this.controlId = controlId;
        this.type = MarkAsSubmittedAction.TYPE;
    }
    MarkAsSubmittedAction.TYPE = 'ngrx/forms/MARK_AS_SUBMITTED';
    return MarkAsSubmittedAction;
}());
export { MarkAsSubmittedAction };
var MarkAsUnsubmittedAction = /** @class */ (function () {
    function MarkAsUnsubmittedAction(controlId) {
        this.controlId = controlId;
        this.type = MarkAsUnsubmittedAction.TYPE;
    }
    MarkAsUnsubmittedAction.TYPE = 'ngrx/forms/MARK_AS_UNSUBMITTED';
    return MarkAsUnsubmittedAction;
}());
export { MarkAsUnsubmittedAction };
var AddArrayControlAction = /** @class */ (function () {
    function AddArrayControlAction(controlId, value, index) {
        this.controlId = controlId;
        this.value = value;
        this.index = index;
        this.type = AddArrayControlAction.TYPE;
    }
    AddArrayControlAction.TYPE = 'ngrx/forms/ADD_ARRAY_CONTROL';
    return AddArrayControlAction;
}());
export { AddArrayControlAction };
var AddGroupControlAction = /** @class */ (function () {
    function AddGroupControlAction(controlId, name, value) {
        this.controlId = controlId;
        this.name = name;
        this.value = value;
        this.type = AddGroupControlAction.TYPE;
    }
    AddGroupControlAction.TYPE = 'ngrx/forms/ADD_GROUP_CONTROL';
    return AddGroupControlAction;
}());
export { AddGroupControlAction };
var RemoveArrayControlAction = /** @class */ (function () {
    function RemoveArrayControlAction(controlId, index) {
        this.controlId = controlId;
        this.index = index;
        this.type = RemoveArrayControlAction.TYPE;
    }
    RemoveArrayControlAction.TYPE = 'ngrx/forms/REMOVE_ARRAY_CONTROL';
    return RemoveArrayControlAction;
}());
export { RemoveArrayControlAction };
var SwapArrayControlAction = /** @class */ (function () {
    function SwapArrayControlAction(controlId, fromIndex, toIndex) {
        this.controlId = controlId;
        this.fromIndex = fromIndex;
        this.toIndex = toIndex;
        this.type = SwapArrayControlAction.TYPE;
    }
    SwapArrayControlAction.TYPE = 'ngrx/forms/SWAP_ARRAY_CONTROL';
    return SwapArrayControlAction;
}());
export { SwapArrayControlAction };
var MoveArrayControlAction = /** @class */ (function () {
    function MoveArrayControlAction(controlId, fromIndex, toIndex) {
        this.controlId = controlId;
        this.fromIndex = fromIndex;
        this.toIndex = toIndex;
        this.type = MoveArrayControlAction.TYPE;
    }
    MoveArrayControlAction.TYPE = 'ngrx/forms/MOVE_ARRAY_CONTROL';
    return MoveArrayControlAction;
}());
export { MoveArrayControlAction };
var RemoveGroupControlAction = /** @class */ (function () {
    function RemoveGroupControlAction(controlId, name) {
        this.controlId = controlId;
        this.name = name;
        this.type = RemoveGroupControlAction.TYPE;
    }
    RemoveGroupControlAction.TYPE = 'ngrx/forms/REMOVE_CONTROL';
    return RemoveGroupControlAction;
}());
export { RemoveGroupControlAction };
var SetUserDefinedPropertyAction = /** @class */ (function () {
    function SetUserDefinedPropertyAction(controlId, name, value) {
        this.controlId = controlId;
        this.name = name;
        this.value = value;
        this.type = SetUserDefinedPropertyAction.TYPE;
    }
    SetUserDefinedPropertyAction.TYPE = 'ngrx/forms/SET_USER_DEFINED_PROPERTY';
    return SetUserDefinedPropertyAction;
}());
export { SetUserDefinedPropertyAction };
var ResetAction = /** @class */ (function () {
    function ResetAction(controlId) {
        this.controlId = controlId;
        this.type = ResetAction.TYPE;
    }
    ResetAction.TYPE = 'ngrx/forms/RESET';
    return ResetAction;
}());
export { ResetAction };
export function isNgrxFormsAction(action) {
    return !!action.type && action.type.startsWith('ngrx/forms/');
}
export var ALL_NGRX_FORMS_ACTION_TYPES = [
    SetValueAction.TYPE,
    SetErrorsAction.TYPE,
    SetAsyncErrorAction.TYPE,
    ClearAsyncErrorAction.TYPE,
    StartAsyncValidationAction.TYPE,
    MarkAsDirtyAction.TYPE,
    MarkAsPristineAction.TYPE,
    EnableAction.TYPE,
    DisableAction.TYPE,
    MarkAsTouchedAction.TYPE,
    MarkAsUntouchedAction.TYPE,
    FocusAction.TYPE,
    UnfocusAction.TYPE,
    MarkAsSubmittedAction.TYPE,
    MarkAsUnsubmittedAction.TYPE,
    AddGroupControlAction.TYPE,
    RemoveGroupControlAction.TYPE,
    AddArrayControlAction.TYPE,
    RemoveArrayControlAction.TYPE,
    SetUserDefinedPropertyAction.TYPE,
    ResetAction.TYPE,
    SwapArrayControlAction.TYPE,
    MoveArrayControlAction.TYPE,
];
//# sourceMappingURL=data:application/json;base64,