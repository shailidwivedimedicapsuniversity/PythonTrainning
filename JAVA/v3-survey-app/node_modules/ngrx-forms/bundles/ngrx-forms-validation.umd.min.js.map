{"version":3,"sources":["ng://ngrx-forms/validation/src/email.ts","ng://ngrx-forms/validation/src/equal-to.ts","ng://ngrx-forms/validation/src/greater-than.ts","ng://ngrx-forms/validation/src/greater-than-or-equal-to.ts","ng://ngrx-forms/validation/src/less-than.ts","ng://ngrx-forms/validation/src/less-than-or-equal-to.ts","ng://ngrx-forms/validation/src/max-length.ts","ng://ngrx-forms/validation/src/min-length.ts","ng://ngrx-forms/validation/src/not-equal-to.ts","ng://ngrx-forms/validation/src/pattern.ts","ng://ngrx-forms/validation/src/required.ts","ng://ngrx-forms/validation/src/required-false.ts","ng://ngrx-forms/validation/src/required-true.ts"],"names":["NGRX_FORMS_EMAIL_VALIDATION_REGEXP","value","unbox","undefined","length","test","email","pattern","toString","actual","comparand","equalTo","Error","greaterThan","greaterThanOrEqualTo","lessThan","lessThanOrEqualTo","maxLengthParam","maxLength","actualLength","minLengthParam","minLength","notEqualTo","patternParam","required"],"mappings":"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","sourcesContent":["import { Boxed, unbox, ValidationErrors } from 'ngrx-forms';\r\n\r\n// this regex is taken from the @angular/forms source code\r\n// tslint:disable-next-line:max-line-length\r\nexport const NGRX_FORMS_EMAIL_VALIDATION_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;\r\n\r\nexport interface EmailValidationError {\r\n  pattern: string;\r\n  actual: string;\r\n}\r\n\r\n// @ts-ignore\r\ndeclare module 'ngrx-forms/src/state' {\r\n  export interface ValidationErrors {\r\n    email?: EmailValidationError;\r\n  }\r\n}\r\n\r\n/**\r\n * A validation function that requires a value to be a valid e-mail address.\r\n * Considers `null`, `undefined`, and `''` as valid. Combine this function with the\r\n * `required` validation function if these values should be considered invalid.\r\n *\r\n * The validation error returned by this validation function has the following shape:\r\n *\r\n```typescript\r\n{\r\n  email: {\r\n    pattern: string;\r\n    actual: string;\r\n  };\r\n}\r\n```\r\n *\r\n * Usually you would use this validation function in conjunction with the `validate`\r\n * update function to perform synchronous validation in your reducer:\r\n *\r\n```typescript\r\nupdateGroup<MyFormValue>({\r\n  userMailAddress: validate(email),\r\n})\r\n```\r\n *\r\n * Note that this function is generic to allow the compiler to properly infer the type\r\n * of the `validate` function for both optional and non-optional controls.\r\n */\r\nexport function email<T extends string | Boxed<string> | null | undefined>(value: T): ValidationErrors {\r\n  value = unbox(value) as string | null | undefined as T;\r\n\r\n  if (value === null || value === undefined || (value as string).length === 0) {\r\n    return {};\r\n  }\r\n\r\n  if (NGRX_FORMS_EMAIL_VALIDATION_REGEXP.test(value as string)) {\r\n    return {};\r\n  }\r\n\r\n  return {\r\n    email: {\r\n      pattern: NGRX_FORMS_EMAIL_VALIDATION_REGEXP.toString(),\r\n      actual: value as string,\r\n    },\r\n  };\r\n}\r\n","import { Boxed, unbox, ValidationErrors } from 'ngrx-forms';\r\n\r\nexport interface EqualToValidationError<T> {\r\n  comparand: T;\r\n  actual: T;\r\n}\r\n\r\n// @ts-ignore\r\ndeclare module 'ngrx-forms/src/state' {\r\n  export interface ValidationErrors {\r\n    equalTo?: EqualToValidationError<any>;\r\n  }\r\n}\r\n\r\n/**\r\n * A validation function that requires the value to be strictly equal (i.e. `===`)\r\n * to another value.\r\n *\r\n * The validation error returned by this validation function has the following shape:\r\n *\r\n```typescript\r\n{\r\n  equalTo: {\r\n    comparand: T;\r\n    actual: T;\r\n  };\r\n}\r\n```\r\n *\r\n * Usually you would use this validation function in conjunction with the `validate`\r\n * update function to perform synchronous validation in your reducer:\r\n *\r\n```typescript\r\nupdateGroup<MyFormValue>({\r\n  name: validate(equalTo('John Doe')),\r\n})\r\n```\r\n */\r\nexport function equalTo<T>(comparand: T) {\r\n  return <TV extends T | Boxed<T> = T>(value: TV): ValidationErrors => {\r\n    value = unbox(value) as T as TV;\r\n\r\n    if (value === comparand) {\r\n      return {};\r\n    }\r\n\r\n    return {\r\n      equalTo: {\r\n        comparand,\r\n        actual: value,\r\n      },\r\n    };\r\n  };\r\n}\r\n","import { Boxed, unbox, ValidationErrors } from 'ngrx-forms';\r\n\r\nexport interface GreaterThanValidationError {\r\n  comparand: number;\r\n  actual: number;\r\n}\r\n\r\n// @ts-ignore\r\ndeclare module 'ngrx-forms/src/state' {\r\n  export interface ValidationErrors {\r\n    greaterThan?: GreaterThanValidationError;\r\n  }\r\n}\r\n\r\n/**\r\n * A validation function that requires the value to be greater than a number.\r\n * Considers `null` and `undefined` as valid. Combine this function with the `required`\r\n * validation function if `null` or `undefined` should be considered invalid.\r\n *\r\n * The validation error returned by this validation function has the following shape:\r\n *\r\n```typescript\r\n{\r\n  greaterThan: {\r\n    comparand: number;\r\n    actual: number;\r\n  };\r\n}\r\n```\r\n *\r\n * Usually you would use this validation function in conjunction with the `validate`\r\n * update function to perform synchronous validation in your reducer:\r\n *\r\n```typescript\r\nupdateGroup<MyFormValue>({\r\n  amount: validate(greaterThan(10)),\r\n})\r\n```\r\n *\r\n * Note that this function is generic to allow the compiler to properly infer the type\r\n * of the `validate` function for both optional and non-optional controls.\r\n */\r\nexport function greaterThan(comparand: number) {\r\n  // tslint:disable-next-line:strict-type-predicates (guard for users without strict type checking)\r\n  if (comparand === null || comparand === undefined) {\r\n    throw new Error(`The greaterThan Validation function requires the comparand parameter to be a non-null number, got ${comparand}!`);\r\n  }\r\n\r\n  return <T extends number | Boxed<number> | null | undefined>(value: T): ValidationErrors => {\r\n    value = unbox(value) as number | null | undefined as T;\r\n\r\n    if (value === null || value === undefined) {\r\n      return {};\r\n    }\r\n\r\n    if (value > comparand) {\r\n      return {};\r\n    }\r\n\r\n    return {\r\n      greaterThan: {\r\n        comparand,\r\n        actual: value as number,\r\n      },\r\n    };\r\n  };\r\n}\r\n","import { Boxed, unbox, ValidationErrors } from 'ngrx-forms';\r\n\r\nexport interface GreaterThanOrEqualToValidationError {\r\n  comparand: number;\r\n  actual: number;\r\n}\r\n\r\n// @ts-ignore\r\ndeclare module 'ngrx-forms/src/state' {\r\n  export interface ValidationErrors {\r\n    greaterThanOrEqualTo?: GreaterThanOrEqualToValidationError;\r\n  }\r\n}\r\n\r\n/**\r\n * A validation function that requires the value to be greater than or equal to a number.\r\n * Considers `null` and `undefined` as valid. Combine this function with the `required`\r\n * validation function if `null` or `undefined` should be considered invalid.\r\n *\r\n * The validation error returned by this validation function has the following shape:\r\n *\r\n```typescript\r\n{\r\n  greaterThanOrEqualTo: {\r\n    comparand: number;\r\n    actual: number;\r\n  };\r\n}\r\n```\r\n *\r\n * Usually you would use this validation function in conjunction with the `validate`\r\n * update function to perform synchronous validation in your reducer:\r\n *\r\n```typescript\r\nupdateGroup<MyFormValue>({\r\n  amount: validate(greaterThanOrEqualTo(10)),\r\n})\r\n```\r\n *\r\n * Note that this function is generic to allow the compiler to properly infer the type\r\n * of the `validate` function for both optional and non-optional controls.\r\n */\r\nexport function greaterThanOrEqualTo(comparand: number) {\r\n  // tslint:disable-next-line:strict-type-predicates (guard for users without strict type checking)\r\n  if (comparand === null || comparand === undefined) {\r\n    throw new Error(`The greaterThanOrEqualTo Validation function requires the comparand parameter to be a non-null number, got ${comparand}!`);\r\n  }\r\n\r\n  return <T extends number | Boxed<number> | null | undefined>(value: T): ValidationErrors => {\r\n    value = unbox(value) as number | null | undefined as T;\r\n\r\n    if (value === null || value === undefined) {\r\n      return {};\r\n    }\r\n\r\n    if (value >= comparand) {\r\n      return {};\r\n    }\r\n\r\n    return {\r\n      greaterThanOrEqualTo: {\r\n        comparand,\r\n        actual: value as number,\r\n      },\r\n    };\r\n  };\r\n}\r\n","import { Boxed, unbox, ValidationErrors } from 'ngrx-forms';\r\n\r\nexport interface LessThanValidationError {\r\n  comparand: number;\r\n  actual: number;\r\n}\r\n\r\n// @ts-ignore\r\ndeclare module 'ngrx-forms/src/state' {\r\n  export interface ValidationErrors {\r\n    lessThan?: LessThanValidationError;\r\n  }\r\n}\r\n\r\n/**\r\n * A validation function that requires the value to be less than a number.\r\n * Considers `null` and `undefined` as valid. Combine this function with the `required`\r\n * validation function if `null` or `undefined` should be considered invalid.\r\n *\r\n * The validation error returned by this validation function has the following shape:\r\n *\r\n```typescript\r\n{\r\n  lessThan: {\r\n    comparand: number;\r\n    actual: number;\r\n  };\r\n}\r\n```\r\n *\r\n * Usually you would use this validation function in conjunction with the `validate`\r\n * update function to perform synchronous validation in your reducer:\r\n *\r\n```typescript\r\nupdateGroup<MyFormValue>({\r\n  amount: validate(lessThan(10)),\r\n})\r\n```\r\n *\r\n * Note that this function is generic to allow the compiler to properly infer the type\r\n * of the `validate` function for both optional and non-optional controls.\r\n */\r\nexport function lessThan(comparand: number) {\r\n  // tslint:disable-next-line:strict-type-predicates (guard for users without strict type checking)\r\n  if (comparand === null || comparand === undefined) {\r\n    throw new Error(`The lessThan Validation function requires the comparand parameter to be a non-null number, got ${comparand}!`);\r\n  }\r\n\r\n  return <T extends number | Boxed<number> | null | undefined>(value: T): ValidationErrors => {\r\n    value = unbox(value) as number | null | undefined as T;\r\n\r\n    if (value === null || value === undefined) {\r\n      return {};\r\n    }\r\n\r\n    if (value < comparand) {\r\n      return {};\r\n    }\r\n\r\n    return {\r\n      lessThan: {\r\n        comparand,\r\n        actual: value as number,\r\n      },\r\n    };\r\n  };\r\n}\r\n","import { Boxed, unbox, ValidationErrors } from 'ngrx-forms';\r\n\r\nexport interface LessThanOrEqualToValidationError {\r\n  comparand: number;\r\n  actual: number;\r\n}\r\n\r\n// @ts-ignore\r\ndeclare module 'ngrx-forms/src/state' {\r\n  export interface ValidationErrors {\r\n    lessThanOrEqualTo?: LessThanOrEqualToValidationError;\r\n  }\r\n}\r\n\r\n/**\r\n * A validation function that requires the value to be less than or equal to a number.\r\n * Considers `null` and `undefined` as valid. Combine this function with the `required`\r\n * validation function if `null` or `undefined` should be considered invalid.\r\n *\r\n * The validation error returned by this validation function has the following shape:\r\n *\r\n```typescript\r\n{\r\n  lessThanOrEqualTo: {\r\n    comparand: number;\r\n    actual: number;\r\n  };\r\n}\r\n```\r\n *\r\n * Usually you would use this validation function in conjunction with the `validate`\r\n * update function to perform synchronous validation in your reducer:\r\n *\r\n```typescript\r\nupdateGroup<MyFormValue>({\r\n  amount: validate(lessThanOrEqualTo(10)),\r\n})\r\n```\r\n *\r\n * Note that this function is generic to allow the compiler to properly infer the type\r\n * of the `validate` function for both optional and non-optional controls.\r\n */\r\nexport function lessThanOrEqualTo(comparand: number) {\r\n  // tslint:disable-next-line:strict-type-predicates (guard for users without strict type checking)\r\n  if (comparand === null || comparand === undefined) {\r\n    throw new Error(`The lessThanOrEqualTo Validation function requires the comparand parameter to be a non-null number, got ${comparand}!`);\r\n  }\r\n\r\n  return <T extends number | Boxed<number> | null | undefined>(value: T): ValidationErrors => {\r\n    value = unbox(value) as number | null | undefined as T;\r\n\r\n    if (value === null || value === undefined) {\r\n      return {};\r\n    }\r\n\r\n    if (value <= comparand) {\r\n      return {};\r\n    }\r\n\r\n    return {\r\n      lessThanOrEqualTo: {\r\n        comparand,\r\n        actual: value as number,\r\n      },\r\n    };\r\n  };\r\n}\r\n","import { Boxed, unbox, ValidationErrors } from 'ngrx-forms';\r\n\r\nexport interface MaxLengthValidationError {\r\n  maxLength: number;\r\n  value: string;\r\n  actualLength: number;\r\n}\r\n\r\n// @ts-ignore\r\ndeclare module 'ngrx-forms/src/state' {\r\n  export interface ValidationErrors {\r\n    maxLength?: MaxLengthValidationError;\r\n  }\r\n}\r\n\r\n/**\r\n * A validation function that requires a `string` or `array` value to have a maximum length.\r\n * Considers `null` and `undefined` as valid. Combine this function with the `required`\r\n * validation function if `null` or `undefined` should be considered invalid.\r\n *\r\n * The validation error returned by this validation function has the following shape:\r\n *\r\n```typescript\r\n{\r\n  maxLength: {\r\n    maxLength: number;\r\n    value: string;\r\n    actualLength: number;\r\n  };\r\n}\r\n```\r\n *\r\n * Usually you would use this validation function in conjunction with the `validate`\r\n * update function to perform synchronous validation in your reducer:\r\n *\r\n```typescript\r\nupdateGroup<MyFormValue>({\r\n  name: validate(maxLength(10)),\r\n})\r\n```\r\n *\r\n * Note that this function is generic to allow the compiler to properly infer the type\r\n * of the `validate` function for both optional and non-optional controls.\r\n */\r\nexport function maxLength(maxLengthParam: number) {\r\n  // tslint:disable-next-line:strict-type-predicates (guard for users without strict type checking)\r\n  if (maxLengthParam === null || maxLengthParam === undefined) {\r\n    throw new Error(`The maxLength Validation function requires the maxLength parameter to be a non-null number, got ${maxLengthParam}!`);\r\n  }\r\n\r\n  return <T extends string | Boxed<string> | any[] | Boxed<any[]> | null | undefined>(value: T): ValidationErrors => {\r\n    value = unbox(value);\r\n\r\n    if (value === null || value === undefined) {\r\n      return {};\r\n    }\r\n\r\n    const length = (value as string | any[]).length;\r\n\r\n    if (length <= maxLengthParam) {\r\n      return {};\r\n    }\r\n\r\n    return {\r\n      maxLength: {\r\n        maxLength: maxLengthParam,\r\n        value: value as string,\r\n        actualLength: length,\r\n      },\r\n    };\r\n  };\r\n}\r\n","import { Boxed, unbox, ValidationErrors } from 'ngrx-forms';\r\n\r\nexport interface MinLengthValidationError {\r\n  minLength: number;\r\n  value: string;\r\n  actualLength: number;\r\n}\r\n\r\n// @ts-ignore\r\ndeclare module 'ngrx-forms/src/state' {\r\n  export interface ValidationErrors {\r\n    minLength?: MinLengthValidationError;\r\n  }\r\n}\r\n\r\n/**\r\n * A validation function that requires a `string` or `array` value to have a minimum length.\r\n * Considers `null`, `undefined`, empty strings and empty arrays as valid. Combine this\r\n * function with the `required` validation function if these values should be considered invalid.\r\n *\r\n * The validation error returned by this validation function has the following shape:\r\n *\r\n```typescript\r\n{\r\n  minLength: {\r\n    minLength: number;\r\n    value: string;\r\n    actualLength: number;\r\n  };\r\n}\r\n```\r\n *\r\n * Usually you would use this validation function in conjunction with the `validate`\r\n * update function to perform synchronous validation in your reducer:\r\n *\r\n```typescript\r\nupdateGroup<MyFormValue>({\r\n  password: validate(minLength(8)),\r\n})\r\n```\r\n *\r\n * Note that this function is generic to allow the compiler to properly infer the type\r\n * of the `validate` function for both optional and non-optional controls.\r\n */\r\nexport function minLength(minLengthParam: number) {\r\n  // tslint:disable-next-line:strict-type-predicates (guard for users without strict type checking)\r\n  if (minLengthParam === null || minLengthParam === undefined) {\r\n    throw new Error(`The minLength Validation function requires the minLength parameter to be a non-null number, got ${minLengthParam}!`);\r\n  }\r\n\r\n  return <T extends string | Boxed<string> | any[] | Boxed<any[]> | null | undefined>(value: T): ValidationErrors => {\r\n    value = unbox(value);\r\n\r\n    if (value === null || value === undefined) {\r\n      return {};\r\n    }\r\n\r\n    const length = (value as string | any[]).length;\r\n\r\n    if (length === 0) {\r\n      return {}; // don't validate empty values to allow optional controls\r\n    }\r\n\r\n    if (length >= minLengthParam) {\r\n      return {};\r\n    }\r\n\r\n    return {\r\n      minLength: {\r\n        minLength: minLengthParam,\r\n        value: value as string,\r\n        actualLength: length,\r\n      },\r\n    };\r\n  };\r\n}\r\n","import { Boxed, unbox, ValidationErrors } from 'ngrx-forms';\r\n\r\nexport interface NotEqualToValidationError<T> {\r\n  comparand: T;\r\n  actual: T;\r\n}\r\n\r\n// @ts-ignore\r\ndeclare module 'ngrx-forms/src/state' {\r\n  export interface ValidationErrors {\r\n    notEqualTo?: NotEqualToValidationError<any>;\r\n  }\r\n}\r\n\r\n/**\r\n * A validation function that requires the value to be strictly not equal (i.e. `!==`)\r\n * to another value.\r\n *\r\n * The validation error returned by this validation function has the following shape:\r\n *\r\n```typescript\r\n{\r\n  notEqualTo: {\r\n    comparand: T;\r\n    actual: T;\r\n  };\r\n}\r\n```\r\n *\r\n * Usually you would use this validation function in conjunction with the `validate`\r\n * update function to perform synchronous validation in your reducer:\r\n *\r\n```typescript\r\nupdateGroup<MyFormValue>({\r\n  name: validate(notEqualTo('John Doe')),\r\n})\r\n```\r\n */\r\nexport function notEqualTo<T>(comparand: T) {\r\n  return <TV extends T | Boxed<T> = T>(value: TV): ValidationErrors => {\r\n    value = unbox(value) as T as TV;\r\n\r\n    if (value !== comparand) {\r\n      return {};\r\n    }\r\n\r\n    return {\r\n      notEqualTo: {\r\n        comparand,\r\n        actual: value,\r\n      },\r\n    };\r\n  };\r\n}\r\n","import { Boxed, unbox, ValidationErrors } from 'ngrx-forms';\r\n\r\nexport interface PatternValidationError {\r\n  pattern: string;\r\n  actual: string;\r\n}\r\n\r\n// @ts-ignore\r\ndeclare module 'ngrx-forms/src/state' {\r\n  export interface ValidationErrors {\r\n    pattern?: PatternValidationError;\r\n  }\r\n}\r\n\r\n/**\r\n * A validation function that requires a value to match a regex.\r\n * Considers `null`, `undefined`, and `''` as valid. Combine this function with the\r\n * `required` validation function if these values should be considered invalid.\r\n *\r\n * The validation error returned by this validation function has the following shape:\r\n *\r\n```typescript\r\n{\r\n  pattern: {\r\n    pattern: string;\r\n    actual: string;\r\n  };\r\n}\r\n```\r\n *\r\n * Usually you would use this validation function in conjunction with the `validate`\r\n * update function to perform synchronous validation in your reducer:\r\n *\r\n```typescript\r\nupdateGroup<MyFormValue>({\r\n  numberWithPeriodsOrCommas: validate(pattern(/^[0-9.,]+$/)),\r\n})\r\n```\r\n *\r\n * Note that this function is generic to allow the compiler to properly infer the type\r\n * of the `validate` function for both optional and non-optional controls.\r\n */\r\nexport function pattern(patternParam: RegExp) {\r\n  // tslint:disable-next-line:strict-type-predicates (guard for users without strict type checking)\r\n  if (patternParam === null || patternParam === undefined) {\r\n    throw new Error(`The pattern Validation function requires the pattern parameter to be a non-null string or regular expression, got ${patternParam}!`);\r\n  }\r\n\r\n  return <T extends string | Boxed<string> | null | undefined>(value: T): ValidationErrors => {\r\n    value = unbox(value) as string | null | undefined as T;\r\n\r\n    if (value === null || value === undefined || (value as string).length === 0) {\r\n      return {};\r\n    }\r\n\r\n    if (patternParam.test(value as string)) {\r\n      return {};\r\n    }\r\n\r\n    return {\r\n      pattern: {\r\n        pattern: patternParam.toString(),\r\n        actual: value as string,\r\n      },\r\n    };\r\n  };\r\n}\r\n","import { Boxed, unbox, ValidationErrors } from 'ngrx-forms';\r\n\r\nexport interface RequiredValidationError<T> {\r\n  actual: T | null | undefined;\r\n}\r\n\r\n// @ts-ignore\r\ndeclare module 'ngrx-forms/src/state' {\r\n  export interface ValidationErrors {\r\n    required?: RequiredValidationError<any>;\r\n  }\r\n}\r\n\r\n/**\r\n * A validation function that requires the value to be non-`undefined`, non-'null',\r\n * and non-empty.\r\n *\r\n * The validation error returned by this validation function has the following shape:\r\n *\r\n```typescript\r\n{\r\n  required: {\r\n    actual: T | null | undefined;\r\n  };\r\n}\r\n```\r\n *\r\n * Usually you would use this validation function in conjunction with the `validate`\r\n * update function to perform synchronous validation in your reducer:\r\n *\r\n```typescript\r\nupdateGroup<MyFormValue>({\r\n  name: validate(required),\r\n})\r\n```\r\n */\r\nexport function required<T>(value: T | Boxed<T> | null | undefined): ValidationErrors {\r\n  value = unbox(value) as T | null | undefined;\r\n\r\n  if (value !== undefined && value !== null && (value as any).length !== 0) {\r\n    return {};\r\n  }\r\n\r\n  return {\r\n    required: {\r\n      actual: value,\r\n    },\r\n  };\r\n}\r\n","import { Boxed, unbox, ValidationErrors } from 'ngrx-forms';\r\n\r\n/**\r\n * A validation function that requires the value to be `false`. Considers `null` and\r\n * `undefined` as valid. Combine this function with the `required` validation\r\n * function if `null` or `undefined` should be considered invalid.\r\n *\r\n * The validation error returned by this validation function has the following shape:\r\n *\r\n```typescript\r\n{\r\n  required: {\r\n    actual: boolean;\r\n  };\r\n}\r\n```\r\n *\r\n * Usually you would use this validation function in conjunction with the `validate`\r\n * update function to perform synchronous validation in your reducer:\r\n *\r\n```typescript\r\nupdateGroup<MyFormValue>({\r\n  disagreeWithTermsOfService: validate(requiredFalse),\r\n})\r\n```\r\n *\r\n * Note that this function is generic to allow the compiler to properly infer the type\r\n * of the `validate` function for both optional and non-optional controls.\r\n */\r\nexport function requiredFalse<T extends boolean | Boxed<boolean> | null | undefined>(value: T): ValidationErrors {\r\n  value = unbox(value) as boolean | null | undefined as T;\r\n\r\n  // tslint:disable-next-line:strict-type-predicates\r\n  if (value === null || value === undefined) {\r\n    return {};\r\n  }\r\n\r\n  if (!value) {\r\n    return {};\r\n  }\r\n\r\n  return {\r\n    required: {\r\n      actual: value,\r\n    },\r\n  };\r\n}\r\n","import { Boxed, unbox, ValidationErrors } from 'ngrx-forms';\r\n\r\n/**\r\n * A validation function that requires the value to be `true`. Considers `null` and\r\n * `undefined` as valid. Combine this function with the `required` validation\r\n * function if `null` or `undefined` should be considered invalid.\r\n *\r\n * The validation error returned by this validation function has the following shape:\r\n *\r\n```typescript\r\n{\r\n  required: {\r\n    actual: boolean;\r\n  };\r\n}\r\n```\r\n *\r\n * Usually you would use this validation function in conjunction with the `validate`\r\n * update function to perform synchronous validation in your reducer:\r\n *\r\n```typescript\r\nupdateGroup<MyFormValue>({\r\n  agreeWithTermsOfService: validate(requiredTrue),\r\n})\r\n```\r\n *\r\n * Note that this function is generic to allow the compiler to properly infer the type\r\n * of the `validate` function for both optional and non-optional controls.\r\n */\r\nexport function requiredTrue<T extends boolean | Boxed<boolean> | null | undefined>(value: T): ValidationErrors {\r\n  value = unbox(value) as boolean | null | undefined as T;\r\n\r\n  // tslint:disable-next-line:strict-type-predicates\r\n  if (value === null || value === undefined) {\r\n    return {};\r\n  }\r\n\r\n  if (value) {\r\n    return {};\r\n  }\r\n\r\n  return {\r\n    required: {\r\n      actual: value,\r\n    },\r\n  };\r\n}\r\n"]}