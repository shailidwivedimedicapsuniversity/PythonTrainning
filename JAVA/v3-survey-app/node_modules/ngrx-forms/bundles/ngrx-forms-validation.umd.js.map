{"version":3,"file":"ngrx-forms-validation.umd.js","sources":["ng://ngrx-forms/validation/src/email.ts","ng://ngrx-forms/validation/src/equal-to.ts","ng://ngrx-forms/validation/src/greater-than.ts","ng://ngrx-forms/validation/src/greater-than-or-equal-to.ts","ng://ngrx-forms/validation/src/less-than.ts","ng://ngrx-forms/validation/src/less-than-or-equal-to.ts","ng://ngrx-forms/validation/src/max-length.ts","ng://ngrx-forms/validation/src/min-length.ts","ng://ngrx-forms/validation/src/not-equal-to.ts","ng://ngrx-forms/validation/src/pattern.ts","ng://ngrx-forms/validation/src/required.ts","ng://ngrx-forms/validation/src/required-false.ts","ng://ngrx-forms/validation/src/required-true.ts"],"sourcesContent":["import { Boxed, unbox, ValidationErrors } from 'ngrx-forms';\r\n\r\n// this regex is taken from the @angular/forms source code\r\n// tslint:disable-next-line:max-line-length\r\nexport const NGRX_FORMS_EMAIL_VALIDATION_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;\r\n\r\nexport interface EmailValidationError {\r\n  pattern: string;\r\n  actual: string;\r\n}\r\n\r\n// @ts-ignore\r\ndeclare module 'ngrx-forms/src/state' {\r\n  export interface ValidationErrors {\r\n    email?: EmailValidationError;\r\n  }\r\n}\r\n\r\n/**\r\n * A validation function that requires a value to be a valid e-mail address.\r\n * Considers `null`, `undefined`, and `''` as valid. Combine this function with the\r\n * `required` validation function if these values should be considered invalid.\r\n *\r\n * The validation error returned by this validation function has the following shape:\r\n *\r\n```typescript\r\n{\r\n  email: {\r\n    pattern: string;\r\n    actual: string;\r\n  };\r\n}\r\n```\r\n *\r\n * Usually you would use this validation function in conjunction with the `validate`\r\n * update function to perform synchronous validation in your reducer:\r\n *\r\n```typescript\r\nupdateGroup<MyFormValue>({\r\n  userMailAddress: validate(email),\r\n})\r\n```\r\n *\r\n * Note that this function is generic to allow the compiler to properly infer the type\r\n * of the `validate` function for both optional and non-optional controls.\r\n */\r\nexport function email<T extends string | Boxed<string> | null | undefined>(value: T): ValidationErrors {\r\n  value = unbox(value) as string | null | undefined as T;\r\n\r\n  if (value === null || value === undefined || (value as string).length === 0) {\r\n    return {};\r\n  }\r\n\r\n  if (NGRX_FORMS_EMAIL_VALIDATION_REGEXP.test(value as string)) {\r\n    return {};\r\n  }\r\n\r\n  return {\r\n    email: {\r\n      pattern: NGRX_FORMS_EMAIL_VALIDATION_REGEXP.toString(),\r\n      actual: value as string,\r\n    },\r\n  };\r\n}\r\n","import { Boxed, unbox, ValidationErrors } from 'ngrx-forms';\r\n\r\nexport interface EqualToValidationError<T> {\r\n  comparand: T;\r\n  actual: T;\r\n}\r\n\r\n// @ts-ignore\r\ndeclare module 'ngrx-forms/src/state' {\r\n  export interface ValidationErrors {\r\n    equalTo?: EqualToValidationError<any>;\r\n  }\r\n}\r\n\r\n/**\r\n * A validation function that requires the value to be strictly equal (i.e. `===`)\r\n * to another value.\r\n *\r\n * The validation error returned by this validation function has the following shape:\r\n *\r\n```typescript\r\n{\r\n  equalTo: {\r\n    comparand: T;\r\n    actual: T;\r\n  };\r\n}\r\n```\r\n *\r\n * Usually you would use this validation function in conjunction with the `validate`\r\n * update function to perform synchronous validation in your reducer:\r\n *\r\n```typescript\r\nupdateGroup<MyFormValue>({\r\n  name: validate(equalTo('John Doe')),\r\n})\r\n```\r\n */\r\nexport function equalTo<T>(comparand: T) {\r\n  return <TV extends T | Boxed<T> = T>(value: TV): ValidationErrors => {\r\n    value = unbox(value) as T as TV;\r\n\r\n    if (value === comparand) {\r\n      return {};\r\n    }\r\n\r\n    return {\r\n      equalTo: {\r\n        comparand,\r\n        actual: value,\r\n      },\r\n    };\r\n  };\r\n}\r\n","import { Boxed, unbox, ValidationErrors } from 'ngrx-forms';\r\n\r\nexport interface GreaterThanValidationError {\r\n  comparand: number;\r\n  actual: number;\r\n}\r\n\r\n// @ts-ignore\r\ndeclare module 'ngrx-forms/src/state' {\r\n  export interface ValidationErrors {\r\n    greaterThan?: GreaterThanValidationError;\r\n  }\r\n}\r\n\r\n/**\r\n * A validation function that requires the value to be greater than a number.\r\n * Considers `null` and `undefined` as valid. Combine this function with the `required`\r\n * validation function if `null` or `undefined` should be considered invalid.\r\n *\r\n * The validation error returned by this validation function has the following shape:\r\n *\r\n```typescript\r\n{\r\n  greaterThan: {\r\n    comparand: number;\r\n    actual: number;\r\n  };\r\n}\r\n```\r\n *\r\n * Usually you would use this validation function in conjunction with the `validate`\r\n * update function to perform synchronous validation in your reducer:\r\n *\r\n```typescript\r\nupdateGroup<MyFormValue>({\r\n  amount: validate(greaterThan(10)),\r\n})\r\n```\r\n *\r\n * Note that this function is generic to allow the compiler to properly infer the type\r\n * of the `validate` function for both optional and non-optional controls.\r\n */\r\nexport function greaterThan(comparand: number) {\r\n  // tslint:disable-next-line:strict-type-predicates (guard for users without strict type checking)\r\n  if (comparand === null || comparand === undefined) {\r\n    throw new Error(`The greaterThan Validation function requires the comparand parameter to be a non-null number, got ${comparand}!`);\r\n  }\r\n\r\n  return <T extends number | Boxed<number> | null | undefined>(value: T): ValidationErrors => {\r\n    value = unbox(value) as number | null | undefined as T;\r\n\r\n    if (value === null || value === undefined) {\r\n      return {};\r\n    }\r\n\r\n    if (value > comparand) {\r\n      return {};\r\n    }\r\n\r\n    return {\r\n      greaterThan: {\r\n        comparand,\r\n        actual: value as number,\r\n      },\r\n    };\r\n  };\r\n}\r\n","import { Boxed, unbox, ValidationErrors } from 'ngrx-forms';\r\n\r\nexport interface GreaterThanOrEqualToValidationError {\r\n  comparand: number;\r\n  actual: number;\r\n}\r\n\r\n// @ts-ignore\r\ndeclare module 'ngrx-forms/src/state' {\r\n  export interface ValidationErrors {\r\n    greaterThanOrEqualTo?: GreaterThanOrEqualToValidationError;\r\n  }\r\n}\r\n\r\n/**\r\n * A validation function that requires the value to be greater than or equal to a number.\r\n * Considers `null` and `undefined` as valid. Combine this function with the `required`\r\n * validation function if `null` or `undefined` should be considered invalid.\r\n *\r\n * The validation error returned by this validation function has the following shape:\r\n *\r\n```typescript\r\n{\r\n  greaterThanOrEqualTo: {\r\n    comparand: number;\r\n    actual: number;\r\n  };\r\n}\r\n```\r\n *\r\n * Usually you would use this validation function in conjunction with the `validate`\r\n * update function to perform synchronous validation in your reducer:\r\n *\r\n```typescript\r\nupdateGroup<MyFormValue>({\r\n  amount: validate(greaterThanOrEqualTo(10)),\r\n})\r\n```\r\n *\r\n * Note that this function is generic to allow the compiler to properly infer the type\r\n * of the `validate` function for both optional and non-optional controls.\r\n */\r\nexport function greaterThanOrEqualTo(comparand: number) {\r\n  // tslint:disable-next-line:strict-type-predicates (guard for users without strict type checking)\r\n  if (comparand === null || comparand === undefined) {\r\n    throw new Error(`The greaterThanOrEqualTo Validation function requires the comparand parameter to be a non-null number, got ${comparand}!`);\r\n  }\r\n\r\n  return <T extends number | Boxed<number> | null | undefined>(value: T): ValidationErrors => {\r\n    value = unbox(value) as number | null | undefined as T;\r\n\r\n    if (value === null || value === undefined) {\r\n      return {};\r\n    }\r\n\r\n    if (value >= comparand) {\r\n      return {};\r\n    }\r\n\r\n    return {\r\n      greaterThanOrEqualTo: {\r\n        comparand,\r\n        actual: value as number,\r\n      },\r\n    };\r\n  };\r\n}\r\n","import { Boxed, unbox, ValidationErrors } from 'ngrx-forms';\r\n\r\nexport interface LessThanValidationError {\r\n  comparand: number;\r\n  actual: number;\r\n}\r\n\r\n// @ts-ignore\r\ndeclare module 'ngrx-forms/src/state' {\r\n  export interface ValidationErrors {\r\n    lessThan?: LessThanValidationError;\r\n  }\r\n}\r\n\r\n/**\r\n * A validation function that requires the value to be less than a number.\r\n * Considers `null` and `undefined` as valid. Combine this function with the `required`\r\n * validation function if `null` or `undefined` should be considered invalid.\r\n *\r\n * The validation error returned by this validation function has the following shape:\r\n *\r\n```typescript\r\n{\r\n  lessThan: {\r\n    comparand: number;\r\n    actual: number;\r\n  };\r\n}\r\n```\r\n *\r\n * Usually you would use this validation function in conjunction with the `validate`\r\n * update function to perform synchronous validation in your reducer:\r\n *\r\n```typescript\r\nupdateGroup<MyFormValue>({\r\n  amount: validate(lessThan(10)),\r\n})\r\n```\r\n *\r\n * Note that this function is generic to allow the compiler to properly infer the type\r\n * of the `validate` function for both optional and non-optional controls.\r\n */\r\nexport function lessThan(comparand: number) {\r\n  // tslint:disable-next-line:strict-type-predicates (guard for users without strict type checking)\r\n  if (comparand === null || comparand === undefined) {\r\n    throw new Error(`The lessThan Validation function requires the comparand parameter to be a non-null number, got ${comparand}!`);\r\n  }\r\n\r\n  return <T extends number | Boxed<number> | null | undefined>(value: T): ValidationErrors => {\r\n    value = unbox(value) as number | null | undefined as T;\r\n\r\n    if (value === null || value === undefined) {\r\n      return {};\r\n    }\r\n\r\n    if (value < comparand) {\r\n      return {};\r\n    }\r\n\r\n    return {\r\n      lessThan: {\r\n        comparand,\r\n        actual: value as number,\r\n      },\r\n    };\r\n  };\r\n}\r\n","import { Boxed, unbox, ValidationErrors } from 'ngrx-forms';\r\n\r\nexport interface LessThanOrEqualToValidationError {\r\n  comparand: number;\r\n  actual: number;\r\n}\r\n\r\n// @ts-ignore\r\ndeclare module 'ngrx-forms/src/state' {\r\n  export interface ValidationErrors {\r\n    lessThanOrEqualTo?: LessThanOrEqualToValidationError;\r\n  }\r\n}\r\n\r\n/**\r\n * A validation function that requires the value to be less than or equal to a number.\r\n * Considers `null` and `undefined` as valid. Combine this function with the `required`\r\n * validation function if `null` or `undefined` should be considered invalid.\r\n *\r\n * The validation error returned by this validation function has the following shape:\r\n *\r\n```typescript\r\n{\r\n  lessThanOrEqualTo: {\r\n    comparand: number;\r\n    actual: number;\r\n  };\r\n}\r\n```\r\n *\r\n * Usually you would use this validation function in conjunction with the `validate`\r\n * update function to perform synchronous validation in your reducer:\r\n *\r\n```typescript\r\nupdateGroup<MyFormValue>({\r\n  amount: validate(lessThanOrEqualTo(10)),\r\n})\r\n```\r\n *\r\n * Note that this function is generic to allow the compiler to properly infer the type\r\n * of the `validate` function for both optional and non-optional controls.\r\n */\r\nexport function lessThanOrEqualTo(comparand: number) {\r\n  // tslint:disable-next-line:strict-type-predicates (guard for users without strict type checking)\r\n  if (comparand === null || comparand === undefined) {\r\n    throw new Error(`The lessThanOrEqualTo Validation function requires the comparand parameter to be a non-null number, got ${comparand}!`);\r\n  }\r\n\r\n  return <T extends number | Boxed<number> | null | undefined>(value: T): ValidationErrors => {\r\n    value = unbox(value) as number | null | undefined as T;\r\n\r\n    if (value === null || value === undefined) {\r\n      return {};\r\n    }\r\n\r\n    if (value <= comparand) {\r\n      return {};\r\n    }\r\n\r\n    return {\r\n      lessThanOrEqualTo: {\r\n        comparand,\r\n        actual: value as number,\r\n      },\r\n    };\r\n  };\r\n}\r\n","import { Boxed, unbox, ValidationErrors } from 'ngrx-forms';\r\n\r\nexport interface MaxLengthValidationError {\r\n  maxLength: number;\r\n  value: string;\r\n  actualLength: number;\r\n}\r\n\r\n// @ts-ignore\r\ndeclare module 'ngrx-forms/src/state' {\r\n  export interface ValidationErrors {\r\n    maxLength?: MaxLengthValidationError;\r\n  }\r\n}\r\n\r\n/**\r\n * A validation function that requires a `string` or `array` value to have a maximum length.\r\n * Considers `null` and `undefined` as valid. Combine this function with the `required`\r\n * validation function if `null` or `undefined` should be considered invalid.\r\n *\r\n * The validation error returned by this validation function has the following shape:\r\n *\r\n```typescript\r\n{\r\n  maxLength: {\r\n    maxLength: number;\r\n    value: string;\r\n    actualLength: number;\r\n  };\r\n}\r\n```\r\n *\r\n * Usually you would use this validation function in conjunction with the `validate`\r\n * update function to perform synchronous validation in your reducer:\r\n *\r\n```typescript\r\nupdateGroup<MyFormValue>({\r\n  name: validate(maxLength(10)),\r\n})\r\n```\r\n *\r\n * Note that this function is generic to allow the compiler to properly infer the type\r\n * of the `validate` function for both optional and non-optional controls.\r\n */\r\nexport function maxLength(maxLengthParam: number) {\r\n  // tslint:disable-next-line:strict-type-predicates (guard for users without strict type checking)\r\n  if (maxLengthParam === null || maxLengthParam === undefined) {\r\n    throw new Error(`The maxLength Validation function requires the maxLength parameter to be a non-null number, got ${maxLengthParam}!`);\r\n  }\r\n\r\n  return <T extends string | Boxed<string> | any[] | Boxed<any[]> | null | undefined>(value: T): ValidationErrors => {\r\n    value = unbox(value);\r\n\r\n    if (value === null || value === undefined) {\r\n      return {};\r\n    }\r\n\r\n    const length = (value as string | any[]).length;\r\n\r\n    if (length <= maxLengthParam) {\r\n      return {};\r\n    }\r\n\r\n    return {\r\n      maxLength: {\r\n        maxLength: maxLengthParam,\r\n        value: value as string,\r\n        actualLength: length,\r\n      },\r\n    };\r\n  };\r\n}\r\n","import { Boxed, unbox, ValidationErrors } from 'ngrx-forms';\r\n\r\nexport interface MinLengthValidationError {\r\n  minLength: number;\r\n  value: string;\r\n  actualLength: number;\r\n}\r\n\r\n// @ts-ignore\r\ndeclare module 'ngrx-forms/src/state' {\r\n  export interface ValidationErrors {\r\n    minLength?: MinLengthValidationError;\r\n  }\r\n}\r\n\r\n/**\r\n * A validation function that requires a `string` or `array` value to have a minimum length.\r\n * Considers `null`, `undefined`, empty strings and empty arrays as valid. Combine this\r\n * function with the `required` validation function if these values should be considered invalid.\r\n *\r\n * The validation error returned by this validation function has the following shape:\r\n *\r\n```typescript\r\n{\r\n  minLength: {\r\n    minLength: number;\r\n    value: string;\r\n    actualLength: number;\r\n  };\r\n}\r\n```\r\n *\r\n * Usually you would use this validation function in conjunction with the `validate`\r\n * update function to perform synchronous validation in your reducer:\r\n *\r\n```typescript\r\nupdateGroup<MyFormValue>({\r\n  password: validate(minLength(8)),\r\n})\r\n```\r\n *\r\n * Note that this function is generic to allow the compiler to properly infer the type\r\n * of the `validate` function for both optional and non-optional controls.\r\n */\r\nexport function minLength(minLengthParam: number) {\r\n  // tslint:disable-next-line:strict-type-predicates (guard for users without strict type checking)\r\n  if (minLengthParam === null || minLengthParam === undefined) {\r\n    throw new Error(`The minLength Validation function requires the minLength parameter to be a non-null number, got ${minLengthParam}!`);\r\n  }\r\n\r\n  return <T extends string | Boxed<string> | any[] | Boxed<any[]> | null | undefined>(value: T): ValidationErrors => {\r\n    value = unbox(value);\r\n\r\n    if (value === null || value === undefined) {\r\n      return {};\r\n    }\r\n\r\n    const length = (value as string | any[]).length;\r\n\r\n    if (length === 0) {\r\n      return {}; // don't validate empty values to allow optional controls\r\n    }\r\n\r\n    if (length >= minLengthParam) {\r\n      return {};\r\n    }\r\n\r\n    return {\r\n      minLength: {\r\n        minLength: minLengthParam,\r\n        value: value as string,\r\n        actualLength: length,\r\n      },\r\n    };\r\n  };\r\n}\r\n","import { Boxed, unbox, ValidationErrors } from 'ngrx-forms';\r\n\r\nexport interface NotEqualToValidationError<T> {\r\n  comparand: T;\r\n  actual: T;\r\n}\r\n\r\n// @ts-ignore\r\ndeclare module 'ngrx-forms/src/state' {\r\n  export interface ValidationErrors {\r\n    notEqualTo?: NotEqualToValidationError<any>;\r\n  }\r\n}\r\n\r\n/**\r\n * A validation function that requires the value to be strictly not equal (i.e. `!==`)\r\n * to another value.\r\n *\r\n * The validation error returned by this validation function has the following shape:\r\n *\r\n```typescript\r\n{\r\n  notEqualTo: {\r\n    comparand: T;\r\n    actual: T;\r\n  };\r\n}\r\n```\r\n *\r\n * Usually you would use this validation function in conjunction with the `validate`\r\n * update function to perform synchronous validation in your reducer:\r\n *\r\n```typescript\r\nupdateGroup<MyFormValue>({\r\n  name: validate(notEqualTo('John Doe')),\r\n})\r\n```\r\n */\r\nexport function notEqualTo<T>(comparand: T) {\r\n  return <TV extends T | Boxed<T> = T>(value: TV): ValidationErrors => {\r\n    value = unbox(value) as T as TV;\r\n\r\n    if (value !== comparand) {\r\n      return {};\r\n    }\r\n\r\n    return {\r\n      notEqualTo: {\r\n        comparand,\r\n        actual: value,\r\n      },\r\n    };\r\n  };\r\n}\r\n","import { Boxed, unbox, ValidationErrors } from 'ngrx-forms';\r\n\r\nexport interface PatternValidationError {\r\n  pattern: string;\r\n  actual: string;\r\n}\r\n\r\n// @ts-ignore\r\ndeclare module 'ngrx-forms/src/state' {\r\n  export interface ValidationErrors {\r\n    pattern?: PatternValidationError;\r\n  }\r\n}\r\n\r\n/**\r\n * A validation function that requires a value to match a regex.\r\n * Considers `null`, `undefined`, and `''` as valid. Combine this function with the\r\n * `required` validation function if these values should be considered invalid.\r\n *\r\n * The validation error returned by this validation function has the following shape:\r\n *\r\n```typescript\r\n{\r\n  pattern: {\r\n    pattern: string;\r\n    actual: string;\r\n  };\r\n}\r\n```\r\n *\r\n * Usually you would use this validation function in conjunction with the `validate`\r\n * update function to perform synchronous validation in your reducer:\r\n *\r\n```typescript\r\nupdateGroup<MyFormValue>({\r\n  numberWithPeriodsOrCommas: validate(pattern(/^[0-9.,]+$/)),\r\n})\r\n```\r\n *\r\n * Note that this function is generic to allow the compiler to properly infer the type\r\n * of the `validate` function for both optional and non-optional controls.\r\n */\r\nexport function pattern(patternParam: RegExp) {\r\n  // tslint:disable-next-line:strict-type-predicates (guard for users without strict type checking)\r\n  if (patternParam === null || patternParam === undefined) {\r\n    throw new Error(`The pattern Validation function requires the pattern parameter to be a non-null string or regular expression, got ${patternParam}!`);\r\n  }\r\n\r\n  return <T extends string | Boxed<string> | null | undefined>(value: T): ValidationErrors => {\r\n    value = unbox(value) as string | null | undefined as T;\r\n\r\n    if (value === null || value === undefined || (value as string).length === 0) {\r\n      return {};\r\n    }\r\n\r\n    if (patternParam.test(value as string)) {\r\n      return {};\r\n    }\r\n\r\n    return {\r\n      pattern: {\r\n        pattern: patternParam.toString(),\r\n        actual: value as string,\r\n      },\r\n    };\r\n  };\r\n}\r\n","import { Boxed, unbox, ValidationErrors } from 'ngrx-forms';\r\n\r\nexport interface RequiredValidationError<T> {\r\n  actual: T | null | undefined;\r\n}\r\n\r\n// @ts-ignore\r\ndeclare module 'ngrx-forms/src/state' {\r\n  export interface ValidationErrors {\r\n    required?: RequiredValidationError<any>;\r\n  }\r\n}\r\n\r\n/**\r\n * A validation function that requires the value to be non-`undefined`, non-'null',\r\n * and non-empty.\r\n *\r\n * The validation error returned by this validation function has the following shape:\r\n *\r\n```typescript\r\n{\r\n  required: {\r\n    actual: T | null | undefined;\r\n  };\r\n}\r\n```\r\n *\r\n * Usually you would use this validation function in conjunction with the `validate`\r\n * update function to perform synchronous validation in your reducer:\r\n *\r\n```typescript\r\nupdateGroup<MyFormValue>({\r\n  name: validate(required),\r\n})\r\n```\r\n */\r\nexport function required<T>(value: T | Boxed<T> | null | undefined): ValidationErrors {\r\n  value = unbox(value) as T | null | undefined;\r\n\r\n  if (value !== undefined && value !== null && (value as any).length !== 0) {\r\n    return {};\r\n  }\r\n\r\n  return {\r\n    required: {\r\n      actual: value,\r\n    },\r\n  };\r\n}\r\n","import { Boxed, unbox, ValidationErrors } from 'ngrx-forms';\r\n\r\n/**\r\n * A validation function that requires the value to be `false`. Considers `null` and\r\n * `undefined` as valid. Combine this function with the `required` validation\r\n * function if `null` or `undefined` should be considered invalid.\r\n *\r\n * The validation error returned by this validation function has the following shape:\r\n *\r\n```typescript\r\n{\r\n  required: {\r\n    actual: boolean;\r\n  };\r\n}\r\n```\r\n *\r\n * Usually you would use this validation function in conjunction with the `validate`\r\n * update function to perform synchronous validation in your reducer:\r\n *\r\n```typescript\r\nupdateGroup<MyFormValue>({\r\n  disagreeWithTermsOfService: validate(requiredFalse),\r\n})\r\n```\r\n *\r\n * Note that this function is generic to allow the compiler to properly infer the type\r\n * of the `validate` function for both optional and non-optional controls.\r\n */\r\nexport function requiredFalse<T extends boolean | Boxed<boolean> | null | undefined>(value: T): ValidationErrors {\r\n  value = unbox(value) as boolean | null | undefined as T;\r\n\r\n  // tslint:disable-next-line:strict-type-predicates\r\n  if (value === null || value === undefined) {\r\n    return {};\r\n  }\r\n\r\n  if (!value) {\r\n    return {};\r\n  }\r\n\r\n  return {\r\n    required: {\r\n      actual: value,\r\n    },\r\n  };\r\n}\r\n","import { Boxed, unbox, ValidationErrors } from 'ngrx-forms';\r\n\r\n/**\r\n * A validation function that requires the value to be `true`. Considers `null` and\r\n * `undefined` as valid. Combine this function with the `required` validation\r\n * function if `null` or `undefined` should be considered invalid.\r\n *\r\n * The validation error returned by this validation function has the following shape:\r\n *\r\n```typescript\r\n{\r\n  required: {\r\n    actual: boolean;\r\n  };\r\n}\r\n```\r\n *\r\n * Usually you would use this validation function in conjunction with the `validate`\r\n * update function to perform synchronous validation in your reducer:\r\n *\r\n```typescript\r\nupdateGroup<MyFormValue>({\r\n  agreeWithTermsOfService: validate(requiredTrue),\r\n})\r\n```\r\n *\r\n * Note that this function is generic to allow the compiler to properly infer the type\r\n * of the `validate` function for both optional and non-optional controls.\r\n */\r\nexport function requiredTrue<T extends boolean | Boxed<boolean> | null | undefined>(value: T): ValidationErrors {\r\n  value = unbox(value) as boolean | null | undefined as T;\r\n\r\n  // tslint:disable-next-line:strict-type-predicates\r\n  if (value === null || value === undefined) {\r\n    return {};\r\n  }\r\n\r\n  if (value) {\r\n    return {};\r\n  }\r\n\r\n  return {\r\n    required: {\r\n      actual: value,\r\n    },\r\n  };\r\n}\r\n"],"names":["unbox"],"mappings":"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"}