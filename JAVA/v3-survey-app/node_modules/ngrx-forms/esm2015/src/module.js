import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { NgrxFormControlDirective } from './control/directive';
import { NgrxLocalFormControlDirective } from './control/local-state-directive';
import { NgrxFormDirective } from './group/directive';
import { NgrxLocalFormDirective } from './group/local-state-directive';
import { NgrxStatusCssClassesDirective } from './status-css-classes.directive';
import { NgrxCheckboxViewAdapter } from './view-adapter/checkbox';
import { NgrxDefaultViewAdapter } from './view-adapter/default';
import { NgrxNumberViewAdapter } from './view-adapter/number';
import { NgrxFallbackSelectOption } from './view-adapter/option';
import { NgrxRadioViewAdapter } from './view-adapter/radio';
import { NgrxRangeViewAdapter } from './view-adapter/range';
import { NgrxSelectOption, NgrxSelectViewAdapter } from './view-adapter/select';
import { NgrxSelectMultipleOption, NgrxSelectMultipleViewAdapter } from './view-adapter/select-multiple';
const exportsAndDeclarations = [
    NgrxFormControlDirective,
    NgrxLocalFormControlDirective,
    NgrxFormDirective,
    NgrxLocalFormDirective,
    NgrxCheckboxViewAdapter,
    NgrxDefaultViewAdapter,
    NgrxNumberViewAdapter,
    NgrxRadioViewAdapter,
    NgrxRangeViewAdapter,
    NgrxSelectMultipleOption,
    NgrxSelectMultipleViewAdapter,
    NgrxSelectOption,
    NgrxSelectViewAdapter,
    NgrxFallbackSelectOption,
    NgrxStatusCssClassesDirective,
];
let NgrxFormsModule = class NgrxFormsModule {
};
NgrxFormsModule = tslib_1.__decorate([
    NgModule({
        declarations: exportsAndDeclarations,
        exports: exportsAndDeclarations,
    })
], NgrxFormsModule);
export { NgrxFormsModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmdyeC1mb3Jtcy8iLCJzb3VyY2VzIjpbInNyYy9tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFekMsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDL0QsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDaEYsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdEQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDdkUsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDL0UsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDbEUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDaEUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDOUQsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDakUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDNUQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLHFCQUFxQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDaEYsT0FBTyxFQUFFLHdCQUF3QixFQUFFLDZCQUE2QixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFekcsTUFBTSxzQkFBc0IsR0FBRztJQUM3Qix3QkFBd0I7SUFDeEIsNkJBQTZCO0lBQzdCLGlCQUFpQjtJQUNqQixzQkFBc0I7SUFDdEIsdUJBQXVCO0lBQ3ZCLHNCQUFzQjtJQUN0QixxQkFBcUI7SUFDckIsb0JBQW9CO0lBQ3BCLG9CQUFvQjtJQUNwQix3QkFBd0I7SUFDeEIsNkJBQTZCO0lBQzdCLGdCQUFnQjtJQUNoQixxQkFBcUI7SUFDckIsd0JBQXdCO0lBQ3hCLDZCQUE2QjtDQUM5QixDQUFDO0FBTUYsSUFBYSxlQUFlLEdBQTVCLE1BQWEsZUFBZTtDQUFJLENBQUE7QUFBbkIsZUFBZTtJQUozQixRQUFRLENBQUM7UUFDUixZQUFZLEVBQUUsc0JBQXNCO1FBQ3BDLE9BQU8sRUFBRSxzQkFBc0I7S0FDaEMsQ0FBQztHQUNXLGVBQWUsQ0FBSTtTQUFuQixlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IE5ncnhGb3JtQ29udHJvbERpcmVjdGl2ZSB9IGZyb20gJy4vY29udHJvbC9kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBOZ3J4TG9jYWxGb3JtQ29udHJvbERpcmVjdGl2ZSB9IGZyb20gJy4vY29udHJvbC9sb2NhbC1zdGF0ZS1kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBOZ3J4Rm9ybURpcmVjdGl2ZSB9IGZyb20gJy4vZ3JvdXAvZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgTmdyeExvY2FsRm9ybURpcmVjdGl2ZSB9IGZyb20gJy4vZ3JvdXAvbG9jYWwtc3RhdGUtZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgTmdyeFN0YXR1c0Nzc0NsYXNzZXNEaXJlY3RpdmUgfSBmcm9tICcuL3N0YXR1cy1jc3MtY2xhc3Nlcy5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBOZ3J4Q2hlY2tib3hWaWV3QWRhcHRlciB9IGZyb20gJy4vdmlldy1hZGFwdGVyL2NoZWNrYm94JztcclxuaW1wb3J0IHsgTmdyeERlZmF1bHRWaWV3QWRhcHRlciB9IGZyb20gJy4vdmlldy1hZGFwdGVyL2RlZmF1bHQnO1xyXG5pbXBvcnQgeyBOZ3J4TnVtYmVyVmlld0FkYXB0ZXIgfSBmcm9tICcuL3ZpZXctYWRhcHRlci9udW1iZXInO1xyXG5pbXBvcnQgeyBOZ3J4RmFsbGJhY2tTZWxlY3RPcHRpb24gfSBmcm9tICcuL3ZpZXctYWRhcHRlci9vcHRpb24nO1xyXG5pbXBvcnQgeyBOZ3J4UmFkaW9WaWV3QWRhcHRlciB9IGZyb20gJy4vdmlldy1hZGFwdGVyL3JhZGlvJztcclxuaW1wb3J0IHsgTmdyeFJhbmdlVmlld0FkYXB0ZXIgfSBmcm9tICcuL3ZpZXctYWRhcHRlci9yYW5nZSc7XHJcbmltcG9ydCB7IE5ncnhTZWxlY3RPcHRpb24sIE5ncnhTZWxlY3RWaWV3QWRhcHRlciB9IGZyb20gJy4vdmlldy1hZGFwdGVyL3NlbGVjdCc7XHJcbmltcG9ydCB7IE5ncnhTZWxlY3RNdWx0aXBsZU9wdGlvbiwgTmdyeFNlbGVjdE11bHRpcGxlVmlld0FkYXB0ZXIgfSBmcm9tICcuL3ZpZXctYWRhcHRlci9zZWxlY3QtbXVsdGlwbGUnO1xyXG5cclxuY29uc3QgZXhwb3J0c0FuZERlY2xhcmF0aW9ucyA9IFtcclxuICBOZ3J4Rm9ybUNvbnRyb2xEaXJlY3RpdmUsXHJcbiAgTmdyeExvY2FsRm9ybUNvbnRyb2xEaXJlY3RpdmUsXHJcbiAgTmdyeEZvcm1EaXJlY3RpdmUsXHJcbiAgTmdyeExvY2FsRm9ybURpcmVjdGl2ZSxcclxuICBOZ3J4Q2hlY2tib3hWaWV3QWRhcHRlcixcclxuICBOZ3J4RGVmYXVsdFZpZXdBZGFwdGVyLFxyXG4gIE5ncnhOdW1iZXJWaWV3QWRhcHRlcixcclxuICBOZ3J4UmFkaW9WaWV3QWRhcHRlcixcclxuICBOZ3J4UmFuZ2VWaWV3QWRhcHRlcixcclxuICBOZ3J4U2VsZWN0TXVsdGlwbGVPcHRpb24sXHJcbiAgTmdyeFNlbGVjdE11bHRpcGxlVmlld0FkYXB0ZXIsXHJcbiAgTmdyeFNlbGVjdE9wdGlvbixcclxuICBOZ3J4U2VsZWN0Vmlld0FkYXB0ZXIsXHJcbiAgTmdyeEZhbGxiYWNrU2VsZWN0T3B0aW9uLFxyXG4gIE5ncnhTdGF0dXNDc3NDbGFzc2VzRGlyZWN0aXZlLFxyXG5dO1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IGV4cG9ydHNBbmREZWNsYXJhdGlvbnMsXHJcbiAgZXhwb3J0czogZXhwb3J0c0FuZERlY2xhcmF0aW9ucyxcclxufSlcclxuZXhwb3J0IGNsYXNzIE5ncnhGb3Jtc01vZHVsZSB7IH1cclxuIl19