import * as tslib_1 from "tslib";
import { Directive, HostListener, Inject, Input, Optional } from '@angular/core';
import { ActionsSubject } from '@ngrx/store';
import { MarkAsSubmittedAction } from '../actions';
let NgrxFormDirective = class NgrxFormDirective {
    constructor(actionsSubject) {
        this.actionsSubject = actionsSubject;
        this.actionsSubject = actionsSubject;
    }
    dispatchAction(action) {
        if (this.actionsSubject !== null) {
            this.actionsSubject.next(action);
        }
        else {
            throw new Error('ActionsSubject must be present in order to dispatch actions!');
        }
    }
    ngOnInit() {
        if (!this.state) {
            throw new Error('The form state must not be undefined!');
        }
    }
    onSubmit(event) {
        event.preventDefault();
        if (this.state.isUnsubmitted) {
            this.dispatchAction(new MarkAsSubmittedAction(this.state.id));
        }
    }
};
tslib_1.__decorate([
    Input('ngrxFormState'),
    tslib_1.__metadata("design:type", Object)
], NgrxFormDirective.prototype, "state", void 0);
tslib_1.__decorate([
    HostListener('submit', ['$event']),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", void 0)
], NgrxFormDirective.prototype, "onSubmit", null);
NgrxFormDirective = tslib_1.__decorate([
    Directive({
        // tslint:disable-next-line:directive-selector
        selector: 'form:not([ngrxFormsAction])[ngrxFormState]',
    }),
    tslib_1.__param(0, Optional()), tslib_1.__param(0, Inject(ActionsSubject)),
    tslib_1.__metadata("design:paramtypes", [Object])
], NgrxFormDirective);
export { NgrxFormDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmdyeC1mb3Jtcy8iLCJzb3VyY2VzIjpbInNyYy9ncm91cC9kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQVUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFN0MsT0FBTyxFQUFXLHFCQUFxQixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBWTVELElBQWEsaUJBQWlCLEdBQTlCLE1BQWEsaUJBQWlCO0lBSTVCLFlBQzhDLGNBQXFDO1FBQXJDLG1CQUFjLEdBQWQsY0FBYyxDQUF1QjtRQUVqRixJQUFJLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQztJQUN2QyxDQUFDO0lBRVMsY0FBYyxDQUFDLE1BQXVCO1FBQzlDLElBQUksSUFBSSxDQUFDLGNBQWMsS0FBSyxJQUFJLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDbEM7YUFBTTtZQUNMLE1BQU0sSUFBSSxLQUFLLENBQUMsOERBQThELENBQUMsQ0FBQztTQUNqRjtJQUNILENBQUM7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZixNQUFNLElBQUksS0FBSyxDQUFDLHVDQUF1QyxDQUFDLENBQUM7U0FDMUQ7SUFDSCxDQUFDO0lBR0QsUUFBUSxDQUFDLEtBQWtCO1FBQ3pCLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN2QixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFO1lBQzVCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDL0Q7SUFDSCxDQUFDO0NBQ0YsQ0FBQTtBQTdCeUI7SUFBdkIsS0FBSyxDQUFDLGVBQWUsQ0FBQzs7Z0RBQStCO0FBdUJ0RDtJQURDLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQzs7OztpREFNbEM7QUE5QlUsaUJBQWlCO0lBSjdCLFNBQVMsQ0FBQztRQUNULDhDQUE4QztRQUM5QyxRQUFRLEVBQUUsNENBQTRDO0tBQ3ZELENBQUM7SUFNRyxtQkFBQSxRQUFRLEVBQUUsQ0FBQSxFQUFFLG1CQUFBLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQTs7R0FMMUIsaUJBQWlCLENBK0I3QjtTQS9CWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEhvc3RMaXN0ZW5lciwgSW5qZWN0LCBJbnB1dCwgT25Jbml0LCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBBY3Rpb25zU3ViamVjdCB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcclxuXHJcbmltcG9ydCB7IEFjdGlvbnMsIE1hcmtBc1N1Ym1pdHRlZEFjdGlvbiB9IGZyb20gJy4uL2FjdGlvbnMnO1xyXG5pbXBvcnQgeyBGb3JtR3JvdXBTdGF0ZSB9IGZyb20gJy4uL3N0YXRlJztcclxuXHJcbi8vIHRoaXMgaW50ZXJmYWNlIGp1c3QgZXhpc3RzIHRvIHByZXZlbnQgYSBkaXJlY3QgcmVmZXJlbmNlIHRvXHJcbi8vIGBFdmVudGAgaW4gb3VyIGNvZGUsIHdoaWNoIG90aGVyd2lzZSBjYXVzZXMgaXNzdWVzIGluIE5hdGl2ZVNjcmlwdFxyXG4vLyBhcHBsaWNhdGlvbnNcclxuaW50ZXJmYWNlIEN1c3RvbUV2ZW50IGV4dGVuZHMgRXZlbnQgeyB9XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yXHJcbiAgc2VsZWN0b3I6ICdmb3JtOm5vdChbbmdyeEZvcm1zQWN0aW9uXSlbbmdyeEZvcm1TdGF0ZV0nLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdyeEZvcm1EaXJlY3RpdmU8VFZhbHVlIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBhbnkgfT4gaW1wbGVtZW50cyBPbkluaXQge1xyXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1pbnB1dC1yZW5hbWVcclxuICBASW5wdXQoJ25ncnhGb3JtU3RhdGUnKSBzdGF0ZTogRm9ybUdyb3VwU3RhdGU8VFZhbHVlPjtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBAT3B0aW9uYWwoKSBASW5qZWN0KEFjdGlvbnNTdWJqZWN0KSBwcml2YXRlIGFjdGlvbnNTdWJqZWN0OiBBY3Rpb25zU3ViamVjdCB8IG51bGxcclxuICApIHtcclxuICAgIHRoaXMuYWN0aW9uc1N1YmplY3QgPSBhY3Rpb25zU3ViamVjdDtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBkaXNwYXRjaEFjdGlvbihhY3Rpb246IEFjdGlvbnM8VFZhbHVlPikge1xyXG4gICAgaWYgKHRoaXMuYWN0aW9uc1N1YmplY3QgIT09IG51bGwpIHtcclxuICAgICAgdGhpcy5hY3Rpb25zU3ViamVjdC5uZXh0KGFjdGlvbik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbnNTdWJqZWN0IG11c3QgYmUgcHJlc2VudCBpbiBvcmRlciB0byBkaXNwYXRjaCBhY3Rpb25zIScpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICBpZiAoIXRoaXMuc3RhdGUpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgZm9ybSBzdGF0ZSBtdXN0IG5vdCBiZSB1bmRlZmluZWQhJyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBASG9zdExpc3RlbmVyKCdzdWJtaXQnLCBbJyRldmVudCddKVxyXG4gIG9uU3VibWl0KGV2ZW50OiBDdXN0b21FdmVudCkge1xyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIGlmICh0aGlzLnN0YXRlLmlzVW5zdWJtaXR0ZWQpIHtcclxuICAgICAgdGhpcy5kaXNwYXRjaEFjdGlvbihuZXcgTWFya0FzU3VibWl0dGVkQWN0aW9uKHRoaXMuc3RhdGUuaWQpKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19