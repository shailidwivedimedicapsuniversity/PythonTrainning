import * as tslib_1 from "tslib";
var NgrxSelectMultipleViewAdapter_1;
import { Directive, ElementRef, forwardRef, Host, HostListener, Input, Optional, Renderer2, } from '@angular/core';
import { NGRX_FORM_VIEW_ADAPTER } from './view-adapter';
// tslint:disable:directive-class-suffix
let NgrxSelectMultipleViewAdapter = NgrxSelectMultipleViewAdapter_1 = class NgrxSelectMultipleViewAdapter {
    constructor(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.options = {};
        this.optionValues = {};
        this.idCounter = 0;
        this.selectedIds = [];
        this.nativeIdWasSet = false;
        this.onChangeFn = () => void 0;
        this.onTouched = () => void 0;
    }
    set ngrxFormControlState(value) {
        if (!value) {
            throw new Error('The control state must not be undefined!');
        }
        this.state = value;
        const nativeId = this.elementRef.nativeElement.id;
        const shouldSetNativeId = value.id !== nativeId && this.nativeIdWasSet;
        if (shouldSetNativeId) {
            this.renderer.setProperty(this.elementRef.nativeElement, 'id', value.id);
        }
    }
    ngAfterViewInit() {
        const nativeId = this.elementRef.nativeElement.id;
        const shouldSetNativeId = this.state.id !== nativeId && !nativeId;
        if (shouldSetNativeId) {
            this.renderer.setProperty(this.elementRef.nativeElement, 'id', this.state.id);
            this.nativeIdWasSet = true;
        }
    }
    setViewValue(value) {
        if (value === null) {
            value = [];
        }
        if (!Array.isArray(value)) {
            throw new Error(`the value provided to a NgrxSelectMultipleViewAdapter must be null or an array; got ${value} of type ${typeof value}`); // `
        }
        this.selectedIds = value.map(v => this.getOptionId(v)).filter(id => id !== null).map(id => id);
        Object.keys(this.options).forEach(id => this.options[id].isSelected = this.selectedIds.indexOf(id) >= 0);
    }
    onChange() {
        this.selectedIds = Object.keys(this.options).filter(id => this.options[id].isSelected);
        const value = this.selectedIds.map(id => this.optionValues[id]);
        this.onChangeFn(value);
    }
    setOnChangeCallback(fn) {
        this.onChangeFn = fn;
    }
    setOnTouchedCallback(fn) {
        this.onTouched = fn;
    }
    setIsDisabled(isDisabled) {
        this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);
    }
    registerOption(option) {
        const id = this.idCounter.toString();
        this.options[id] = option;
        this.idCounter += 1;
        return id;
    }
    updateOptionValue(id, value) {
        this.optionValues[id] = value;
        if (this.selectedIds.indexOf(id) >= 0) {
            this.onChange();
        }
    }
    deregisterOption(id) {
        delete this.options[id];
        delete this.optionValues[id];
    }
    getOptionId(value) {
        for (const id of Array.from(Object.keys(this.optionValues))) {
            if (this.optionValues[id] === value) {
                return id;
            }
        }
        return null;
    }
};
tslib_1.__decorate([
    HostListener('blur'),
    tslib_1.__metadata("design:type", Function)
], NgrxSelectMultipleViewAdapter.prototype, "onTouched", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], NgrxSelectMultipleViewAdapter.prototype, "ngrxFormControlState", null);
tslib_1.__decorate([
    HostListener('change'),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], NgrxSelectMultipleViewAdapter.prototype, "onChange", null);
NgrxSelectMultipleViewAdapter = NgrxSelectMultipleViewAdapter_1 = tslib_1.__decorate([
    Directive({
        // tslint:disable-next-line:directive-selector
        selector: 'select[multiple][ngrxFormControlState]',
        providers: [{
                provide: NGRX_FORM_VIEW_ADAPTER,
                useExisting: forwardRef(() => NgrxSelectMultipleViewAdapter_1),
                multi: true,
            }],
    }),
    tslib_1.__metadata("design:paramtypes", [Renderer2, ElementRef])
], NgrxSelectMultipleViewAdapter);
export { NgrxSelectMultipleViewAdapter };
const ɵ0 = () => '', ɵ1 = () => void 0, ɵ2 = () => void 0;
const NULL_VIEW_ADAPTER = {
    registerOption: ɵ0,
    deregisterOption: ɵ1,
    updateOptionValue: ɵ2,
};
const ɵ3 = () => void 0;
const NULL_RENDERER = {
    setProperty: ɵ3,
};
let NgrxSelectMultipleOption = class NgrxSelectMultipleOption {
    constructor(element, renderer, viewAdapter) {
        this.element = element;
        this.renderer = renderer;
        this.viewAdapter = viewAdapter;
        this.renderer = viewAdapter ? renderer : NULL_RENDERER;
        this.viewAdapter = viewAdapter || NULL_VIEW_ADAPTER;
        this.id = this.viewAdapter.registerOption(this);
    }
    set value(value) {
        this.viewAdapter.updateOptionValue(this.id, value);
    }
    set isSelected(selected) {
        this.renderer.setProperty(this.element.nativeElement, 'selected', selected);
    }
    get isSelected() {
        return this.element.nativeElement.selected;
    }
    ngOnInit() {
        this.renderer.setProperty(this.element.nativeElement, 'value', this.id);
    }
    ngOnDestroy() {
        this.viewAdapter.deregisterOption(this.id);
    }
};
tslib_1.__decorate([
    Input('value'),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], NgrxSelectMultipleOption.prototype, "value", null);
NgrxSelectMultipleOption = tslib_1.__decorate([
    Directive({
        // tslint:disable-next-line:directive-selector
        selector: 'option',
    }),
    tslib_1.__param(2, Host()), tslib_1.__param(2, Optional()),
    tslib_1.__metadata("design:paramtypes", [ElementRef,
        Renderer2,
        NgrxSelectMultipleViewAdapter])
], NgrxSelectMultipleOption);
export { NgrxSelectMultipleOption };
export { ɵ0, ɵ1, ɵ2, ɵ3 };
//# sourceMappingURL=data:application/json;base64,