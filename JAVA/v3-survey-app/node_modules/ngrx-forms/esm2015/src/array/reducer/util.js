import { formStateReducer } from '../../reducer';
import { computeArrayState, isArrayState, isGroupState } from '../../state';
export function dispatchActionPerChild(controls, actionCreator) {
    let hasChanged = false;
    const newControls = controls
        .map(state => {
        const newState = formStateReducer(state, actionCreator(state.id));
        hasChanged = hasChanged || state !== newState;
        return newState;
    });
    return hasChanged ? newControls : controls;
}
function callChildReducers(controls, action) {
    let hasChanged = false;
    const newControls = controls
        .map(state => {
        const newState = formStateReducer(state, action);
        hasChanged = hasChanged || state !== newState;
        return newState;
    });
    return hasChanged ? newControls : controls;
}
export function childReducer(state, action) {
    const controls = callChildReducers(state.controls, action);
    if (state.controls === controls) {
        return state;
    }
    return computeArrayState(state.id, controls, state.value, state.errors, state.pendingValidations, state.userDefinedProperties, {
        wasOrShouldBeDirty: state.isDirty,
        wasOrShouldBeEnabled: state.isEnabled,
        wasOrShouldBeTouched: state.isTouched,
        wasOrShouldBeSubmitted: state.isSubmitted,
    });
}
export function updateIdRecursiveForGroup(state, newId) {
    const controls = Object.keys(state.controls)
        .reduce((agg, key) => Object.assign(agg, {
        [key]: updateIdRecursive(state.controls[key], `${newId}.${key}`),
    }), {});
    return Object.assign({}, state, { id: newId, controls });
}
export function updateIdRecursiveForArray(state, newId) {
    const controls = state.controls.map((c, i) => updateIdRecursive(c, `${newId}.${i}`));
    return Object.assign({}, state, { id: newId, controls });
}
export function updateIdRecursive(state, newId) {
    if (state.id === newId) {
        return state;
    }
    if (isGroupState(state)) {
        return updateIdRecursiveForGroup(state, newId);
    }
    if (isArrayState(state)) {
        return updateIdRecursiveForArray(state, newId);
    }
    return Object.assign({}, state, { id: newId });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25ncngtZm9ybXMvIiwic291cmNlcyI6WyJzcmMvYXJyYXkvcmVkdWNlci91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRCxPQUFPLEVBQUUsaUJBQWlCLEVBQWdFLFlBQVksRUFBRSxZQUFZLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFMUksTUFBTSxVQUFVLHNCQUFzQixDQUNwQyxRQUFzQyxFQUN0QyxhQUFxRDtJQUVyRCxJQUFJLFVBQVUsR0FBRyxLQUFLLENBQUM7SUFDdkIsTUFBTSxXQUFXLEdBQUcsUUFBUTtTQUN6QixHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDWCxNQUFNLFFBQVEsR0FBRyxnQkFBZ0IsQ0FBUyxLQUFLLEVBQUUsYUFBYSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzFFLFVBQVUsR0FBRyxVQUFVLElBQUksS0FBSyxLQUFLLFFBQVEsQ0FBQztRQUM5QyxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDLENBQUMsQ0FBQztJQUVMLE9BQU8sVUFBVSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztBQUM3QyxDQUFDO0FBRUQsU0FBUyxpQkFBaUIsQ0FDeEIsUUFBc0MsRUFDdEMsTUFBeUI7SUFFekIsSUFBSSxVQUFVLEdBQUcsS0FBSyxDQUFDO0lBQ3ZCLE1BQU0sV0FBVyxHQUFHLFFBQVE7U0FDekIsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ1gsTUFBTSxRQUFRLEdBQUcsZ0JBQWdCLENBQVMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3pELFVBQVUsR0FBRyxVQUFVLElBQUksS0FBSyxLQUFLLFFBQVEsQ0FBQztRQUM5QyxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDLENBQUMsQ0FBQztJQUVMLE9BQU8sVUFBVSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztBQUM3QyxDQUFDO0FBRUQsTUFBTSxVQUFVLFlBQVksQ0FBUyxLQUE2QixFQUFFLE1BQXlCO0lBQzNGLE1BQU0sUUFBUSxHQUFHLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFFM0QsSUFBSSxLQUFLLENBQUMsUUFBUSxLQUFLLFFBQVEsRUFBRTtRQUMvQixPQUFPLEtBQUssQ0FBQztLQUNkO0lBRUQsT0FBTyxpQkFBaUIsQ0FDdEIsS0FBSyxDQUFDLEVBQUUsRUFDUixRQUFRLEVBQ1IsS0FBSyxDQUFDLEtBQUssRUFDWCxLQUFLLENBQUMsTUFBTSxFQUNaLEtBQUssQ0FBQyxrQkFBa0IsRUFDeEIsS0FBSyxDQUFDLHFCQUFxQixFQUMzQjtRQUNFLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxPQUFPO1FBQ2pDLG9CQUFvQixFQUFFLEtBQUssQ0FBQyxTQUFTO1FBQ3JDLG9CQUFvQixFQUFFLEtBQUssQ0FBQyxTQUFTO1FBQ3JDLHNCQUFzQixFQUFFLEtBQUssQ0FBQyxXQUFXO0tBQzFDLENBQ0YsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLFVBQVUseUJBQXlCLENBQVMsS0FBNkIsRUFBRSxLQUFhO0lBQzVGLE1BQU0sUUFBUSxHQUNaLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQztTQUN4QixNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUN2QyxDQUFDLEdBQUcsQ0FBQyxFQUFFLGlCQUFpQixDQUF1QixLQUFLLENBQUMsUUFBUSxDQUFDLEdBQW1CLENBQUMsRUFBRSxHQUFHLEtBQUssSUFBSSxHQUFHLEVBQUUsQ0FBQztLQUN2RyxDQUFDLEVBQUUsRUFBK0IsQ0FBQyxDQUFDO0lBRXpDLHlCQUNLLEtBQUssSUFDUixFQUFFLEVBQUUsS0FBSyxFQUNULFFBQVEsSUFDUjtBQUNKLENBQUM7QUFFRCxNQUFNLFVBQVUseUJBQXlCLENBQVMsS0FBNkIsRUFBRSxLQUFhO0lBQzVGLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxFQUFFLEdBQUcsS0FBSyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUVyRix5QkFDSyxLQUFLLElBQ1IsRUFBRSxFQUFFLEtBQUssRUFDVCxRQUFRLElBQ1I7QUFDSixDQUFDO0FBRUQsTUFBTSxVQUFVLGlCQUFpQixDQUFTLEtBQXdCLEVBQUUsS0FBYTtJQUMvRSxJQUFJLEtBQUssQ0FBQyxFQUFFLEtBQUssS0FBSyxFQUFFO1FBQ3RCLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFFRCxJQUFJLFlBQVksQ0FBUyxLQUFLLENBQUMsRUFBRTtRQUMvQixPQUFPLHlCQUF5QixDQUFTLEtBQUssRUFBRSxLQUFLLENBQXNCLENBQUM7S0FDN0U7SUFFRCxJQUFJLFlBQVksQ0FBUyxLQUFLLENBQUMsRUFBRTtRQUMvQixPQUFPLHlCQUF5QixDQUFTLEtBQUssRUFBRSxLQUFLLENBQVEsQ0FBQztLQUMvRDtJQUVELHlCQUNNLEtBQWEsSUFDakIsRUFBRSxFQUFFLEtBQUssSUFDVDtBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBY3Rpb25zIH0gZnJvbSAnLi4vLi4vYWN0aW9ucyc7XHJcbmltcG9ydCB7IGZvcm1TdGF0ZVJlZHVjZXIgfSBmcm9tICcuLi8uLi9yZWR1Y2VyJztcclxuaW1wb3J0IHsgY29tcHV0ZUFycmF5U3RhdGUsIEZvcm1BcnJheVN0YXRlLCBGb3JtR3JvdXBDb250cm9scywgRm9ybUdyb3VwU3RhdGUsIEZvcm1TdGF0ZSwgaXNBcnJheVN0YXRlLCBpc0dyb3VwU3RhdGUgfSBmcm9tICcuLi8uLi9zdGF0ZSc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZGlzcGF0Y2hBY3Rpb25QZXJDaGlsZDxUVmFsdWU+KFxyXG4gIGNvbnRyb2xzOiByZWFkb25seSBGb3JtU3RhdGU8VFZhbHVlPltdLFxyXG4gIGFjdGlvbkNyZWF0b3I6IChjb250cm9sSWQ6IHN0cmluZykgPT4gQWN0aW9uczxUVmFsdWU+LFxyXG4pOiByZWFkb25seSBGb3JtU3RhdGU8VFZhbHVlPltdIHtcclxuICBsZXQgaGFzQ2hhbmdlZCA9IGZhbHNlO1xyXG4gIGNvbnN0IG5ld0NvbnRyb2xzID0gY29udHJvbHNcclxuICAgIC5tYXAoc3RhdGUgPT4ge1xyXG4gICAgICBjb25zdCBuZXdTdGF0ZSA9IGZvcm1TdGF0ZVJlZHVjZXI8VFZhbHVlPihzdGF0ZSwgYWN0aW9uQ3JlYXRvcihzdGF0ZS5pZCkpO1xyXG4gICAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBzdGF0ZSAhPT0gbmV3U3RhdGU7XHJcbiAgICAgIHJldHVybiBuZXdTdGF0ZTtcclxuICAgIH0pO1xyXG5cclxuICByZXR1cm4gaGFzQ2hhbmdlZCA/IG5ld0NvbnRyb2xzIDogY29udHJvbHM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhbGxDaGlsZFJlZHVjZXJzPFRWYWx1ZT4oXHJcbiAgY29udHJvbHM6IHJlYWRvbmx5IEZvcm1TdGF0ZTxUVmFsdWU+W10sXHJcbiAgYWN0aW9uOiBBY3Rpb25zPFRWYWx1ZVtdPixcclxuKTogcmVhZG9ubHkgRm9ybVN0YXRlPFRWYWx1ZT5bXSB7XHJcbiAgbGV0IGhhc0NoYW5nZWQgPSBmYWxzZTtcclxuICBjb25zdCBuZXdDb250cm9scyA9IGNvbnRyb2xzXHJcbiAgICAubWFwKHN0YXRlID0+IHtcclxuICAgICAgY29uc3QgbmV3U3RhdGUgPSBmb3JtU3RhdGVSZWR1Y2VyPFRWYWx1ZT4oc3RhdGUsIGFjdGlvbik7XHJcbiAgICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IHN0YXRlICE9PSBuZXdTdGF0ZTtcclxuICAgICAgcmV0dXJuIG5ld1N0YXRlO1xyXG4gICAgfSk7XHJcblxyXG4gIHJldHVybiBoYXNDaGFuZ2VkID8gbmV3Q29udHJvbHMgOiBjb250cm9scztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNoaWxkUmVkdWNlcjxUVmFsdWU+KHN0YXRlOiBGb3JtQXJyYXlTdGF0ZTxUVmFsdWU+LCBhY3Rpb246IEFjdGlvbnM8VFZhbHVlW10+KSB7XHJcbiAgY29uc3QgY29udHJvbHMgPSBjYWxsQ2hpbGRSZWR1Y2VycyhzdGF0ZS5jb250cm9scywgYWN0aW9uKTtcclxuXHJcbiAgaWYgKHN0YXRlLmNvbnRyb2xzID09PSBjb250cm9scykge1xyXG4gICAgcmV0dXJuIHN0YXRlO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGNvbXB1dGVBcnJheVN0YXRlKFxyXG4gICAgc3RhdGUuaWQsXHJcbiAgICBjb250cm9scyxcclxuICAgIHN0YXRlLnZhbHVlLFxyXG4gICAgc3RhdGUuZXJyb3JzLFxyXG4gICAgc3RhdGUucGVuZGluZ1ZhbGlkYXRpb25zLFxyXG4gICAgc3RhdGUudXNlckRlZmluZWRQcm9wZXJ0aWVzLFxyXG4gICAge1xyXG4gICAgICB3YXNPclNob3VsZEJlRGlydHk6IHN0YXRlLmlzRGlydHksXHJcbiAgICAgIHdhc09yU2hvdWxkQmVFbmFibGVkOiBzdGF0ZS5pc0VuYWJsZWQsXHJcbiAgICAgIHdhc09yU2hvdWxkQmVUb3VjaGVkOiBzdGF0ZS5pc1RvdWNoZWQsXHJcbiAgICAgIHdhc09yU2hvdWxkQmVTdWJtaXR0ZWQ6IHN0YXRlLmlzU3VibWl0dGVkLFxyXG4gICAgfSxcclxuICApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlSWRSZWN1cnNpdmVGb3JHcm91cDxUVmFsdWU+KHN0YXRlOiBGb3JtR3JvdXBTdGF0ZTxUVmFsdWU+LCBuZXdJZDogc3RyaW5nKTogRm9ybUdyb3VwU3RhdGU8VFZhbHVlPiB7XHJcbiAgY29uc3QgY29udHJvbHM6IEZvcm1Hcm91cENvbnRyb2xzPFRWYWx1ZT4gPVxyXG4gICAgT2JqZWN0LmtleXMoc3RhdGUuY29udHJvbHMpXHJcbiAgICAgIC5yZWR1Y2UoKGFnZywga2V5KSA9PiBPYmplY3QuYXNzaWduKGFnZywge1xyXG4gICAgICAgIFtrZXldOiB1cGRhdGVJZFJlY3Vyc2l2ZTxUVmFsdWVba2V5b2YgVFZhbHVlXT4oc3RhdGUuY29udHJvbHNba2V5IGFzIGtleW9mIFRWYWx1ZV0sIGAke25ld0lkfS4ke2tleX1gKSxcclxuICAgICAgfSksIHt9IGFzIEZvcm1Hcm91cENvbnRyb2xzPFRWYWx1ZT4pO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgLi4uc3RhdGUsXHJcbiAgICBpZDogbmV3SWQsXHJcbiAgICBjb250cm9scyxcclxuICB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlSWRSZWN1cnNpdmVGb3JBcnJheTxUVmFsdWU+KHN0YXRlOiBGb3JtQXJyYXlTdGF0ZTxUVmFsdWU+LCBuZXdJZDogc3RyaW5nKTogRm9ybUFycmF5U3RhdGU8VFZhbHVlPiB7XHJcbiAgY29uc3QgY29udHJvbHMgPSBzdGF0ZS5jb250cm9scy5tYXAoKGMsIGkpID0+IHVwZGF0ZUlkUmVjdXJzaXZlKGMsIGAke25ld0lkfS4ke2l9YCkpO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgLi4uc3RhdGUsXHJcbiAgICBpZDogbmV3SWQsXHJcbiAgICBjb250cm9scyxcclxuICB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlSWRSZWN1cnNpdmU8VFZhbHVlPihzdGF0ZTogRm9ybVN0YXRlPFRWYWx1ZT4sIG5ld0lkOiBzdHJpbmcpOiBGb3JtU3RhdGU8VFZhbHVlPiB7XHJcbiAgaWYgKHN0YXRlLmlkID09PSBuZXdJZCkge1xyXG4gICAgcmV0dXJuIHN0YXRlO1xyXG4gIH1cclxuXHJcbiAgaWYgKGlzR3JvdXBTdGF0ZTxUVmFsdWU+KHN0YXRlKSkge1xyXG4gICAgcmV0dXJuIHVwZGF0ZUlkUmVjdXJzaXZlRm9yR3JvdXA8VFZhbHVlPihzdGF0ZSwgbmV3SWQpIGFzIEZvcm1TdGF0ZTxUVmFsdWU+O1xyXG4gIH1cclxuXHJcbiAgaWYgKGlzQXJyYXlTdGF0ZTxUVmFsdWU+KHN0YXRlKSkge1xyXG4gICAgcmV0dXJuIHVwZGF0ZUlkUmVjdXJzaXZlRm9yQXJyYXk8VFZhbHVlPihzdGF0ZSwgbmV3SWQpIGFzIGFueTtcclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICAuLi4oc3RhdGUgYXMgYW55KSxcclxuICAgIGlkOiBuZXdJZCxcclxuICB9O1xyXG59XHJcbiJdfQ==