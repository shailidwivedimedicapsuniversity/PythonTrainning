import { SetErrorsAction } from '../actions';
import { formStateReducer } from '../reducer';
import { isFormState } from '../state';
import { ensureState } from './util';
export function setErrors(errorsOrErrorsArrayOrState, errorsOrErrorsArray, ...rest) {
    if (isFormState(errorsOrErrorsArrayOrState)) {
        const errorsArray = Array.isArray(errorsOrErrorsArray) ? errorsOrErrorsArray : [errorsOrErrorsArray];
        const errors = errorsArray.concat(...rest).reduce((agg, err) => Object.assign(agg, err), {});
        return formStateReducer(errorsOrErrorsArrayOrState, new SetErrorsAction(errorsOrErrorsArrayOrState.id, errors));
    }
    let errorsArray = Array.isArray(errorsOrErrorsArrayOrState) ? errorsOrErrorsArrayOrState : [errorsOrErrorsArrayOrState];
    errorsArray = errorsOrErrorsArray === undefined ? errorsArray : errorsArray.concat(errorsOrErrorsArray);
    return (s) => setErrors(ensureState(s), errorsArray.concat(rest));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0LWVycm9ycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25ncngtZm9ybXMvIiwic291cmNlcyI6WyJzcmMvdXBkYXRlLWZ1bmN0aW9uL3NldC1lcnJvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUM3QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDOUMsT0FBTyxFQUFtQyxXQUFXLEVBQW9CLE1BQU0sVUFBVSxDQUFDO0FBQzFGLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFpQ3JDLE1BQU0sVUFBVSxTQUFTLENBQ3ZCLDBCQUFxRixFQUNyRixtQkFBMkQsRUFDM0QsR0FBRyxJQUF3QjtJQUUzQixJQUFJLFdBQVcsQ0FBUywwQkFBMEIsQ0FBQyxFQUFFO1FBQ25ELE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLENBQUMsbUJBQW9CLENBQUMsQ0FBQztRQUN0RyxNQUFNLE1BQU0sR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBc0IsQ0FBQyxDQUFDO1FBRWpILE9BQU8sZ0JBQWdCLENBQUMsMEJBQTBCLEVBQUUsSUFBSSxlQUFlLENBQUMsMEJBQTBCLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7S0FDakg7SUFFRCxJQUFJLFdBQVcsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLDBCQUEwQixDQUFDLENBQUMsQ0FBQyxDQUFDLDBCQUEwQixDQUFDLENBQUMsQ0FBQyxDQUFDLDBCQUEwQixDQUFDLENBQUM7SUFDeEgsV0FBVyxHQUFHLG1CQUFtQixLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDeEcsT0FBTyxDQUFDLENBQStCLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBUyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQzFHLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTZXRFcnJvcnNBY3Rpb24gfSBmcm9tICcuLi9hY3Rpb25zJztcclxuaW1wb3J0IHsgZm9ybVN0YXRlUmVkdWNlciB9IGZyb20gJy4uL3JlZHVjZXInO1xyXG5pbXBvcnQgeyBBYnN0cmFjdENvbnRyb2xTdGF0ZSwgRm9ybVN0YXRlLCBpc0Zvcm1TdGF0ZSwgVmFsaWRhdGlvbkVycm9ycyB9IGZyb20gJy4uL3N0YXRlJztcclxuaW1wb3J0IHsgZW5zdXJlU3RhdGUgfSBmcm9tICcuL3V0aWwnO1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgdXBkYXRlIGZ1bmN0aW9uIHRha2VzIGEgZm9ybSBzdGF0ZSBhbmQgYSBudW1iZXIgb2YgZXJyb3Igb2JqZWN0cyBhbmQgc2V0cyB0aGVcclxuICogZXJyb3JzIG9mIHRoZSBzdGF0ZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRFcnJvcnM8VFZhbHVlPihcclxuICBzdGF0ZTogQWJzdHJhY3RDb250cm9sU3RhdGU8VFZhbHVlPixcclxuICBlcnJvcnM6IFZhbGlkYXRpb25FcnJvcnMsXHJcbiAgLi4ucmVzdDogVmFsaWRhdGlvbkVycm9yc1tdXHJcbik6IEZvcm1TdGF0ZTxUVmFsdWU+O1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgdXBkYXRlIGZ1bmN0aW9uIHRha2VzIGEgZm9ybSBzdGF0ZSBhbmQgYW4gYXJyYXkgb2YgZXJyb3Igb2JqZWN0cyBhbmQgc2V0cyB0aGVcclxuICogZXJyb3JzIG9mIHRoZSBzdGF0ZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRFcnJvcnM8VFZhbHVlPihcclxuICBzdGF0ZTogQWJzdHJhY3RDb250cm9sU3RhdGU8VFZhbHVlPixcclxuICBlcnJvcnNBcnJheTogVmFsaWRhdGlvbkVycm9yc1tdLFxyXG4pOiBGb3JtU3RhdGU8VFZhbHVlPjtcclxuXHJcbi8qKlxyXG4gKiBUaGlzIHVwZGF0ZSBmdW5jdGlvbiB0YWtlcyBhIG51bWJlciBvZiBlcnJvciBvYmplY3RzIGFuZCByZXR1cm5zIGEgcHJvamVjdGlvblxyXG4gKiBmdW5jdGlvbiB0aGF0IHNldHMgdGhlIGVycm9ycyBvZiBhIGZvcm0gc3RhdGUuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2V0RXJyb3JzKGVycm9yczogVmFsaWRhdGlvbkVycm9ycywgLi4ucmVzdDogVmFsaWRhdGlvbkVycm9yc1tdKTogPFRWYWx1ZT4oc3RhdGU6IEFic3RyYWN0Q29udHJvbFN0YXRlPFRWYWx1ZT4pID0+IEZvcm1TdGF0ZTxUVmFsdWU+O1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgdXBkYXRlIGZ1bmN0aW9uIHRha2VzIGFuIGFycmF5IG9mIGVycm9yIG9iamVjdHMgYW5kIHJldHVybnMgYSBwcm9qZWN0aW9uXHJcbiAqIGZ1bmN0aW9uIHRoYXQgc2V0cyB0aGUgZXJyb3JzIG9mIGEgZm9ybSBzdGF0ZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRFcnJvcnMoZXJyb3JzQXJyYXk6IFZhbGlkYXRpb25FcnJvcnNbXSk6IDxUVmFsdWU+KHN0YXRlOiBBYnN0cmFjdENvbnRyb2xTdGF0ZTxUVmFsdWU+KSA9PiBGb3JtU3RhdGU8VFZhbHVlPjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRFcnJvcnM8VFZhbHVlPihcclxuICBlcnJvcnNPckVycm9yc0FycmF5T3JTdGF0ZTogVmFsaWRhdGlvbkVycm9ycyB8IFZhbGlkYXRpb25FcnJvcnNbXSB8IEZvcm1TdGF0ZTxUVmFsdWU+LFxyXG4gIGVycm9yc09yRXJyb3JzQXJyYXk/OiBWYWxpZGF0aW9uRXJyb3JzIHwgVmFsaWRhdGlvbkVycm9yc1tdLFxyXG4gIC4uLnJlc3Q6IFZhbGlkYXRpb25FcnJvcnNbXVxyXG4pIHtcclxuICBpZiAoaXNGb3JtU3RhdGU8VFZhbHVlPihlcnJvcnNPckVycm9yc0FycmF5T3JTdGF0ZSkpIHtcclxuICAgIGNvbnN0IGVycm9yc0FycmF5ID0gQXJyYXkuaXNBcnJheShlcnJvcnNPckVycm9yc0FycmF5KSA/IGVycm9yc09yRXJyb3JzQXJyYXkgOiBbZXJyb3JzT3JFcnJvcnNBcnJheSFdO1xyXG4gICAgY29uc3QgZXJyb3JzID0gZXJyb3JzQXJyYXkuY29uY2F0KC4uLnJlc3QpLnJlZHVjZSgoYWdnLCBlcnIpID0+IE9iamVjdC5hc3NpZ24oYWdnLCBlcnIpLCB7fSBhcyBWYWxpZGF0aW9uRXJyb3JzKTtcclxuXHJcbiAgICByZXR1cm4gZm9ybVN0YXRlUmVkdWNlcihlcnJvcnNPckVycm9yc0FycmF5T3JTdGF0ZSwgbmV3IFNldEVycm9yc0FjdGlvbihlcnJvcnNPckVycm9yc0FycmF5T3JTdGF0ZS5pZCwgZXJyb3JzKSk7XHJcbiAgfVxyXG5cclxuICBsZXQgZXJyb3JzQXJyYXkgPSBBcnJheS5pc0FycmF5KGVycm9yc09yRXJyb3JzQXJyYXlPclN0YXRlKSA/IGVycm9yc09yRXJyb3JzQXJyYXlPclN0YXRlIDogW2Vycm9yc09yRXJyb3JzQXJyYXlPclN0YXRlXTtcclxuICBlcnJvcnNBcnJheSA9IGVycm9yc09yRXJyb3JzQXJyYXkgPT09IHVuZGVmaW5lZCA/IGVycm9yc0FycmF5IDogZXJyb3JzQXJyYXkuY29uY2F0KGVycm9yc09yRXJyb3JzQXJyYXkpO1xyXG4gIHJldHVybiAoczogQWJzdHJhY3RDb250cm9sU3RhdGU8VFZhbHVlPikgPT4gc2V0RXJyb3JzPFRWYWx1ZT4oZW5zdXJlU3RhdGUocyksIGVycm9yc0FycmF5LmNvbmNhdChyZXN0KSk7XHJcbn1cclxuIl19